/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * Please import the `PrismaClient` class from the `client.ts` file instead.
 */

import * as runtime from '@prisma/client/runtime/client'
import type * as Prisma from './prismaNamespace.ts'

const config: runtime.GetPrismaClientConfig = {
	generator: {
		name: 'client',
		provider: {
			fromEnvVar: null,
			value: 'prisma-client',
		},
		output: {
			value: '/Users/zhuxining/Code/virtus-website/app/generated/prisma',
			fromEnvVar: null,
		},
		config: {
			runtime: 'nodejs',
			moduleFormat: 'esm',
			generatedFileExtension: 'ts',
			importFileExtension: 'ts',
			engineType: 'client',
		},
		binaryTargets: [
			{
				fromEnvVar: null,
				value: 'darwin-arm64',
				native: true,
			},
		],
		previewFeatures: ['driverAdapters', 'queryCompiler'],
		sourceFilePath: '/Users/zhuxining/Code/virtus-website/prisma/schema.prisma',
		isCustomOutput: true,
	},
	relativePath: '../../../prisma',
	clientVersion: '6.8.2',
	engineVersion: '2060c79ba17c6bb9f5823312b6f6b7f4a845738e',
	datasourceNames: ['db'],
	activeProvider: 'sqlite',
	inlineDatasources: {
		db: {
			url: {
				fromEnvVar: null,
				value: '<invalid>',
			},
		},
	},
	inlineSchema:
		'model User {\n  id            String         @id\n  name          String\n  email         String\n  emailVerified Boolean\n  image         String?\n  createdAt     DateTime\n  updatedAt     DateTime\n  sessions      Session[]\n  accounts      Account[]\n  role          Role           @default(USER)\n  essay         Essay[]\n  essayAudit    EssayAudit[]\n  essayLike     EssayLike[]\n  eventHistory  EventHistory[]\n  donorInfo     DonorInfo[]\n\n  @@unique([email])\n  @@map("user")\n}\n\nmodel Session {\n  id        String   @id\n  expiresAt DateTime\n  token     String\n  createdAt DateTime\n  updatedAt DateTime\n  ipAddress String?\n  userAgent String?\n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([token])\n  @@map("session")\n}\n\nmodel Account {\n  id                    String    @id\n  accountId             String\n  providerId            String\n  userId                String\n  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  accessToken           String?\n  refreshToken          String?\n  idToken               String?\n  accessTokenExpiresAt  DateTime?\n  refreshTokenExpiresAt DateTime?\n  scope                 String?\n  password              String?\n  createdAt             DateTime\n  updatedAt             DateTime\n\n  @@map("account")\n}\n\nmodel Verification {\n  id         String    @id\n  identifier String\n  value      String\n  expiresAt  DateTime\n  createdAt  DateTime?\n  updatedAt  DateTime?\n\n  @@map("verification")\n}\n\nenum Role {\n  USER\n  ADMIN\n}\n\nmodel EventHistory {\n  id          Int      @id @default(autoincrement())\n  title       String\n  description String\n  content     String\n  banner      String\n  operator    User     @relation(fields: [operatorId], references: [id])\n  operatorId  String\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  @@map("event_history")\n}\n\nmodel DonorInfo {\n  id             Int      @id @default(autoincrement())\n  name           String\n  avatar         String?\n  description    String?\n  donationAmount Int?\n  donationDate   DateTime\n  operator       User     @relation(fields: [operatorId], references: [id])\n  operatorId     String\n  createdAt      DateTime @default(now())\n  updatedAt      DateTime @updatedAt\n\n  @@map("donor_info")\n}\n\nmodel MilestoneData {\n  id           Int      @id @default(autoincrement())\n  startYear    Int\n  studentCount Int\n  cityCount    Int\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n\n  @@map("milestone_data")\n}\n\nmodel Essay {\n  id        Int          @id @default(autoincrement())\n  title     String\n  banner    String?\n  content   String\n  author    User         @relation(fields: [authorId], references: [id])\n  authorId  String\n  status    EssayStatus  @default(DRAFT)\n  audit     EssayAudit[]\n  EssayLike EssayLike[]\n  createdAt DateTime     @default(now())\n  updatedAt DateTime     @updatedAt\n\n  @@map("essay")\n}\n\nmodel EssayAudit {\n  id          Int         @id @default(autoincrement())\n  essay       Essay       @relation(fields: [essayId], references: [id])\n  essayId     Int\n  auditStatus AuditStatus @default(PENDING)\n  auditMsg    String?\n  operator    User        @relation(fields: [operatorId], references: [id])\n  operatorId  String\n  createdAt   DateTime    @default(now())\n  updatedAt   DateTime    @updatedAt\n\n  @@map("essay_audit")\n}\n\nmodel EssayLike {\n  id         Int      @id @default(autoincrement())\n  essay      Essay    @relation(fields: [essayId], references: [id])\n  essayId    Int\n  operator   User     @relation(fields: [operatorId], references: [id])\n  operatorId String\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n\n  @@map("essay_like")\n}\n\nmodel EssayStatistics {\n  id Int @id @default(autoincrement())\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map("essay_statistics")\n}\n\nenum EssayStatus {\n  DRAFT\n  PENDING_REVIEW\n  PUBLISHED\n  REJECTED\n}\n\nenum AuditStatus {\n  PENDING\n  APPROVED\n  REJECTED\n}\n\nmodel LoginLog {\n  id        Int      @id @default(autoincrement())\n  userId    String\n  ip        String\n  userAgent String\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map("login_log")\n}\n\nmodel Announcement {\n  id        Int      @id @default(autoincrement())\n  content   String\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map("announcement")\n}\n\n// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider        = "prisma-client"\n  output          = "../app/generated/prisma"\n  previewFeatures = ["driverAdapters", "queryCompiler"]\n\n  runtime                = "nodejs"\n  moduleFormat           = "esm"\n  generatedFileExtension = "ts"\n  importFileExtension    = "ts"\n}\n\ngenerator zod {\n  provider         = "zod-prisma-types"\n  output           = "../app/generated/zod"\n  prismaClientPath = "@/generated/prisma"\n  useMultipleFiles = true\n  // createModelTypes = false\n}\n\ndatasource db {\n  provider = "sqlite"\n  // url      = env("DATABASE_URL")\n}\n',
	inlineSchemaHash:
		'6b9a976dbb09453b5a3bb59e2756e92c3e9c2e4ec53856bfd70591767caabea4',
	copyEngine: true,
	runtimeDataModel: {
		models: {},
		enums: {},
		types: {},
	},
	dirname: '',
}

config.runtimeDataModel = JSON.parse(
	'{"models":{"User":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"email","kind":"scalar","type":"String"},{"name":"emailVerified","kind":"scalar","type":"Boolean"},{"name":"image","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"sessions","kind":"object","type":"Session","relationName":"SessionToUser"},{"name":"accounts","kind":"object","type":"Account","relationName":"AccountToUser"},{"name":"role","kind":"enum","type":"Role"},{"name":"essay","kind":"object","type":"Essay","relationName":"EssayToUser"},{"name":"essayAudit","kind":"object","type":"EssayAudit","relationName":"EssayAuditToUser"},{"name":"essayLike","kind":"object","type":"EssayLike","relationName":"EssayLikeToUser"},{"name":"eventHistory","kind":"object","type":"EventHistory","relationName":"EventHistoryToUser"},{"name":"donorInfo","kind":"object","type":"DonorInfo","relationName":"DonorInfoToUser"}],"dbName":"user"},"Session":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"expiresAt","kind":"scalar","type":"DateTime"},{"name":"token","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"ipAddress","kind":"scalar","type":"String"},{"name":"userAgent","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"SessionToUser"}],"dbName":"session"},"Account":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"accountId","kind":"scalar","type":"String"},{"name":"providerId","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"AccountToUser"},{"name":"accessToken","kind":"scalar","type":"String"},{"name":"refreshToken","kind":"scalar","type":"String"},{"name":"idToken","kind":"scalar","type":"String"},{"name":"accessTokenExpiresAt","kind":"scalar","type":"DateTime"},{"name":"refreshTokenExpiresAt","kind":"scalar","type":"DateTime"},{"name":"scope","kind":"scalar","type":"String"},{"name":"password","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":"account"},"Verification":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"identifier","kind":"scalar","type":"String"},{"name":"value","kind":"scalar","type":"String"},{"name":"expiresAt","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":"verification"},"EventHistory":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"title","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"content","kind":"scalar","type":"String"},{"name":"banner","kind":"scalar","type":"String"},{"name":"operator","kind":"object","type":"User","relationName":"EventHistoryToUser"},{"name":"operatorId","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":"event_history"},"DonorInfo":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"name","kind":"scalar","type":"String"},{"name":"avatar","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"donationAmount","kind":"scalar","type":"Int"},{"name":"donationDate","kind":"scalar","type":"DateTime"},{"name":"operator","kind":"object","type":"User","relationName":"DonorInfoToUser"},{"name":"operatorId","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":"donor_info"},"MilestoneData":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"startYear","kind":"scalar","type":"Int"},{"name":"studentCount","kind":"scalar","type":"Int"},{"name":"cityCount","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":"milestone_data"},"Essay":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"title","kind":"scalar","type":"String"},{"name":"banner","kind":"scalar","type":"String"},{"name":"content","kind":"scalar","type":"String"},{"name":"author","kind":"object","type":"User","relationName":"EssayToUser"},{"name":"authorId","kind":"scalar","type":"String"},{"name":"status","kind":"enum","type":"EssayStatus"},{"name":"audit","kind":"object","type":"EssayAudit","relationName":"EssayToEssayAudit"},{"name":"EssayLike","kind":"object","type":"EssayLike","relationName":"EssayToEssayLike"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":"essay"},"EssayAudit":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"essay","kind":"object","type":"Essay","relationName":"EssayToEssayAudit"},{"name":"essayId","kind":"scalar","type":"Int"},{"name":"auditStatus","kind":"enum","type":"AuditStatus"},{"name":"auditMsg","kind":"scalar","type":"String"},{"name":"operator","kind":"object","type":"User","relationName":"EssayAuditToUser"},{"name":"operatorId","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":"essay_audit"},"EssayLike":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"essay","kind":"object","type":"Essay","relationName":"EssayToEssayLike"},{"name":"essayId","kind":"scalar","type":"Int"},{"name":"operator","kind":"object","type":"User","relationName":"EssayLikeToUser"},{"name":"operatorId","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":"essay_like"},"EssayStatistics":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":"essay_statistics"},"LoginLog":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"userId","kind":"scalar","type":"String"},{"name":"ip","kind":"scalar","type":"String"},{"name":"userAgent","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":"login_log"},"Announcement":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"content","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":"announcement"}},"enums":{},"types":{}}',
)
config.engineWasm = undefined
config.compilerWasm = {
	getRuntime: async () =>
		await import('@prisma/client/runtime/query_compiler_bg.sqlite.mjs'),

	getQueryCompilerWasmModule: async () => {
		const { readFile } = await import('node:fs/promises')
		const { createRequire } = await import('node:module')
		const require = createRequire(import.meta.url)

		const wasmModulePath = require.resolve(
			'@prisma/client/runtime/query_compiler_bg.sqlite.wasm',
		)
		const wasmModuleBytes = await readFile(wasmModulePath)

		return new globalThis.WebAssembly.Module(wasmModuleBytes)
	},
}

export type LogOptions<ClientOptions extends Prisma.PrismaClientOptions> =
	'log' extends keyof ClientOptions
		? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition>
			? Prisma.GetEvents<ClientOptions['log']>
			: never
		: never

export interface PrismaClientConstructor {
	/**
	 * ## Prisma Client
	 *
	 * Type-safe database client for TypeScript
	 * @example
	 * ```
	 * const prisma = new PrismaClient()
	 * // Fetch zero or more Users
	 * const users = await prisma.user.findMany()
	 * ```
	 *
	 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
	 */

	new <
		ClientOptions extends
			Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
		U = LogOptions<ClientOptions>,
		ExtArgs extends
			runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	>(
		options?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>,
	): PrismaClient<ClientOptions, U, ExtArgs>
}

/**
 * ## Prisma Client
 *
 * Type-safe database client for TypeScript
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */

export interface PrismaClient<
	ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
	U = LogOptions<ClientOptions>,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> {
	[K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

	$on<V extends U>(
		eventType: V,
		callback: (
			event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent,
		) => void,
	): PrismaClient

	/**
	 * Connect with the database
	 */
	$connect(): runtime.Types.Utils.JsPromise<void>

	/**
	 * Disconnect from the database
	 */
	$disconnect(): runtime.Types.Utils.JsPromise<void>

	/**
	 * Add a middleware
	 * @deprecated since 4.16.0. For new code, prefer client extensions instead.
	 * @see https://pris.ly/d/extensions
	 */
	$use(cb: Prisma.Middleware): void

	/**
	 * Executes a prepared raw query and returns the number of affected rows.
	 * @example
	 * ```
	 * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
	 * ```
	 *
	 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
	 */
	$executeRaw<T = unknown>(
		query: TemplateStringsArray | Prisma.Sql,
		...values: any[]
	): Prisma.PrismaPromise<number>

	/**
	 * Executes a raw query and returns the number of affected rows.
	 * Susceptible to SQL injections, see documentation.
	 * @example
	 * ```
	 * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
	 * ```
	 *
	 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
	 */
	$executeRawUnsafe<T = unknown>(
		query: string,
		...values: any[]
	): Prisma.PrismaPromise<number>

	/**
	 * Performs a prepared raw query and returns the `SELECT` data.
	 * @example
	 * ```
	 * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
	 * ```
	 *
	 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
	 */
	$queryRaw<T = unknown>(
		query: TemplateStringsArray | Prisma.Sql,
		...values: any[]
	): Prisma.PrismaPromise<T>

	/**
	 * Performs a raw query and returns the `SELECT` data.
	 * Susceptible to SQL injections, see documentation.
	 * @example
	 * ```
	 * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
	 * ```
	 *
	 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
	 */
	$queryRawUnsafe<T = unknown>(
		query: string,
		...values: any[]
	): Prisma.PrismaPromise<T>

	/**
	 * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
	 * @example
	 * ```
	 * const [george, bob, alice] = await prisma.$transaction([
	 *   prisma.user.create({ data: { name: 'George' } }),
	 *   prisma.user.create({ data: { name: 'Bob' } }),
	 *   prisma.user.create({ data: { name: 'Alice' } }),
	 * ])
	 * ```
	 *
	 * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
	 */
	$transaction<P extends Prisma.PrismaPromise<any>[]>(
		arg: [...P],
		options?: { isolationLevel?: Prisma.TransactionIsolationLevel },
	): runtime.Types.Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

	$transaction<R>(
		fn: (
			prisma: Omit<PrismaClient, runtime.ITXClientDenyList>,
		) => runtime.Types.Utils.JsPromise<R>,
		options?: {
			maxWait?: number
			timeout?: number
			isolationLevel?: Prisma.TransactionIsolationLevel
		},
	): runtime.Types.Utils.JsPromise<R>

	$extends: runtime.Types.Extensions.ExtendsHook<
		'extends',
		Prisma.TypeMapCb<ClientOptions>,
		ExtArgs,
		runtime.Types.Utils.Call<
			Prisma.TypeMapCb<ClientOptions>,
			{
				extArgs: ExtArgs
			}
		>
	>

	/**
	 * `prisma.user`: Exposes CRUD operations for the **User** model.
	 * Example usage:
	 * ```ts
	 * // Fetch zero or more Users
	 * const users = await prisma.user.findMany()
	 * ```
	 */
	get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>

	/**
	 * `prisma.session`: Exposes CRUD operations for the **Session** model.
	 * Example usage:
	 * ```ts
	 * // Fetch zero or more Sessions
	 * const sessions = await prisma.session.findMany()
	 * ```
	 */
	get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>

	/**
	 * `prisma.account`: Exposes CRUD operations for the **Account** model.
	 * Example usage:
	 * ```ts
	 * // Fetch zero or more Accounts
	 * const accounts = await prisma.account.findMany()
	 * ```
	 */
	get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>

	/**
	 * `prisma.verification`: Exposes CRUD operations for the **Verification** model.
	 * Example usage:
	 * ```ts
	 * // Fetch zero or more Verifications
	 * const verifications = await prisma.verification.findMany()
	 * ```
	 */
	get verification(): Prisma.VerificationDelegate<ExtArgs, ClientOptions>

	/**
	 * `prisma.eventHistory`: Exposes CRUD operations for the **EventHistory** model.
	 * Example usage:
	 * ```ts
	 * // Fetch zero or more EventHistories
	 * const eventHistories = await prisma.eventHistory.findMany()
	 * ```
	 */
	get eventHistory(): Prisma.EventHistoryDelegate<ExtArgs, ClientOptions>

	/**
	 * `prisma.donorInfo`: Exposes CRUD operations for the **DonorInfo** model.
	 * Example usage:
	 * ```ts
	 * // Fetch zero or more DonorInfos
	 * const donorInfos = await prisma.donorInfo.findMany()
	 * ```
	 */
	get donorInfo(): Prisma.DonorInfoDelegate<ExtArgs, ClientOptions>

	/**
	 * `prisma.milestoneData`: Exposes CRUD operations for the **MilestoneData** model.
	 * Example usage:
	 * ```ts
	 * // Fetch zero or more MilestoneData
	 * const milestoneData = await prisma.milestoneData.findMany()
	 * ```
	 */
	get milestoneData(): Prisma.MilestoneDataDelegate<ExtArgs, ClientOptions>

	/**
	 * `prisma.essay`: Exposes CRUD operations for the **Essay** model.
	 * Example usage:
	 * ```ts
	 * // Fetch zero or more Essays
	 * const essays = await prisma.essay.findMany()
	 * ```
	 */
	get essay(): Prisma.EssayDelegate<ExtArgs, ClientOptions>

	/**
	 * `prisma.essayAudit`: Exposes CRUD operations for the **EssayAudit** model.
	 * Example usage:
	 * ```ts
	 * // Fetch zero or more EssayAudits
	 * const essayAudits = await prisma.essayAudit.findMany()
	 * ```
	 */
	get essayAudit(): Prisma.EssayAuditDelegate<ExtArgs, ClientOptions>

	/**
	 * `prisma.essayLike`: Exposes CRUD operations for the **EssayLike** model.
	 * Example usage:
	 * ```ts
	 * // Fetch zero or more EssayLikes
	 * const essayLikes = await prisma.essayLike.findMany()
	 * ```
	 */
	get essayLike(): Prisma.EssayLikeDelegate<ExtArgs, ClientOptions>

	/**
	 * `prisma.essayStatistics`: Exposes CRUD operations for the **EssayStatistics** model.
	 * Example usage:
	 * ```ts
	 * // Fetch zero or more EssayStatistics
	 * const essayStatistics = await prisma.essayStatistics.findMany()
	 * ```
	 */
	get essayStatistics(): Prisma.EssayStatisticsDelegate<ExtArgs, ClientOptions>

	/**
	 * `prisma.loginLog`: Exposes CRUD operations for the **LoginLog** model.
	 * Example usage:
	 * ```ts
	 * // Fetch zero or more LoginLogs
	 * const loginLogs = await prisma.loginLog.findMany()
	 * ```
	 */
	get loginLog(): Prisma.LoginLogDelegate<ExtArgs, ClientOptions>

	/**
	 * `prisma.announcement`: Exposes CRUD operations for the **Announcement** model.
	 * Example usage:
	 * ```ts
	 * // Fetch zero or more Announcements
	 * const announcements = await prisma.announcement.findMany()
	 * ```
	 */
	get announcement(): Prisma.AnnouncementDelegate<ExtArgs, ClientOptions>
}

export function getPrismaClientClass(dirname: string): PrismaClientConstructor {
	config.dirname = dirname
	return runtime.getPrismaClient(config) as unknown as PrismaClientConstructor
}
