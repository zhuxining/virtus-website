
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `EssayStatistics` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model EssayStatistics
 * 
 */
export type EssayStatisticsModel = runtime.Types.Result.DefaultSelection<Prisma.$EssayStatisticsPayload>

export type AggregateEssayStatistics = {
  _count: EssayStatisticsCountAggregateOutputType | null
  _avg: EssayStatisticsAvgAggregateOutputType | null
  _sum: EssayStatisticsSumAggregateOutputType | null
  _min: EssayStatisticsMinAggregateOutputType | null
  _max: EssayStatisticsMaxAggregateOutputType | null
}

export type EssayStatisticsAvgAggregateOutputType = {
  id: number | null
}

export type EssayStatisticsSumAggregateOutputType = {
  id: number | null
}

export type EssayStatisticsMinAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EssayStatisticsMaxAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EssayStatisticsCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type EssayStatisticsAvgAggregateInputType = {
  id?: true
}

export type EssayStatisticsSumAggregateInputType = {
  id?: true
}

export type EssayStatisticsMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
}

export type EssayStatisticsMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
}

export type EssayStatisticsCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type EssayStatisticsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EssayStatistics to aggregate.
   */
  where?: Prisma.EssayStatisticsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EssayStatistics to fetch.
   */
  orderBy?: Prisma.EssayStatisticsOrderByWithRelationInput | Prisma.EssayStatisticsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EssayStatisticsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EssayStatistics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EssayStatistics.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EssayStatistics
  **/
  _count?: true | EssayStatisticsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: EssayStatisticsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: EssayStatisticsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EssayStatisticsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EssayStatisticsMaxAggregateInputType
}

export type GetEssayStatisticsAggregateType<T extends EssayStatisticsAggregateArgs> = {
      [P in keyof T & keyof AggregateEssayStatistics]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEssayStatistics[P]>
    : Prisma.GetScalarType<T[P], AggregateEssayStatistics[P]>
}




export type EssayStatisticsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EssayStatisticsWhereInput
  orderBy?: Prisma.EssayStatisticsOrderByWithAggregationInput | Prisma.EssayStatisticsOrderByWithAggregationInput[]
  by: Prisma.EssayStatisticsScalarFieldEnum[] | Prisma.EssayStatisticsScalarFieldEnum
  having?: Prisma.EssayStatisticsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EssayStatisticsCountAggregateInputType | true
  _avg?: EssayStatisticsAvgAggregateInputType
  _sum?: EssayStatisticsSumAggregateInputType
  _min?: EssayStatisticsMinAggregateInputType
  _max?: EssayStatisticsMaxAggregateInputType
}

export type EssayStatisticsGroupByOutputType = {
  id: number
  createdAt: Date
  updatedAt: Date
  _count: EssayStatisticsCountAggregateOutputType | null
  _avg: EssayStatisticsAvgAggregateOutputType | null
  _sum: EssayStatisticsSumAggregateOutputType | null
  _min: EssayStatisticsMinAggregateOutputType | null
  _max: EssayStatisticsMaxAggregateOutputType | null
}

type GetEssayStatisticsGroupByPayload<T extends EssayStatisticsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EssayStatisticsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EssayStatisticsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EssayStatisticsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EssayStatisticsGroupByOutputType[P]>
      }
    >
  > 



export type EssayStatisticsWhereInput = {
  AND?: Prisma.EssayStatisticsWhereInput | Prisma.EssayStatisticsWhereInput[]
  OR?: Prisma.EssayStatisticsWhereInput[]
  NOT?: Prisma.EssayStatisticsWhereInput | Prisma.EssayStatisticsWhereInput[]
  id?: Prisma.IntFilter<"EssayStatistics"> | number
  createdAt?: Prisma.DateTimeFilter<"EssayStatistics"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EssayStatistics"> | Date | string
}

export type EssayStatisticsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EssayStatisticsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.EssayStatisticsWhereInput | Prisma.EssayStatisticsWhereInput[]
  OR?: Prisma.EssayStatisticsWhereInput[]
  NOT?: Prisma.EssayStatisticsWhereInput | Prisma.EssayStatisticsWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"EssayStatistics"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EssayStatistics"> | Date | string
}, "id">

export type EssayStatisticsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.EssayStatisticsCountOrderByAggregateInput
  _avg?: Prisma.EssayStatisticsAvgOrderByAggregateInput
  _max?: Prisma.EssayStatisticsMaxOrderByAggregateInput
  _min?: Prisma.EssayStatisticsMinOrderByAggregateInput
  _sum?: Prisma.EssayStatisticsSumOrderByAggregateInput
}

export type EssayStatisticsScalarWhereWithAggregatesInput = {
  AND?: Prisma.EssayStatisticsScalarWhereWithAggregatesInput | Prisma.EssayStatisticsScalarWhereWithAggregatesInput[]
  OR?: Prisma.EssayStatisticsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EssayStatisticsScalarWhereWithAggregatesInput | Prisma.EssayStatisticsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"EssayStatistics"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"EssayStatistics"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"EssayStatistics"> | Date | string
}

export type EssayStatisticsCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EssayStatisticsUncheckedCreateInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EssayStatisticsUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EssayStatisticsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EssayStatisticsCreateManyInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EssayStatisticsUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EssayStatisticsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EssayStatisticsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EssayStatisticsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type EssayStatisticsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EssayStatisticsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EssayStatisticsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}



export type EssayStatisticsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["essayStatistics"]>

export type EssayStatisticsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["essayStatistics"]>

export type EssayStatisticsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["essayStatistics"]>

export type EssayStatisticsSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type EssayStatisticsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt", ExtArgs["result"]["essayStatistics"]>

export type $EssayStatisticsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EssayStatistics"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["essayStatistics"]>
  composites: {}
}

export type EssayStatisticsGetPayload<S extends boolean | null | undefined | EssayStatisticsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EssayStatisticsPayload, S>

export type EssayStatisticsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EssayStatisticsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EssayStatisticsCountAggregateInputType | true
  }

export interface EssayStatisticsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EssayStatistics'], meta: { name: 'EssayStatistics' } }
  /**
   * Find zero or one EssayStatistics that matches the filter.
   * @param {EssayStatisticsFindUniqueArgs} args - Arguments to find a EssayStatistics
   * @example
   * // Get one EssayStatistics
   * const essayStatistics = await prisma.essayStatistics.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EssayStatisticsFindUniqueArgs>(args: Prisma.SelectSubset<T, EssayStatisticsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EssayStatisticsClient<runtime.Types.Result.GetResult<Prisma.$EssayStatisticsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EssayStatistics that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EssayStatisticsFindUniqueOrThrowArgs} args - Arguments to find a EssayStatistics
   * @example
   * // Get one EssayStatistics
   * const essayStatistics = await prisma.essayStatistics.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EssayStatisticsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EssayStatisticsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EssayStatisticsClient<runtime.Types.Result.GetResult<Prisma.$EssayStatisticsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EssayStatistics that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayStatisticsFindFirstArgs} args - Arguments to find a EssayStatistics
   * @example
   * // Get one EssayStatistics
   * const essayStatistics = await prisma.essayStatistics.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EssayStatisticsFindFirstArgs>(args?: Prisma.SelectSubset<T, EssayStatisticsFindFirstArgs<ExtArgs>>): Prisma.Prisma__EssayStatisticsClient<runtime.Types.Result.GetResult<Prisma.$EssayStatisticsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EssayStatistics that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayStatisticsFindFirstOrThrowArgs} args - Arguments to find a EssayStatistics
   * @example
   * // Get one EssayStatistics
   * const essayStatistics = await prisma.essayStatistics.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EssayStatisticsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EssayStatisticsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EssayStatisticsClient<runtime.Types.Result.GetResult<Prisma.$EssayStatisticsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EssayStatistics that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayStatisticsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EssayStatistics
   * const essayStatistics = await prisma.essayStatistics.findMany()
   * 
   * // Get first 10 EssayStatistics
   * const essayStatistics = await prisma.essayStatistics.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const essayStatisticsWithIdOnly = await prisma.essayStatistics.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EssayStatisticsFindManyArgs>(args?: Prisma.SelectSubset<T, EssayStatisticsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EssayStatisticsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EssayStatistics.
   * @param {EssayStatisticsCreateArgs} args - Arguments to create a EssayStatistics.
   * @example
   * // Create one EssayStatistics
   * const EssayStatistics = await prisma.essayStatistics.create({
   *   data: {
   *     // ... data to create a EssayStatistics
   *   }
   * })
   * 
   */
  create<T extends EssayStatisticsCreateArgs>(args: Prisma.SelectSubset<T, EssayStatisticsCreateArgs<ExtArgs>>): Prisma.Prisma__EssayStatisticsClient<runtime.Types.Result.GetResult<Prisma.$EssayStatisticsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EssayStatistics.
   * @param {EssayStatisticsCreateManyArgs} args - Arguments to create many EssayStatistics.
   * @example
   * // Create many EssayStatistics
   * const essayStatistics = await prisma.essayStatistics.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EssayStatisticsCreateManyArgs>(args?: Prisma.SelectSubset<T, EssayStatisticsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many EssayStatistics and returns the data saved in the database.
   * @param {EssayStatisticsCreateManyAndReturnArgs} args - Arguments to create many EssayStatistics.
   * @example
   * // Create many EssayStatistics
   * const essayStatistics = await prisma.essayStatistics.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many EssayStatistics and only return the `id`
   * const essayStatisticsWithIdOnly = await prisma.essayStatistics.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EssayStatisticsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EssayStatisticsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EssayStatisticsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a EssayStatistics.
   * @param {EssayStatisticsDeleteArgs} args - Arguments to delete one EssayStatistics.
   * @example
   * // Delete one EssayStatistics
   * const EssayStatistics = await prisma.essayStatistics.delete({
   *   where: {
   *     // ... filter to delete one EssayStatistics
   *   }
   * })
   * 
   */
  delete<T extends EssayStatisticsDeleteArgs>(args: Prisma.SelectSubset<T, EssayStatisticsDeleteArgs<ExtArgs>>): Prisma.Prisma__EssayStatisticsClient<runtime.Types.Result.GetResult<Prisma.$EssayStatisticsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EssayStatistics.
   * @param {EssayStatisticsUpdateArgs} args - Arguments to update one EssayStatistics.
   * @example
   * // Update one EssayStatistics
   * const essayStatistics = await prisma.essayStatistics.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EssayStatisticsUpdateArgs>(args: Prisma.SelectSubset<T, EssayStatisticsUpdateArgs<ExtArgs>>): Prisma.Prisma__EssayStatisticsClient<runtime.Types.Result.GetResult<Prisma.$EssayStatisticsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EssayStatistics.
   * @param {EssayStatisticsDeleteManyArgs} args - Arguments to filter EssayStatistics to delete.
   * @example
   * // Delete a few EssayStatistics
   * const { count } = await prisma.essayStatistics.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EssayStatisticsDeleteManyArgs>(args?: Prisma.SelectSubset<T, EssayStatisticsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EssayStatistics.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayStatisticsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EssayStatistics
   * const essayStatistics = await prisma.essayStatistics.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EssayStatisticsUpdateManyArgs>(args: Prisma.SelectSubset<T, EssayStatisticsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EssayStatistics and returns the data updated in the database.
   * @param {EssayStatisticsUpdateManyAndReturnArgs} args - Arguments to update many EssayStatistics.
   * @example
   * // Update many EssayStatistics
   * const essayStatistics = await prisma.essayStatistics.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more EssayStatistics and only return the `id`
   * const essayStatisticsWithIdOnly = await prisma.essayStatistics.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EssayStatisticsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EssayStatisticsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EssayStatisticsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one EssayStatistics.
   * @param {EssayStatisticsUpsertArgs} args - Arguments to update or create a EssayStatistics.
   * @example
   * // Update or create a EssayStatistics
   * const essayStatistics = await prisma.essayStatistics.upsert({
   *   create: {
   *     // ... data to create a EssayStatistics
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EssayStatistics we want to update
   *   }
   * })
   */
  upsert<T extends EssayStatisticsUpsertArgs>(args: Prisma.SelectSubset<T, EssayStatisticsUpsertArgs<ExtArgs>>): Prisma.Prisma__EssayStatisticsClient<runtime.Types.Result.GetResult<Prisma.$EssayStatisticsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EssayStatistics.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayStatisticsCountArgs} args - Arguments to filter EssayStatistics to count.
   * @example
   * // Count the number of EssayStatistics
   * const count = await prisma.essayStatistics.count({
   *   where: {
   *     // ... the filter for the EssayStatistics we want to count
   *   }
   * })
  **/
  count<T extends EssayStatisticsCountArgs>(
    args?: Prisma.Subset<T, EssayStatisticsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EssayStatisticsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EssayStatistics.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayStatisticsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EssayStatisticsAggregateArgs>(args: Prisma.Subset<T, EssayStatisticsAggregateArgs>): Prisma.PrismaPromise<GetEssayStatisticsAggregateType<T>>

  /**
   * Group by EssayStatistics.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayStatisticsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EssayStatisticsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EssayStatisticsGroupByArgs['orderBy'] }
      : { orderBy?: EssayStatisticsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EssayStatisticsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEssayStatisticsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EssayStatistics model
 */
readonly fields: EssayStatisticsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EssayStatistics.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EssayStatisticsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EssayStatistics model
 */
export interface EssayStatisticsFieldRefs {
  readonly id: Prisma.FieldRef<"EssayStatistics", 'Int'>
  readonly createdAt: Prisma.FieldRef<"EssayStatistics", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"EssayStatistics", 'DateTime'>
}
    

// Custom InputTypes
/**
 * EssayStatistics findUnique
 */
export type EssayStatisticsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayStatistics
   */
  select?: Prisma.EssayStatisticsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayStatistics
   */
  omit?: Prisma.EssayStatisticsOmit<ExtArgs> | null
  /**
   * Filter, which EssayStatistics to fetch.
   */
  where: Prisma.EssayStatisticsWhereUniqueInput
}

/**
 * EssayStatistics findUniqueOrThrow
 */
export type EssayStatisticsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayStatistics
   */
  select?: Prisma.EssayStatisticsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayStatistics
   */
  omit?: Prisma.EssayStatisticsOmit<ExtArgs> | null
  /**
   * Filter, which EssayStatistics to fetch.
   */
  where: Prisma.EssayStatisticsWhereUniqueInput
}

/**
 * EssayStatistics findFirst
 */
export type EssayStatisticsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayStatistics
   */
  select?: Prisma.EssayStatisticsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayStatistics
   */
  omit?: Prisma.EssayStatisticsOmit<ExtArgs> | null
  /**
   * Filter, which EssayStatistics to fetch.
   */
  where?: Prisma.EssayStatisticsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EssayStatistics to fetch.
   */
  orderBy?: Prisma.EssayStatisticsOrderByWithRelationInput | Prisma.EssayStatisticsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EssayStatistics.
   */
  cursor?: Prisma.EssayStatisticsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EssayStatistics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EssayStatistics.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EssayStatistics.
   */
  distinct?: Prisma.EssayStatisticsScalarFieldEnum | Prisma.EssayStatisticsScalarFieldEnum[]
}

/**
 * EssayStatistics findFirstOrThrow
 */
export type EssayStatisticsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayStatistics
   */
  select?: Prisma.EssayStatisticsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayStatistics
   */
  omit?: Prisma.EssayStatisticsOmit<ExtArgs> | null
  /**
   * Filter, which EssayStatistics to fetch.
   */
  where?: Prisma.EssayStatisticsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EssayStatistics to fetch.
   */
  orderBy?: Prisma.EssayStatisticsOrderByWithRelationInput | Prisma.EssayStatisticsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EssayStatistics.
   */
  cursor?: Prisma.EssayStatisticsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EssayStatistics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EssayStatistics.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EssayStatistics.
   */
  distinct?: Prisma.EssayStatisticsScalarFieldEnum | Prisma.EssayStatisticsScalarFieldEnum[]
}

/**
 * EssayStatistics findMany
 */
export type EssayStatisticsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayStatistics
   */
  select?: Prisma.EssayStatisticsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayStatistics
   */
  omit?: Prisma.EssayStatisticsOmit<ExtArgs> | null
  /**
   * Filter, which EssayStatistics to fetch.
   */
  where?: Prisma.EssayStatisticsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EssayStatistics to fetch.
   */
  orderBy?: Prisma.EssayStatisticsOrderByWithRelationInput | Prisma.EssayStatisticsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EssayStatistics.
   */
  cursor?: Prisma.EssayStatisticsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EssayStatistics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EssayStatistics.
   */
  skip?: number
  distinct?: Prisma.EssayStatisticsScalarFieldEnum | Prisma.EssayStatisticsScalarFieldEnum[]
}

/**
 * EssayStatistics create
 */
export type EssayStatisticsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayStatistics
   */
  select?: Prisma.EssayStatisticsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayStatistics
   */
  omit?: Prisma.EssayStatisticsOmit<ExtArgs> | null
  /**
   * The data needed to create a EssayStatistics.
   */
  data: Prisma.XOR<Prisma.EssayStatisticsCreateInput, Prisma.EssayStatisticsUncheckedCreateInput>
}

/**
 * EssayStatistics createMany
 */
export type EssayStatisticsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EssayStatistics.
   */
  data: Prisma.EssayStatisticsCreateManyInput | Prisma.EssayStatisticsCreateManyInput[]
}

/**
 * EssayStatistics createManyAndReturn
 */
export type EssayStatisticsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayStatistics
   */
  select?: Prisma.EssayStatisticsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EssayStatistics
   */
  omit?: Prisma.EssayStatisticsOmit<ExtArgs> | null
  /**
   * The data used to create many EssayStatistics.
   */
  data: Prisma.EssayStatisticsCreateManyInput | Prisma.EssayStatisticsCreateManyInput[]
}

/**
 * EssayStatistics update
 */
export type EssayStatisticsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayStatistics
   */
  select?: Prisma.EssayStatisticsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayStatistics
   */
  omit?: Prisma.EssayStatisticsOmit<ExtArgs> | null
  /**
   * The data needed to update a EssayStatistics.
   */
  data: Prisma.XOR<Prisma.EssayStatisticsUpdateInput, Prisma.EssayStatisticsUncheckedUpdateInput>
  /**
   * Choose, which EssayStatistics to update.
   */
  where: Prisma.EssayStatisticsWhereUniqueInput
}

/**
 * EssayStatistics updateMany
 */
export type EssayStatisticsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EssayStatistics.
   */
  data: Prisma.XOR<Prisma.EssayStatisticsUpdateManyMutationInput, Prisma.EssayStatisticsUncheckedUpdateManyInput>
  /**
   * Filter which EssayStatistics to update
   */
  where?: Prisma.EssayStatisticsWhereInput
  /**
   * Limit how many EssayStatistics to update.
   */
  limit?: number
}

/**
 * EssayStatistics updateManyAndReturn
 */
export type EssayStatisticsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayStatistics
   */
  select?: Prisma.EssayStatisticsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EssayStatistics
   */
  omit?: Prisma.EssayStatisticsOmit<ExtArgs> | null
  /**
   * The data used to update EssayStatistics.
   */
  data: Prisma.XOR<Prisma.EssayStatisticsUpdateManyMutationInput, Prisma.EssayStatisticsUncheckedUpdateManyInput>
  /**
   * Filter which EssayStatistics to update
   */
  where?: Prisma.EssayStatisticsWhereInput
  /**
   * Limit how many EssayStatistics to update.
   */
  limit?: number
}

/**
 * EssayStatistics upsert
 */
export type EssayStatisticsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayStatistics
   */
  select?: Prisma.EssayStatisticsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayStatistics
   */
  omit?: Prisma.EssayStatisticsOmit<ExtArgs> | null
  /**
   * The filter to search for the EssayStatistics to update in case it exists.
   */
  where: Prisma.EssayStatisticsWhereUniqueInput
  /**
   * In case the EssayStatistics found by the `where` argument doesn't exist, create a new EssayStatistics with this data.
   */
  create: Prisma.XOR<Prisma.EssayStatisticsCreateInput, Prisma.EssayStatisticsUncheckedCreateInput>
  /**
   * In case the EssayStatistics was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EssayStatisticsUpdateInput, Prisma.EssayStatisticsUncheckedUpdateInput>
}

/**
 * EssayStatistics delete
 */
export type EssayStatisticsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayStatistics
   */
  select?: Prisma.EssayStatisticsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayStatistics
   */
  omit?: Prisma.EssayStatisticsOmit<ExtArgs> | null
  /**
   * Filter which EssayStatistics to delete.
   */
  where: Prisma.EssayStatisticsWhereUniqueInput
}

/**
 * EssayStatistics deleteMany
 */
export type EssayStatisticsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EssayStatistics to delete
   */
  where?: Prisma.EssayStatisticsWhereInput
  /**
   * Limit how many EssayStatistics to delete.
   */
  limit?: number
}

/**
 * EssayStatistics without action
 */
export type EssayStatisticsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayStatistics
   */
  select?: Prisma.EssayStatisticsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayStatistics
   */
  omit?: Prisma.EssayStatisticsOmit<ExtArgs> | null
}
