
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Essay` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Essay
 * 
 */
export type EssayModel = runtime.Types.Result.DefaultSelection<Prisma.$EssayPayload>

export type AggregateEssay = {
  _count: EssayCountAggregateOutputType | null
  _avg: EssayAvgAggregateOutputType | null
  _sum: EssaySumAggregateOutputType | null
  _min: EssayMinAggregateOutputType | null
  _max: EssayMaxAggregateOutputType | null
}

export type EssayAvgAggregateOutputType = {
  id: number | null
}

export type EssaySumAggregateOutputType = {
  id: number | null
}

export type EssayMinAggregateOutputType = {
  id: number | null
  title: string | null
  banner: string | null
  content: string | null
  authorId: string | null
  status: $Enums.EssayStatus | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EssayMaxAggregateOutputType = {
  id: number | null
  title: string | null
  banner: string | null
  content: string | null
  authorId: string | null
  status: $Enums.EssayStatus | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EssayCountAggregateOutputType = {
  id: number
  title: number
  banner: number
  content: number
  authorId: number
  status: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type EssayAvgAggregateInputType = {
  id?: true
}

export type EssaySumAggregateInputType = {
  id?: true
}

export type EssayMinAggregateInputType = {
  id?: true
  title?: true
  banner?: true
  content?: true
  authorId?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type EssayMaxAggregateInputType = {
  id?: true
  title?: true
  banner?: true
  content?: true
  authorId?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type EssayCountAggregateInputType = {
  id?: true
  title?: true
  banner?: true
  content?: true
  authorId?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type EssayAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Essay to aggregate.
   */
  where?: Prisma.EssayWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Essays to fetch.
   */
  orderBy?: Prisma.EssayOrderByWithRelationInput | Prisma.EssayOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EssayWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Essays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Essays.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Essays
  **/
  _count?: true | EssayCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: EssayAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: EssaySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EssayMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EssayMaxAggregateInputType
}

export type GetEssayAggregateType<T extends EssayAggregateArgs> = {
      [P in keyof T & keyof AggregateEssay]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEssay[P]>
    : Prisma.GetScalarType<T[P], AggregateEssay[P]>
}




export type EssayGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EssayWhereInput
  orderBy?: Prisma.EssayOrderByWithAggregationInput | Prisma.EssayOrderByWithAggregationInput[]
  by: Prisma.EssayScalarFieldEnum[] | Prisma.EssayScalarFieldEnum
  having?: Prisma.EssayScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EssayCountAggregateInputType | true
  _avg?: EssayAvgAggregateInputType
  _sum?: EssaySumAggregateInputType
  _min?: EssayMinAggregateInputType
  _max?: EssayMaxAggregateInputType
}

export type EssayGroupByOutputType = {
  id: number
  title: string
  banner: string | null
  content: string
  authorId: string
  status: $Enums.EssayStatus
  createdAt: Date
  updatedAt: Date
  _count: EssayCountAggregateOutputType | null
  _avg: EssayAvgAggregateOutputType | null
  _sum: EssaySumAggregateOutputType | null
  _min: EssayMinAggregateOutputType | null
  _max: EssayMaxAggregateOutputType | null
}

type GetEssayGroupByPayload<T extends EssayGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EssayGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EssayGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EssayGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EssayGroupByOutputType[P]>
      }
    >
  > 



export type EssayWhereInput = {
  AND?: Prisma.EssayWhereInput | Prisma.EssayWhereInput[]
  OR?: Prisma.EssayWhereInput[]
  NOT?: Prisma.EssayWhereInput | Prisma.EssayWhereInput[]
  id?: Prisma.IntFilter<"Essay"> | number
  title?: Prisma.StringFilter<"Essay"> | string
  banner?: Prisma.StringNullableFilter<"Essay"> | string | null
  content?: Prisma.StringFilter<"Essay"> | string
  authorId?: Prisma.StringFilter<"Essay"> | string
  status?: Prisma.EnumEssayStatusFilter<"Essay"> | $Enums.EssayStatus
  createdAt?: Prisma.DateTimeFilter<"Essay"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Essay"> | Date | string
  author?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  audit?: Prisma.EssayAuditListRelationFilter
  EssayLike?: Prisma.EssayLikeListRelationFilter
}

export type EssayOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  banner?: Prisma.SortOrderInput | Prisma.SortOrder
  content?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  author?: Prisma.UserOrderByWithRelationInput
  audit?: Prisma.EssayAuditOrderByRelationAggregateInput
  EssayLike?: Prisma.EssayLikeOrderByRelationAggregateInput
}

export type EssayWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.EssayWhereInput | Prisma.EssayWhereInput[]
  OR?: Prisma.EssayWhereInput[]
  NOT?: Prisma.EssayWhereInput | Prisma.EssayWhereInput[]
  title?: Prisma.StringFilter<"Essay"> | string
  banner?: Prisma.StringNullableFilter<"Essay"> | string | null
  content?: Prisma.StringFilter<"Essay"> | string
  authorId?: Prisma.StringFilter<"Essay"> | string
  status?: Prisma.EnumEssayStatusFilter<"Essay"> | $Enums.EssayStatus
  createdAt?: Prisma.DateTimeFilter<"Essay"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Essay"> | Date | string
  author?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  audit?: Prisma.EssayAuditListRelationFilter
  EssayLike?: Prisma.EssayLikeListRelationFilter
}, "id">

export type EssayOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  banner?: Prisma.SortOrderInput | Prisma.SortOrder
  content?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.EssayCountOrderByAggregateInput
  _avg?: Prisma.EssayAvgOrderByAggregateInput
  _max?: Prisma.EssayMaxOrderByAggregateInput
  _min?: Prisma.EssayMinOrderByAggregateInput
  _sum?: Prisma.EssaySumOrderByAggregateInput
}

export type EssayScalarWhereWithAggregatesInput = {
  AND?: Prisma.EssayScalarWhereWithAggregatesInput | Prisma.EssayScalarWhereWithAggregatesInput[]
  OR?: Prisma.EssayScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EssayScalarWhereWithAggregatesInput | Prisma.EssayScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Essay"> | number
  title?: Prisma.StringWithAggregatesFilter<"Essay"> | string
  banner?: Prisma.StringNullableWithAggregatesFilter<"Essay"> | string | null
  content?: Prisma.StringWithAggregatesFilter<"Essay"> | string
  authorId?: Prisma.StringWithAggregatesFilter<"Essay"> | string
  status?: Prisma.EnumEssayStatusWithAggregatesFilter<"Essay"> | $Enums.EssayStatus
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Essay"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Essay"> | Date | string
}

export type EssayCreateInput = {
  title: string
  banner?: string | null
  content: string
  status?: $Enums.EssayStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  author: Prisma.UserCreateNestedOneWithoutEssayInput
  audit?: Prisma.EssayAuditCreateNestedManyWithoutEssayInput
  EssayLike?: Prisma.EssayLikeCreateNestedManyWithoutEssayInput
}

export type EssayUncheckedCreateInput = {
  id?: number
  title: string
  banner?: string | null
  content: string
  authorId: string
  status?: $Enums.EssayStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  audit?: Prisma.EssayAuditUncheckedCreateNestedManyWithoutEssayInput
  EssayLike?: Prisma.EssayLikeUncheckedCreateNestedManyWithoutEssayInput
}

export type EssayUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  banner?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumEssayStatusFieldUpdateOperationsInput | $Enums.EssayStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  author?: Prisma.UserUpdateOneRequiredWithoutEssayNestedInput
  audit?: Prisma.EssayAuditUpdateManyWithoutEssayNestedInput
  EssayLike?: Prisma.EssayLikeUpdateManyWithoutEssayNestedInput
}

export type EssayUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  banner?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  authorId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumEssayStatusFieldUpdateOperationsInput | $Enums.EssayStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  audit?: Prisma.EssayAuditUncheckedUpdateManyWithoutEssayNestedInput
  EssayLike?: Prisma.EssayLikeUncheckedUpdateManyWithoutEssayNestedInput
}

export type EssayCreateManyInput = {
  id?: number
  title: string
  banner?: string | null
  content: string
  authorId: string
  status?: $Enums.EssayStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EssayUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  banner?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumEssayStatusFieldUpdateOperationsInput | $Enums.EssayStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EssayUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  banner?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  authorId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumEssayStatusFieldUpdateOperationsInput | $Enums.EssayStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EssayListRelationFilter = {
  every?: Prisma.EssayWhereInput
  some?: Prisma.EssayWhereInput
  none?: Prisma.EssayWhereInput
}

export type EssayOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EssayCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  banner?: Prisma.SortOrder
  content?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EssayAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type EssayMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  banner?: Prisma.SortOrder
  content?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EssayMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  banner?: Prisma.SortOrder
  content?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EssaySumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type EssayScalarRelationFilter = {
  is?: Prisma.EssayWhereInput
  isNot?: Prisma.EssayWhereInput
}

export type EssayCreateNestedManyWithoutAuthorInput = {
  create?: Prisma.XOR<Prisma.EssayCreateWithoutAuthorInput, Prisma.EssayUncheckedCreateWithoutAuthorInput> | Prisma.EssayCreateWithoutAuthorInput[] | Prisma.EssayUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.EssayCreateOrConnectWithoutAuthorInput | Prisma.EssayCreateOrConnectWithoutAuthorInput[]
  createMany?: Prisma.EssayCreateManyAuthorInputEnvelope
  connect?: Prisma.EssayWhereUniqueInput | Prisma.EssayWhereUniqueInput[]
}

export type EssayUncheckedCreateNestedManyWithoutAuthorInput = {
  create?: Prisma.XOR<Prisma.EssayCreateWithoutAuthorInput, Prisma.EssayUncheckedCreateWithoutAuthorInput> | Prisma.EssayCreateWithoutAuthorInput[] | Prisma.EssayUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.EssayCreateOrConnectWithoutAuthorInput | Prisma.EssayCreateOrConnectWithoutAuthorInput[]
  createMany?: Prisma.EssayCreateManyAuthorInputEnvelope
  connect?: Prisma.EssayWhereUniqueInput | Prisma.EssayWhereUniqueInput[]
}

export type EssayUpdateManyWithoutAuthorNestedInput = {
  create?: Prisma.XOR<Prisma.EssayCreateWithoutAuthorInput, Prisma.EssayUncheckedCreateWithoutAuthorInput> | Prisma.EssayCreateWithoutAuthorInput[] | Prisma.EssayUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.EssayCreateOrConnectWithoutAuthorInput | Prisma.EssayCreateOrConnectWithoutAuthorInput[]
  upsert?: Prisma.EssayUpsertWithWhereUniqueWithoutAuthorInput | Prisma.EssayUpsertWithWhereUniqueWithoutAuthorInput[]
  createMany?: Prisma.EssayCreateManyAuthorInputEnvelope
  set?: Prisma.EssayWhereUniqueInput | Prisma.EssayWhereUniqueInput[]
  disconnect?: Prisma.EssayWhereUniqueInput | Prisma.EssayWhereUniqueInput[]
  delete?: Prisma.EssayWhereUniqueInput | Prisma.EssayWhereUniqueInput[]
  connect?: Prisma.EssayWhereUniqueInput | Prisma.EssayWhereUniqueInput[]
  update?: Prisma.EssayUpdateWithWhereUniqueWithoutAuthorInput | Prisma.EssayUpdateWithWhereUniqueWithoutAuthorInput[]
  updateMany?: Prisma.EssayUpdateManyWithWhereWithoutAuthorInput | Prisma.EssayUpdateManyWithWhereWithoutAuthorInput[]
  deleteMany?: Prisma.EssayScalarWhereInput | Prisma.EssayScalarWhereInput[]
}

export type EssayUncheckedUpdateManyWithoutAuthorNestedInput = {
  create?: Prisma.XOR<Prisma.EssayCreateWithoutAuthorInput, Prisma.EssayUncheckedCreateWithoutAuthorInput> | Prisma.EssayCreateWithoutAuthorInput[] | Prisma.EssayUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.EssayCreateOrConnectWithoutAuthorInput | Prisma.EssayCreateOrConnectWithoutAuthorInput[]
  upsert?: Prisma.EssayUpsertWithWhereUniqueWithoutAuthorInput | Prisma.EssayUpsertWithWhereUniqueWithoutAuthorInput[]
  createMany?: Prisma.EssayCreateManyAuthorInputEnvelope
  set?: Prisma.EssayWhereUniqueInput | Prisma.EssayWhereUniqueInput[]
  disconnect?: Prisma.EssayWhereUniqueInput | Prisma.EssayWhereUniqueInput[]
  delete?: Prisma.EssayWhereUniqueInput | Prisma.EssayWhereUniqueInput[]
  connect?: Prisma.EssayWhereUniqueInput | Prisma.EssayWhereUniqueInput[]
  update?: Prisma.EssayUpdateWithWhereUniqueWithoutAuthorInput | Prisma.EssayUpdateWithWhereUniqueWithoutAuthorInput[]
  updateMany?: Prisma.EssayUpdateManyWithWhereWithoutAuthorInput | Prisma.EssayUpdateManyWithWhereWithoutAuthorInput[]
  deleteMany?: Prisma.EssayScalarWhereInput | Prisma.EssayScalarWhereInput[]
}

export type EnumEssayStatusFieldUpdateOperationsInput = {
  set?: $Enums.EssayStatus
}

export type EssayCreateNestedOneWithoutAuditInput = {
  create?: Prisma.XOR<Prisma.EssayCreateWithoutAuditInput, Prisma.EssayUncheckedCreateWithoutAuditInput>
  connectOrCreate?: Prisma.EssayCreateOrConnectWithoutAuditInput
  connect?: Prisma.EssayWhereUniqueInput
}

export type EssayUpdateOneRequiredWithoutAuditNestedInput = {
  create?: Prisma.XOR<Prisma.EssayCreateWithoutAuditInput, Prisma.EssayUncheckedCreateWithoutAuditInput>
  connectOrCreate?: Prisma.EssayCreateOrConnectWithoutAuditInput
  upsert?: Prisma.EssayUpsertWithoutAuditInput
  connect?: Prisma.EssayWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EssayUpdateToOneWithWhereWithoutAuditInput, Prisma.EssayUpdateWithoutAuditInput>, Prisma.EssayUncheckedUpdateWithoutAuditInput>
}

export type EssayCreateNestedOneWithoutEssayLikeInput = {
  create?: Prisma.XOR<Prisma.EssayCreateWithoutEssayLikeInput, Prisma.EssayUncheckedCreateWithoutEssayLikeInput>
  connectOrCreate?: Prisma.EssayCreateOrConnectWithoutEssayLikeInput
  connect?: Prisma.EssayWhereUniqueInput
}

export type EssayUpdateOneRequiredWithoutEssayLikeNestedInput = {
  create?: Prisma.XOR<Prisma.EssayCreateWithoutEssayLikeInput, Prisma.EssayUncheckedCreateWithoutEssayLikeInput>
  connectOrCreate?: Prisma.EssayCreateOrConnectWithoutEssayLikeInput
  upsert?: Prisma.EssayUpsertWithoutEssayLikeInput
  connect?: Prisma.EssayWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EssayUpdateToOneWithWhereWithoutEssayLikeInput, Prisma.EssayUpdateWithoutEssayLikeInput>, Prisma.EssayUncheckedUpdateWithoutEssayLikeInput>
}

export type EssayCreateWithoutAuthorInput = {
  title: string
  banner?: string | null
  content: string
  status?: $Enums.EssayStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  audit?: Prisma.EssayAuditCreateNestedManyWithoutEssayInput
  EssayLike?: Prisma.EssayLikeCreateNestedManyWithoutEssayInput
}

export type EssayUncheckedCreateWithoutAuthorInput = {
  id?: number
  title: string
  banner?: string | null
  content: string
  status?: $Enums.EssayStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  audit?: Prisma.EssayAuditUncheckedCreateNestedManyWithoutEssayInput
  EssayLike?: Prisma.EssayLikeUncheckedCreateNestedManyWithoutEssayInput
}

export type EssayCreateOrConnectWithoutAuthorInput = {
  where: Prisma.EssayWhereUniqueInput
  create: Prisma.XOR<Prisma.EssayCreateWithoutAuthorInput, Prisma.EssayUncheckedCreateWithoutAuthorInput>
}

export type EssayCreateManyAuthorInputEnvelope = {
  data: Prisma.EssayCreateManyAuthorInput | Prisma.EssayCreateManyAuthorInput[]
}

export type EssayUpsertWithWhereUniqueWithoutAuthorInput = {
  where: Prisma.EssayWhereUniqueInput
  update: Prisma.XOR<Prisma.EssayUpdateWithoutAuthorInput, Prisma.EssayUncheckedUpdateWithoutAuthorInput>
  create: Prisma.XOR<Prisma.EssayCreateWithoutAuthorInput, Prisma.EssayUncheckedCreateWithoutAuthorInput>
}

export type EssayUpdateWithWhereUniqueWithoutAuthorInput = {
  where: Prisma.EssayWhereUniqueInput
  data: Prisma.XOR<Prisma.EssayUpdateWithoutAuthorInput, Prisma.EssayUncheckedUpdateWithoutAuthorInput>
}

export type EssayUpdateManyWithWhereWithoutAuthorInput = {
  where: Prisma.EssayScalarWhereInput
  data: Prisma.XOR<Prisma.EssayUpdateManyMutationInput, Prisma.EssayUncheckedUpdateManyWithoutAuthorInput>
}

export type EssayScalarWhereInput = {
  AND?: Prisma.EssayScalarWhereInput | Prisma.EssayScalarWhereInput[]
  OR?: Prisma.EssayScalarWhereInput[]
  NOT?: Prisma.EssayScalarWhereInput | Prisma.EssayScalarWhereInput[]
  id?: Prisma.IntFilter<"Essay"> | number
  title?: Prisma.StringFilter<"Essay"> | string
  banner?: Prisma.StringNullableFilter<"Essay"> | string | null
  content?: Prisma.StringFilter<"Essay"> | string
  authorId?: Prisma.StringFilter<"Essay"> | string
  status?: Prisma.EnumEssayStatusFilter<"Essay"> | $Enums.EssayStatus
  createdAt?: Prisma.DateTimeFilter<"Essay"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Essay"> | Date | string
}

export type EssayCreateWithoutAuditInput = {
  title: string
  banner?: string | null
  content: string
  status?: $Enums.EssayStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  author: Prisma.UserCreateNestedOneWithoutEssayInput
  EssayLike?: Prisma.EssayLikeCreateNestedManyWithoutEssayInput
}

export type EssayUncheckedCreateWithoutAuditInput = {
  id?: number
  title: string
  banner?: string | null
  content: string
  authorId: string
  status?: $Enums.EssayStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  EssayLike?: Prisma.EssayLikeUncheckedCreateNestedManyWithoutEssayInput
}

export type EssayCreateOrConnectWithoutAuditInput = {
  where: Prisma.EssayWhereUniqueInput
  create: Prisma.XOR<Prisma.EssayCreateWithoutAuditInput, Prisma.EssayUncheckedCreateWithoutAuditInput>
}

export type EssayUpsertWithoutAuditInput = {
  update: Prisma.XOR<Prisma.EssayUpdateWithoutAuditInput, Prisma.EssayUncheckedUpdateWithoutAuditInput>
  create: Prisma.XOR<Prisma.EssayCreateWithoutAuditInput, Prisma.EssayUncheckedCreateWithoutAuditInput>
  where?: Prisma.EssayWhereInput
}

export type EssayUpdateToOneWithWhereWithoutAuditInput = {
  where?: Prisma.EssayWhereInput
  data: Prisma.XOR<Prisma.EssayUpdateWithoutAuditInput, Prisma.EssayUncheckedUpdateWithoutAuditInput>
}

export type EssayUpdateWithoutAuditInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  banner?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumEssayStatusFieldUpdateOperationsInput | $Enums.EssayStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  author?: Prisma.UserUpdateOneRequiredWithoutEssayNestedInput
  EssayLike?: Prisma.EssayLikeUpdateManyWithoutEssayNestedInput
}

export type EssayUncheckedUpdateWithoutAuditInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  banner?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  authorId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumEssayStatusFieldUpdateOperationsInput | $Enums.EssayStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  EssayLike?: Prisma.EssayLikeUncheckedUpdateManyWithoutEssayNestedInput
}

export type EssayCreateWithoutEssayLikeInput = {
  title: string
  banner?: string | null
  content: string
  status?: $Enums.EssayStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  author: Prisma.UserCreateNestedOneWithoutEssayInput
  audit?: Prisma.EssayAuditCreateNestedManyWithoutEssayInput
}

export type EssayUncheckedCreateWithoutEssayLikeInput = {
  id?: number
  title: string
  banner?: string | null
  content: string
  authorId: string
  status?: $Enums.EssayStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  audit?: Prisma.EssayAuditUncheckedCreateNestedManyWithoutEssayInput
}

export type EssayCreateOrConnectWithoutEssayLikeInput = {
  where: Prisma.EssayWhereUniqueInput
  create: Prisma.XOR<Prisma.EssayCreateWithoutEssayLikeInput, Prisma.EssayUncheckedCreateWithoutEssayLikeInput>
}

export type EssayUpsertWithoutEssayLikeInput = {
  update: Prisma.XOR<Prisma.EssayUpdateWithoutEssayLikeInput, Prisma.EssayUncheckedUpdateWithoutEssayLikeInput>
  create: Prisma.XOR<Prisma.EssayCreateWithoutEssayLikeInput, Prisma.EssayUncheckedCreateWithoutEssayLikeInput>
  where?: Prisma.EssayWhereInput
}

export type EssayUpdateToOneWithWhereWithoutEssayLikeInput = {
  where?: Prisma.EssayWhereInput
  data: Prisma.XOR<Prisma.EssayUpdateWithoutEssayLikeInput, Prisma.EssayUncheckedUpdateWithoutEssayLikeInput>
}

export type EssayUpdateWithoutEssayLikeInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  banner?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumEssayStatusFieldUpdateOperationsInput | $Enums.EssayStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  author?: Prisma.UserUpdateOneRequiredWithoutEssayNestedInput
  audit?: Prisma.EssayAuditUpdateManyWithoutEssayNestedInput
}

export type EssayUncheckedUpdateWithoutEssayLikeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  banner?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  authorId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumEssayStatusFieldUpdateOperationsInput | $Enums.EssayStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  audit?: Prisma.EssayAuditUncheckedUpdateManyWithoutEssayNestedInput
}

export type EssayCreateManyAuthorInput = {
  id?: number
  title: string
  banner?: string | null
  content: string
  status?: $Enums.EssayStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EssayUpdateWithoutAuthorInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  banner?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumEssayStatusFieldUpdateOperationsInput | $Enums.EssayStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  audit?: Prisma.EssayAuditUpdateManyWithoutEssayNestedInput
  EssayLike?: Prisma.EssayLikeUpdateManyWithoutEssayNestedInput
}

export type EssayUncheckedUpdateWithoutAuthorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  banner?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumEssayStatusFieldUpdateOperationsInput | $Enums.EssayStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  audit?: Prisma.EssayAuditUncheckedUpdateManyWithoutEssayNestedInput
  EssayLike?: Prisma.EssayLikeUncheckedUpdateManyWithoutEssayNestedInput
}

export type EssayUncheckedUpdateManyWithoutAuthorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  banner?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumEssayStatusFieldUpdateOperationsInput | $Enums.EssayStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type EssayCountOutputType
 */

export type EssayCountOutputType = {
  audit: number
  EssayLike: number
}

export type EssayCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  audit?: boolean | EssayCountOutputTypeCountAuditArgs
  EssayLike?: boolean | EssayCountOutputTypeCountEssayLikeArgs
}

/**
 * EssayCountOutputType without action
 */
export type EssayCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayCountOutputType
   */
  select?: Prisma.EssayCountOutputTypeSelect<ExtArgs> | null
}

/**
 * EssayCountOutputType without action
 */
export type EssayCountOutputTypeCountAuditArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EssayAuditWhereInput
}

/**
 * EssayCountOutputType without action
 */
export type EssayCountOutputTypeCountEssayLikeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EssayLikeWhereInput
}


export type EssaySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  banner?: boolean
  content?: boolean
  authorId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  author?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  audit?: boolean | Prisma.Essay$auditArgs<ExtArgs>
  EssayLike?: boolean | Prisma.Essay$EssayLikeArgs<ExtArgs>
  _count?: boolean | Prisma.EssayCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["essay"]>

export type EssaySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  banner?: boolean
  content?: boolean
  authorId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  author?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["essay"]>

export type EssaySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  banner?: boolean
  content?: boolean
  authorId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  author?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["essay"]>

export type EssaySelectScalar = {
  id?: boolean
  title?: boolean
  banner?: boolean
  content?: boolean
  authorId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type EssayOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "banner" | "content" | "authorId" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["essay"]>
export type EssayInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  author?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  audit?: boolean | Prisma.Essay$auditArgs<ExtArgs>
  EssayLike?: boolean | Prisma.Essay$EssayLikeArgs<ExtArgs>
  _count?: boolean | Prisma.EssayCountOutputTypeDefaultArgs<ExtArgs>
}
export type EssayIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  author?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type EssayIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  author?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $EssayPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Essay"
  objects: {
    author: Prisma.$UserPayload<ExtArgs>
    audit: Prisma.$EssayAuditPayload<ExtArgs>[]
    EssayLike: Prisma.$EssayLikePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    title: string
    banner: string | null
    content: string
    authorId: string
    status: $Enums.EssayStatus
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["essay"]>
  composites: {}
}

export type EssayGetPayload<S extends boolean | null | undefined | EssayDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EssayPayload, S>

export type EssayCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EssayFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EssayCountAggregateInputType | true
  }

export interface EssayDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Essay'], meta: { name: 'Essay' } }
  /**
   * Find zero or one Essay that matches the filter.
   * @param {EssayFindUniqueArgs} args - Arguments to find a Essay
   * @example
   * // Get one Essay
   * const essay = await prisma.essay.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EssayFindUniqueArgs>(args: Prisma.SelectSubset<T, EssayFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EssayClient<runtime.Types.Result.GetResult<Prisma.$EssayPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Essay that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EssayFindUniqueOrThrowArgs} args - Arguments to find a Essay
   * @example
   * // Get one Essay
   * const essay = await prisma.essay.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EssayFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EssayFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EssayClient<runtime.Types.Result.GetResult<Prisma.$EssayPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Essay that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayFindFirstArgs} args - Arguments to find a Essay
   * @example
   * // Get one Essay
   * const essay = await prisma.essay.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EssayFindFirstArgs>(args?: Prisma.SelectSubset<T, EssayFindFirstArgs<ExtArgs>>): Prisma.Prisma__EssayClient<runtime.Types.Result.GetResult<Prisma.$EssayPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Essay that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayFindFirstOrThrowArgs} args - Arguments to find a Essay
   * @example
   * // Get one Essay
   * const essay = await prisma.essay.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EssayFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EssayFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EssayClient<runtime.Types.Result.GetResult<Prisma.$EssayPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Essays that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Essays
   * const essays = await prisma.essay.findMany()
   * 
   * // Get first 10 Essays
   * const essays = await prisma.essay.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const essayWithIdOnly = await prisma.essay.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EssayFindManyArgs>(args?: Prisma.SelectSubset<T, EssayFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EssayPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Essay.
   * @param {EssayCreateArgs} args - Arguments to create a Essay.
   * @example
   * // Create one Essay
   * const Essay = await prisma.essay.create({
   *   data: {
   *     // ... data to create a Essay
   *   }
   * })
   * 
   */
  create<T extends EssayCreateArgs>(args: Prisma.SelectSubset<T, EssayCreateArgs<ExtArgs>>): Prisma.Prisma__EssayClient<runtime.Types.Result.GetResult<Prisma.$EssayPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Essays.
   * @param {EssayCreateManyArgs} args - Arguments to create many Essays.
   * @example
   * // Create many Essays
   * const essay = await prisma.essay.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EssayCreateManyArgs>(args?: Prisma.SelectSubset<T, EssayCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Essays and returns the data saved in the database.
   * @param {EssayCreateManyAndReturnArgs} args - Arguments to create many Essays.
   * @example
   * // Create many Essays
   * const essay = await prisma.essay.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Essays and only return the `id`
   * const essayWithIdOnly = await prisma.essay.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EssayCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EssayCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EssayPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Essay.
   * @param {EssayDeleteArgs} args - Arguments to delete one Essay.
   * @example
   * // Delete one Essay
   * const Essay = await prisma.essay.delete({
   *   where: {
   *     // ... filter to delete one Essay
   *   }
   * })
   * 
   */
  delete<T extends EssayDeleteArgs>(args: Prisma.SelectSubset<T, EssayDeleteArgs<ExtArgs>>): Prisma.Prisma__EssayClient<runtime.Types.Result.GetResult<Prisma.$EssayPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Essay.
   * @param {EssayUpdateArgs} args - Arguments to update one Essay.
   * @example
   * // Update one Essay
   * const essay = await prisma.essay.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EssayUpdateArgs>(args: Prisma.SelectSubset<T, EssayUpdateArgs<ExtArgs>>): Prisma.Prisma__EssayClient<runtime.Types.Result.GetResult<Prisma.$EssayPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Essays.
   * @param {EssayDeleteManyArgs} args - Arguments to filter Essays to delete.
   * @example
   * // Delete a few Essays
   * const { count } = await prisma.essay.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EssayDeleteManyArgs>(args?: Prisma.SelectSubset<T, EssayDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Essays.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Essays
   * const essay = await prisma.essay.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EssayUpdateManyArgs>(args: Prisma.SelectSubset<T, EssayUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Essays and returns the data updated in the database.
   * @param {EssayUpdateManyAndReturnArgs} args - Arguments to update many Essays.
   * @example
   * // Update many Essays
   * const essay = await prisma.essay.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Essays and only return the `id`
   * const essayWithIdOnly = await prisma.essay.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EssayUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EssayUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EssayPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Essay.
   * @param {EssayUpsertArgs} args - Arguments to update or create a Essay.
   * @example
   * // Update or create a Essay
   * const essay = await prisma.essay.upsert({
   *   create: {
   *     // ... data to create a Essay
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Essay we want to update
   *   }
   * })
   */
  upsert<T extends EssayUpsertArgs>(args: Prisma.SelectSubset<T, EssayUpsertArgs<ExtArgs>>): Prisma.Prisma__EssayClient<runtime.Types.Result.GetResult<Prisma.$EssayPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Essays.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayCountArgs} args - Arguments to filter Essays to count.
   * @example
   * // Count the number of Essays
   * const count = await prisma.essay.count({
   *   where: {
   *     // ... the filter for the Essays we want to count
   *   }
   * })
  **/
  count<T extends EssayCountArgs>(
    args?: Prisma.Subset<T, EssayCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EssayCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Essay.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EssayAggregateArgs>(args: Prisma.Subset<T, EssayAggregateArgs>): Prisma.PrismaPromise<GetEssayAggregateType<T>>

  /**
   * Group by Essay.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EssayGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EssayGroupByArgs['orderBy'] }
      : { orderBy?: EssayGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EssayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEssayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Essay model
 */
readonly fields: EssayFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Essay.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EssayClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  author<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  audit<T extends Prisma.Essay$auditArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Essay$auditArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EssayAuditPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  EssayLike<T extends Prisma.Essay$EssayLikeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Essay$EssayLikeArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EssayLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Essay model
 */
export interface EssayFieldRefs {
  readonly id: Prisma.FieldRef<"Essay", 'Int'>
  readonly title: Prisma.FieldRef<"Essay", 'String'>
  readonly banner: Prisma.FieldRef<"Essay", 'String'>
  readonly content: Prisma.FieldRef<"Essay", 'String'>
  readonly authorId: Prisma.FieldRef<"Essay", 'String'>
  readonly status: Prisma.FieldRef<"Essay", 'EssayStatus'>
  readonly createdAt: Prisma.FieldRef<"Essay", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Essay", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Essay findUnique
 */
export type EssayFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Essay
   */
  select?: Prisma.EssaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Essay
   */
  omit?: Prisma.EssayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayInclude<ExtArgs> | null
  /**
   * Filter, which Essay to fetch.
   */
  where: Prisma.EssayWhereUniqueInput
}

/**
 * Essay findUniqueOrThrow
 */
export type EssayFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Essay
   */
  select?: Prisma.EssaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Essay
   */
  omit?: Prisma.EssayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayInclude<ExtArgs> | null
  /**
   * Filter, which Essay to fetch.
   */
  where: Prisma.EssayWhereUniqueInput
}

/**
 * Essay findFirst
 */
export type EssayFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Essay
   */
  select?: Prisma.EssaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Essay
   */
  omit?: Prisma.EssayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayInclude<ExtArgs> | null
  /**
   * Filter, which Essay to fetch.
   */
  where?: Prisma.EssayWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Essays to fetch.
   */
  orderBy?: Prisma.EssayOrderByWithRelationInput | Prisma.EssayOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Essays.
   */
  cursor?: Prisma.EssayWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Essays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Essays.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Essays.
   */
  distinct?: Prisma.EssayScalarFieldEnum | Prisma.EssayScalarFieldEnum[]
}

/**
 * Essay findFirstOrThrow
 */
export type EssayFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Essay
   */
  select?: Prisma.EssaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Essay
   */
  omit?: Prisma.EssayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayInclude<ExtArgs> | null
  /**
   * Filter, which Essay to fetch.
   */
  where?: Prisma.EssayWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Essays to fetch.
   */
  orderBy?: Prisma.EssayOrderByWithRelationInput | Prisma.EssayOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Essays.
   */
  cursor?: Prisma.EssayWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Essays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Essays.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Essays.
   */
  distinct?: Prisma.EssayScalarFieldEnum | Prisma.EssayScalarFieldEnum[]
}

/**
 * Essay findMany
 */
export type EssayFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Essay
   */
  select?: Prisma.EssaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Essay
   */
  omit?: Prisma.EssayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayInclude<ExtArgs> | null
  /**
   * Filter, which Essays to fetch.
   */
  where?: Prisma.EssayWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Essays to fetch.
   */
  orderBy?: Prisma.EssayOrderByWithRelationInput | Prisma.EssayOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Essays.
   */
  cursor?: Prisma.EssayWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Essays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Essays.
   */
  skip?: number
  distinct?: Prisma.EssayScalarFieldEnum | Prisma.EssayScalarFieldEnum[]
}

/**
 * Essay create
 */
export type EssayCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Essay
   */
  select?: Prisma.EssaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Essay
   */
  omit?: Prisma.EssayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayInclude<ExtArgs> | null
  /**
   * The data needed to create a Essay.
   */
  data: Prisma.XOR<Prisma.EssayCreateInput, Prisma.EssayUncheckedCreateInput>
}

/**
 * Essay createMany
 */
export type EssayCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Essays.
   */
  data: Prisma.EssayCreateManyInput | Prisma.EssayCreateManyInput[]
}

/**
 * Essay createManyAndReturn
 */
export type EssayCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Essay
   */
  select?: Prisma.EssaySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Essay
   */
  omit?: Prisma.EssayOmit<ExtArgs> | null
  /**
   * The data used to create many Essays.
   */
  data: Prisma.EssayCreateManyInput | Prisma.EssayCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Essay update
 */
export type EssayUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Essay
   */
  select?: Prisma.EssaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Essay
   */
  omit?: Prisma.EssayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayInclude<ExtArgs> | null
  /**
   * The data needed to update a Essay.
   */
  data: Prisma.XOR<Prisma.EssayUpdateInput, Prisma.EssayUncheckedUpdateInput>
  /**
   * Choose, which Essay to update.
   */
  where: Prisma.EssayWhereUniqueInput
}

/**
 * Essay updateMany
 */
export type EssayUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Essays.
   */
  data: Prisma.XOR<Prisma.EssayUpdateManyMutationInput, Prisma.EssayUncheckedUpdateManyInput>
  /**
   * Filter which Essays to update
   */
  where?: Prisma.EssayWhereInput
  /**
   * Limit how many Essays to update.
   */
  limit?: number
}

/**
 * Essay updateManyAndReturn
 */
export type EssayUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Essay
   */
  select?: Prisma.EssaySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Essay
   */
  omit?: Prisma.EssayOmit<ExtArgs> | null
  /**
   * The data used to update Essays.
   */
  data: Prisma.XOR<Prisma.EssayUpdateManyMutationInput, Prisma.EssayUncheckedUpdateManyInput>
  /**
   * Filter which Essays to update
   */
  where?: Prisma.EssayWhereInput
  /**
   * Limit how many Essays to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Essay upsert
 */
export type EssayUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Essay
   */
  select?: Prisma.EssaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Essay
   */
  omit?: Prisma.EssayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayInclude<ExtArgs> | null
  /**
   * The filter to search for the Essay to update in case it exists.
   */
  where: Prisma.EssayWhereUniqueInput
  /**
   * In case the Essay found by the `where` argument doesn't exist, create a new Essay with this data.
   */
  create: Prisma.XOR<Prisma.EssayCreateInput, Prisma.EssayUncheckedCreateInput>
  /**
   * In case the Essay was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EssayUpdateInput, Prisma.EssayUncheckedUpdateInput>
}

/**
 * Essay delete
 */
export type EssayDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Essay
   */
  select?: Prisma.EssaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Essay
   */
  omit?: Prisma.EssayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayInclude<ExtArgs> | null
  /**
   * Filter which Essay to delete.
   */
  where: Prisma.EssayWhereUniqueInput
}

/**
 * Essay deleteMany
 */
export type EssayDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Essays to delete
   */
  where?: Prisma.EssayWhereInput
  /**
   * Limit how many Essays to delete.
   */
  limit?: number
}

/**
 * Essay.audit
 */
export type Essay$auditArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayAudit
   */
  select?: Prisma.EssayAuditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayAudit
   */
  omit?: Prisma.EssayAuditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayAuditInclude<ExtArgs> | null
  where?: Prisma.EssayAuditWhereInput
  orderBy?: Prisma.EssayAuditOrderByWithRelationInput | Prisma.EssayAuditOrderByWithRelationInput[]
  cursor?: Prisma.EssayAuditWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EssayAuditScalarFieldEnum | Prisma.EssayAuditScalarFieldEnum[]
}

/**
 * Essay.EssayLike
 */
export type Essay$EssayLikeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayLike
   */
  select?: Prisma.EssayLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayLike
   */
  omit?: Prisma.EssayLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayLikeInclude<ExtArgs> | null
  where?: Prisma.EssayLikeWhereInput
  orderBy?: Prisma.EssayLikeOrderByWithRelationInput | Prisma.EssayLikeOrderByWithRelationInput[]
  cursor?: Prisma.EssayLikeWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EssayLikeScalarFieldEnum | Prisma.EssayLikeScalarFieldEnum[]
}

/**
 * Essay without action
 */
export type EssayDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Essay
   */
  select?: Prisma.EssaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Essay
   */
  omit?: Prisma.EssayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayInclude<ExtArgs> | null
}
