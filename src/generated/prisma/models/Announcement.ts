
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Announcement` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Announcement
 * 
 */
export type AnnouncementModel = runtime.Types.Result.DefaultSelection<Prisma.$AnnouncementPayload>

export type AggregateAnnouncement = {
  _count: AnnouncementCountAggregateOutputType | null
  _avg: AnnouncementAvgAggregateOutputType | null
  _sum: AnnouncementSumAggregateOutputType | null
  _min: AnnouncementMinAggregateOutputType | null
  _max: AnnouncementMaxAggregateOutputType | null
}

export type AnnouncementAvgAggregateOutputType = {
  id: number | null
}

export type AnnouncementSumAggregateOutputType = {
  id: number | null
}

export type AnnouncementMinAggregateOutputType = {
  id: number | null
  content: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AnnouncementMaxAggregateOutputType = {
  id: number | null
  content: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AnnouncementCountAggregateOutputType = {
  id: number
  content: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type AnnouncementAvgAggregateInputType = {
  id?: true
}

export type AnnouncementSumAggregateInputType = {
  id?: true
}

export type AnnouncementMinAggregateInputType = {
  id?: true
  content?: true
  createdAt?: true
  updatedAt?: true
}

export type AnnouncementMaxAggregateInputType = {
  id?: true
  content?: true
  createdAt?: true
  updatedAt?: true
}

export type AnnouncementCountAggregateInputType = {
  id?: true
  content?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type AnnouncementAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Announcement to aggregate.
   */
  where?: Prisma.AnnouncementWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Announcements to fetch.
   */
  orderBy?: Prisma.AnnouncementOrderByWithRelationInput | Prisma.AnnouncementOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AnnouncementWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Announcements from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Announcements.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Announcements
  **/
  _count?: true | AnnouncementCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AnnouncementAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AnnouncementSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AnnouncementMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AnnouncementMaxAggregateInputType
}

export type GetAnnouncementAggregateType<T extends AnnouncementAggregateArgs> = {
      [P in keyof T & keyof AggregateAnnouncement]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAnnouncement[P]>
    : Prisma.GetScalarType<T[P], AggregateAnnouncement[P]>
}




export type AnnouncementGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AnnouncementWhereInput
  orderBy?: Prisma.AnnouncementOrderByWithAggregationInput | Prisma.AnnouncementOrderByWithAggregationInput[]
  by: Prisma.AnnouncementScalarFieldEnum[] | Prisma.AnnouncementScalarFieldEnum
  having?: Prisma.AnnouncementScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AnnouncementCountAggregateInputType | true
  _avg?: AnnouncementAvgAggregateInputType
  _sum?: AnnouncementSumAggregateInputType
  _min?: AnnouncementMinAggregateInputType
  _max?: AnnouncementMaxAggregateInputType
}

export type AnnouncementGroupByOutputType = {
  id: number
  content: string
  createdAt: Date
  updatedAt: Date
  _count: AnnouncementCountAggregateOutputType | null
  _avg: AnnouncementAvgAggregateOutputType | null
  _sum: AnnouncementSumAggregateOutputType | null
  _min: AnnouncementMinAggregateOutputType | null
  _max: AnnouncementMaxAggregateOutputType | null
}

type GetAnnouncementGroupByPayload<T extends AnnouncementGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AnnouncementGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AnnouncementGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AnnouncementGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AnnouncementGroupByOutputType[P]>
      }
    >
  > 



export type AnnouncementWhereInput = {
  AND?: Prisma.AnnouncementWhereInput | Prisma.AnnouncementWhereInput[]
  OR?: Prisma.AnnouncementWhereInput[]
  NOT?: Prisma.AnnouncementWhereInput | Prisma.AnnouncementWhereInput[]
  id?: Prisma.IntFilter<"Announcement"> | number
  content?: Prisma.StringFilter<"Announcement"> | string
  createdAt?: Prisma.DateTimeFilter<"Announcement"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Announcement"> | Date | string
}

export type AnnouncementOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AnnouncementWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.AnnouncementWhereInput | Prisma.AnnouncementWhereInput[]
  OR?: Prisma.AnnouncementWhereInput[]
  NOT?: Prisma.AnnouncementWhereInput | Prisma.AnnouncementWhereInput[]
  content?: Prisma.StringFilter<"Announcement"> | string
  createdAt?: Prisma.DateTimeFilter<"Announcement"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Announcement"> | Date | string
}, "id">

export type AnnouncementOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.AnnouncementCountOrderByAggregateInput
  _avg?: Prisma.AnnouncementAvgOrderByAggregateInput
  _max?: Prisma.AnnouncementMaxOrderByAggregateInput
  _min?: Prisma.AnnouncementMinOrderByAggregateInput
  _sum?: Prisma.AnnouncementSumOrderByAggregateInput
}

export type AnnouncementScalarWhereWithAggregatesInput = {
  AND?: Prisma.AnnouncementScalarWhereWithAggregatesInput | Prisma.AnnouncementScalarWhereWithAggregatesInput[]
  OR?: Prisma.AnnouncementScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AnnouncementScalarWhereWithAggregatesInput | Prisma.AnnouncementScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Announcement"> | number
  content?: Prisma.StringWithAggregatesFilter<"Announcement"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Announcement"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Announcement"> | Date | string
}

export type AnnouncementCreateInput = {
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AnnouncementUncheckedCreateInput = {
  id?: number
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AnnouncementUpdateInput = {
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AnnouncementUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AnnouncementCreateManyInput = {
  id?: number
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AnnouncementUpdateManyMutationInput = {
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AnnouncementUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AnnouncementCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AnnouncementAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type AnnouncementMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AnnouncementMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AnnouncementSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}



export type AnnouncementSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  content?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["announcement"]>

export type AnnouncementSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  content?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["announcement"]>

export type AnnouncementSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  content?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["announcement"]>

export type AnnouncementSelectScalar = {
  id?: boolean
  content?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type AnnouncementOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "content" | "createdAt" | "updatedAt", ExtArgs["result"]["announcement"]>

export type $AnnouncementPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Announcement"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    content: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["announcement"]>
  composites: {}
}

export type AnnouncementGetPayload<S extends boolean | null | undefined | AnnouncementDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AnnouncementPayload, S>

export type AnnouncementCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AnnouncementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AnnouncementCountAggregateInputType | true
  }

export interface AnnouncementDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Announcement'], meta: { name: 'Announcement' } }
  /**
   * Find zero or one Announcement that matches the filter.
   * @param {AnnouncementFindUniqueArgs} args - Arguments to find a Announcement
   * @example
   * // Get one Announcement
   * const announcement = await prisma.announcement.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AnnouncementFindUniqueArgs>(args: Prisma.SelectSubset<T, AnnouncementFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AnnouncementClient<runtime.Types.Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Announcement that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AnnouncementFindUniqueOrThrowArgs} args - Arguments to find a Announcement
   * @example
   * // Get one Announcement
   * const announcement = await prisma.announcement.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AnnouncementFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AnnouncementFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AnnouncementClient<runtime.Types.Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Announcement that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnnouncementFindFirstArgs} args - Arguments to find a Announcement
   * @example
   * // Get one Announcement
   * const announcement = await prisma.announcement.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AnnouncementFindFirstArgs>(args?: Prisma.SelectSubset<T, AnnouncementFindFirstArgs<ExtArgs>>): Prisma.Prisma__AnnouncementClient<runtime.Types.Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Announcement that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnnouncementFindFirstOrThrowArgs} args - Arguments to find a Announcement
   * @example
   * // Get one Announcement
   * const announcement = await prisma.announcement.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AnnouncementFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AnnouncementFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AnnouncementClient<runtime.Types.Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Announcements that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnnouncementFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Announcements
   * const announcements = await prisma.announcement.findMany()
   * 
   * // Get first 10 Announcements
   * const announcements = await prisma.announcement.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const announcementWithIdOnly = await prisma.announcement.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AnnouncementFindManyArgs>(args?: Prisma.SelectSubset<T, AnnouncementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Announcement.
   * @param {AnnouncementCreateArgs} args - Arguments to create a Announcement.
   * @example
   * // Create one Announcement
   * const Announcement = await prisma.announcement.create({
   *   data: {
   *     // ... data to create a Announcement
   *   }
   * })
   * 
   */
  create<T extends AnnouncementCreateArgs>(args: Prisma.SelectSubset<T, AnnouncementCreateArgs<ExtArgs>>): Prisma.Prisma__AnnouncementClient<runtime.Types.Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Announcements.
   * @param {AnnouncementCreateManyArgs} args - Arguments to create many Announcements.
   * @example
   * // Create many Announcements
   * const announcement = await prisma.announcement.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AnnouncementCreateManyArgs>(args?: Prisma.SelectSubset<T, AnnouncementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Announcements and returns the data saved in the database.
   * @param {AnnouncementCreateManyAndReturnArgs} args - Arguments to create many Announcements.
   * @example
   * // Create many Announcements
   * const announcement = await prisma.announcement.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Announcements and only return the `id`
   * const announcementWithIdOnly = await prisma.announcement.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AnnouncementCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AnnouncementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Announcement.
   * @param {AnnouncementDeleteArgs} args - Arguments to delete one Announcement.
   * @example
   * // Delete one Announcement
   * const Announcement = await prisma.announcement.delete({
   *   where: {
   *     // ... filter to delete one Announcement
   *   }
   * })
   * 
   */
  delete<T extends AnnouncementDeleteArgs>(args: Prisma.SelectSubset<T, AnnouncementDeleteArgs<ExtArgs>>): Prisma.Prisma__AnnouncementClient<runtime.Types.Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Announcement.
   * @param {AnnouncementUpdateArgs} args - Arguments to update one Announcement.
   * @example
   * // Update one Announcement
   * const announcement = await prisma.announcement.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AnnouncementUpdateArgs>(args: Prisma.SelectSubset<T, AnnouncementUpdateArgs<ExtArgs>>): Prisma.Prisma__AnnouncementClient<runtime.Types.Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Announcements.
   * @param {AnnouncementDeleteManyArgs} args - Arguments to filter Announcements to delete.
   * @example
   * // Delete a few Announcements
   * const { count } = await prisma.announcement.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AnnouncementDeleteManyArgs>(args?: Prisma.SelectSubset<T, AnnouncementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Announcements.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnnouncementUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Announcements
   * const announcement = await prisma.announcement.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AnnouncementUpdateManyArgs>(args: Prisma.SelectSubset<T, AnnouncementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Announcements and returns the data updated in the database.
   * @param {AnnouncementUpdateManyAndReturnArgs} args - Arguments to update many Announcements.
   * @example
   * // Update many Announcements
   * const announcement = await prisma.announcement.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Announcements and only return the `id`
   * const announcementWithIdOnly = await prisma.announcement.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AnnouncementUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AnnouncementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Announcement.
   * @param {AnnouncementUpsertArgs} args - Arguments to update or create a Announcement.
   * @example
   * // Update or create a Announcement
   * const announcement = await prisma.announcement.upsert({
   *   create: {
   *     // ... data to create a Announcement
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Announcement we want to update
   *   }
   * })
   */
  upsert<T extends AnnouncementUpsertArgs>(args: Prisma.SelectSubset<T, AnnouncementUpsertArgs<ExtArgs>>): Prisma.Prisma__AnnouncementClient<runtime.Types.Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Announcements.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnnouncementCountArgs} args - Arguments to filter Announcements to count.
   * @example
   * // Count the number of Announcements
   * const count = await prisma.announcement.count({
   *   where: {
   *     // ... the filter for the Announcements we want to count
   *   }
   * })
  **/
  count<T extends AnnouncementCountArgs>(
    args?: Prisma.Subset<T, AnnouncementCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AnnouncementCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Announcement.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnnouncementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AnnouncementAggregateArgs>(args: Prisma.Subset<T, AnnouncementAggregateArgs>): Prisma.PrismaPromise<GetAnnouncementAggregateType<T>>

  /**
   * Group by Announcement.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnnouncementGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AnnouncementGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AnnouncementGroupByArgs['orderBy'] }
      : { orderBy?: AnnouncementGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AnnouncementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnnouncementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Announcement model
 */
readonly fields: AnnouncementFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Announcement.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AnnouncementClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Announcement model
 */
export interface AnnouncementFieldRefs {
  readonly id: Prisma.FieldRef<"Announcement", 'Int'>
  readonly content: Prisma.FieldRef<"Announcement", 'String'>
  readonly createdAt: Prisma.FieldRef<"Announcement", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Announcement", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Announcement findUnique
 */
export type AnnouncementFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Announcement
   */
  select?: Prisma.AnnouncementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Announcement
   */
  omit?: Prisma.AnnouncementOmit<ExtArgs> | null
  /**
   * Filter, which Announcement to fetch.
   */
  where: Prisma.AnnouncementWhereUniqueInput
}

/**
 * Announcement findUniqueOrThrow
 */
export type AnnouncementFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Announcement
   */
  select?: Prisma.AnnouncementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Announcement
   */
  omit?: Prisma.AnnouncementOmit<ExtArgs> | null
  /**
   * Filter, which Announcement to fetch.
   */
  where: Prisma.AnnouncementWhereUniqueInput
}

/**
 * Announcement findFirst
 */
export type AnnouncementFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Announcement
   */
  select?: Prisma.AnnouncementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Announcement
   */
  omit?: Prisma.AnnouncementOmit<ExtArgs> | null
  /**
   * Filter, which Announcement to fetch.
   */
  where?: Prisma.AnnouncementWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Announcements to fetch.
   */
  orderBy?: Prisma.AnnouncementOrderByWithRelationInput | Prisma.AnnouncementOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Announcements.
   */
  cursor?: Prisma.AnnouncementWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Announcements from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Announcements.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Announcements.
   */
  distinct?: Prisma.AnnouncementScalarFieldEnum | Prisma.AnnouncementScalarFieldEnum[]
}

/**
 * Announcement findFirstOrThrow
 */
export type AnnouncementFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Announcement
   */
  select?: Prisma.AnnouncementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Announcement
   */
  omit?: Prisma.AnnouncementOmit<ExtArgs> | null
  /**
   * Filter, which Announcement to fetch.
   */
  where?: Prisma.AnnouncementWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Announcements to fetch.
   */
  orderBy?: Prisma.AnnouncementOrderByWithRelationInput | Prisma.AnnouncementOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Announcements.
   */
  cursor?: Prisma.AnnouncementWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Announcements from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Announcements.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Announcements.
   */
  distinct?: Prisma.AnnouncementScalarFieldEnum | Prisma.AnnouncementScalarFieldEnum[]
}

/**
 * Announcement findMany
 */
export type AnnouncementFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Announcement
   */
  select?: Prisma.AnnouncementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Announcement
   */
  omit?: Prisma.AnnouncementOmit<ExtArgs> | null
  /**
   * Filter, which Announcements to fetch.
   */
  where?: Prisma.AnnouncementWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Announcements to fetch.
   */
  orderBy?: Prisma.AnnouncementOrderByWithRelationInput | Prisma.AnnouncementOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Announcements.
   */
  cursor?: Prisma.AnnouncementWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Announcements from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Announcements.
   */
  skip?: number
  distinct?: Prisma.AnnouncementScalarFieldEnum | Prisma.AnnouncementScalarFieldEnum[]
}

/**
 * Announcement create
 */
export type AnnouncementCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Announcement
   */
  select?: Prisma.AnnouncementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Announcement
   */
  omit?: Prisma.AnnouncementOmit<ExtArgs> | null
  /**
   * The data needed to create a Announcement.
   */
  data: Prisma.XOR<Prisma.AnnouncementCreateInput, Prisma.AnnouncementUncheckedCreateInput>
}

/**
 * Announcement createMany
 */
export type AnnouncementCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Announcements.
   */
  data: Prisma.AnnouncementCreateManyInput | Prisma.AnnouncementCreateManyInput[]
}

/**
 * Announcement createManyAndReturn
 */
export type AnnouncementCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Announcement
   */
  select?: Prisma.AnnouncementSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Announcement
   */
  omit?: Prisma.AnnouncementOmit<ExtArgs> | null
  /**
   * The data used to create many Announcements.
   */
  data: Prisma.AnnouncementCreateManyInput | Prisma.AnnouncementCreateManyInput[]
}

/**
 * Announcement update
 */
export type AnnouncementUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Announcement
   */
  select?: Prisma.AnnouncementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Announcement
   */
  omit?: Prisma.AnnouncementOmit<ExtArgs> | null
  /**
   * The data needed to update a Announcement.
   */
  data: Prisma.XOR<Prisma.AnnouncementUpdateInput, Prisma.AnnouncementUncheckedUpdateInput>
  /**
   * Choose, which Announcement to update.
   */
  where: Prisma.AnnouncementWhereUniqueInput
}

/**
 * Announcement updateMany
 */
export type AnnouncementUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Announcements.
   */
  data: Prisma.XOR<Prisma.AnnouncementUpdateManyMutationInput, Prisma.AnnouncementUncheckedUpdateManyInput>
  /**
   * Filter which Announcements to update
   */
  where?: Prisma.AnnouncementWhereInput
  /**
   * Limit how many Announcements to update.
   */
  limit?: number
}

/**
 * Announcement updateManyAndReturn
 */
export type AnnouncementUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Announcement
   */
  select?: Prisma.AnnouncementSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Announcement
   */
  omit?: Prisma.AnnouncementOmit<ExtArgs> | null
  /**
   * The data used to update Announcements.
   */
  data: Prisma.XOR<Prisma.AnnouncementUpdateManyMutationInput, Prisma.AnnouncementUncheckedUpdateManyInput>
  /**
   * Filter which Announcements to update
   */
  where?: Prisma.AnnouncementWhereInput
  /**
   * Limit how many Announcements to update.
   */
  limit?: number
}

/**
 * Announcement upsert
 */
export type AnnouncementUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Announcement
   */
  select?: Prisma.AnnouncementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Announcement
   */
  omit?: Prisma.AnnouncementOmit<ExtArgs> | null
  /**
   * The filter to search for the Announcement to update in case it exists.
   */
  where: Prisma.AnnouncementWhereUniqueInput
  /**
   * In case the Announcement found by the `where` argument doesn't exist, create a new Announcement with this data.
   */
  create: Prisma.XOR<Prisma.AnnouncementCreateInput, Prisma.AnnouncementUncheckedCreateInput>
  /**
   * In case the Announcement was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AnnouncementUpdateInput, Prisma.AnnouncementUncheckedUpdateInput>
}

/**
 * Announcement delete
 */
export type AnnouncementDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Announcement
   */
  select?: Prisma.AnnouncementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Announcement
   */
  omit?: Prisma.AnnouncementOmit<ExtArgs> | null
  /**
   * Filter which Announcement to delete.
   */
  where: Prisma.AnnouncementWhereUniqueInput
}

/**
 * Announcement deleteMany
 */
export type AnnouncementDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Announcements to delete
   */
  where?: Prisma.AnnouncementWhereInput
  /**
   * Limit how many Announcements to delete.
   */
  limit?: number
}

/**
 * Announcement without action
 */
export type AnnouncementDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Announcement
   */
  select?: Prisma.AnnouncementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Announcement
   */
  omit?: Prisma.AnnouncementOmit<ExtArgs> | null
}
