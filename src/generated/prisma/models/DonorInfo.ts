
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `DonorInfo` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model DonorInfo
 * 
 */
export type DonorInfoModel = runtime.Types.Result.DefaultSelection<Prisma.$DonorInfoPayload>

export type AggregateDonorInfo = {
  _count: DonorInfoCountAggregateOutputType | null
  _avg: DonorInfoAvgAggregateOutputType | null
  _sum: DonorInfoSumAggregateOutputType | null
  _min: DonorInfoMinAggregateOutputType | null
  _max: DonorInfoMaxAggregateOutputType | null
}

export type DonorInfoAvgAggregateOutputType = {
  id: number | null
  donationAmount: number | null
}

export type DonorInfoSumAggregateOutputType = {
  id: number | null
  donationAmount: number | null
}

export type DonorInfoMinAggregateOutputType = {
  id: number | null
  name: string | null
  avatar: string | null
  description: string | null
  donationAmount: number | null
  donationDate: Date | null
  operatorId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DonorInfoMaxAggregateOutputType = {
  id: number | null
  name: string | null
  avatar: string | null
  description: string | null
  donationAmount: number | null
  donationDate: Date | null
  operatorId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DonorInfoCountAggregateOutputType = {
  id: number
  name: number
  avatar: number
  description: number
  donationAmount: number
  donationDate: number
  operatorId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type DonorInfoAvgAggregateInputType = {
  id?: true
  donationAmount?: true
}

export type DonorInfoSumAggregateInputType = {
  id?: true
  donationAmount?: true
}

export type DonorInfoMinAggregateInputType = {
  id?: true
  name?: true
  avatar?: true
  description?: true
  donationAmount?: true
  donationDate?: true
  operatorId?: true
  createdAt?: true
  updatedAt?: true
}

export type DonorInfoMaxAggregateInputType = {
  id?: true
  name?: true
  avatar?: true
  description?: true
  donationAmount?: true
  donationDate?: true
  operatorId?: true
  createdAt?: true
  updatedAt?: true
}

export type DonorInfoCountAggregateInputType = {
  id?: true
  name?: true
  avatar?: true
  description?: true
  donationAmount?: true
  donationDate?: true
  operatorId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type DonorInfoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DonorInfo to aggregate.
   */
  where?: Prisma.DonorInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DonorInfos to fetch.
   */
  orderBy?: Prisma.DonorInfoOrderByWithRelationInput | Prisma.DonorInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DonorInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DonorInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DonorInfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DonorInfos
  **/
  _count?: true | DonorInfoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DonorInfoAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DonorInfoSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DonorInfoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DonorInfoMaxAggregateInputType
}

export type GetDonorInfoAggregateType<T extends DonorInfoAggregateArgs> = {
      [P in keyof T & keyof AggregateDonorInfo]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDonorInfo[P]>
    : Prisma.GetScalarType<T[P], AggregateDonorInfo[P]>
}




export type DonorInfoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DonorInfoWhereInput
  orderBy?: Prisma.DonorInfoOrderByWithAggregationInput | Prisma.DonorInfoOrderByWithAggregationInput[]
  by: Prisma.DonorInfoScalarFieldEnum[] | Prisma.DonorInfoScalarFieldEnum
  having?: Prisma.DonorInfoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DonorInfoCountAggregateInputType | true
  _avg?: DonorInfoAvgAggregateInputType
  _sum?: DonorInfoSumAggregateInputType
  _min?: DonorInfoMinAggregateInputType
  _max?: DonorInfoMaxAggregateInputType
}

export type DonorInfoGroupByOutputType = {
  id: number
  name: string
  avatar: string | null
  description: string | null
  donationAmount: number | null
  donationDate: Date
  operatorId: string
  createdAt: Date
  updatedAt: Date
  _count: DonorInfoCountAggregateOutputType | null
  _avg: DonorInfoAvgAggregateOutputType | null
  _sum: DonorInfoSumAggregateOutputType | null
  _min: DonorInfoMinAggregateOutputType | null
  _max: DonorInfoMaxAggregateOutputType | null
}

type GetDonorInfoGroupByPayload<T extends DonorInfoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DonorInfoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DonorInfoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DonorInfoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DonorInfoGroupByOutputType[P]>
      }
    >
  > 



export type DonorInfoWhereInput = {
  AND?: Prisma.DonorInfoWhereInput | Prisma.DonorInfoWhereInput[]
  OR?: Prisma.DonorInfoWhereInput[]
  NOT?: Prisma.DonorInfoWhereInput | Prisma.DonorInfoWhereInput[]
  id?: Prisma.IntFilter<"DonorInfo"> | number
  name?: Prisma.StringFilter<"DonorInfo"> | string
  avatar?: Prisma.StringNullableFilter<"DonorInfo"> | string | null
  description?: Prisma.StringNullableFilter<"DonorInfo"> | string | null
  donationAmount?: Prisma.IntNullableFilter<"DonorInfo"> | number | null
  donationDate?: Prisma.DateTimeFilter<"DonorInfo"> | Date | string
  operatorId?: Prisma.StringFilter<"DonorInfo"> | string
  createdAt?: Prisma.DateTimeFilter<"DonorInfo"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DonorInfo"> | Date | string
  operator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type DonorInfoOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  avatar?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  donationAmount?: Prisma.SortOrderInput | Prisma.SortOrder
  donationDate?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  operator?: Prisma.UserOrderByWithRelationInput
}

export type DonorInfoWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.DonorInfoWhereInput | Prisma.DonorInfoWhereInput[]
  OR?: Prisma.DonorInfoWhereInput[]
  NOT?: Prisma.DonorInfoWhereInput | Prisma.DonorInfoWhereInput[]
  name?: Prisma.StringFilter<"DonorInfo"> | string
  avatar?: Prisma.StringNullableFilter<"DonorInfo"> | string | null
  description?: Prisma.StringNullableFilter<"DonorInfo"> | string | null
  donationAmount?: Prisma.IntNullableFilter<"DonorInfo"> | number | null
  donationDate?: Prisma.DateTimeFilter<"DonorInfo"> | Date | string
  operatorId?: Prisma.StringFilter<"DonorInfo"> | string
  createdAt?: Prisma.DateTimeFilter<"DonorInfo"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DonorInfo"> | Date | string
  operator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type DonorInfoOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  avatar?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  donationAmount?: Prisma.SortOrderInput | Prisma.SortOrder
  donationDate?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.DonorInfoCountOrderByAggregateInput
  _avg?: Prisma.DonorInfoAvgOrderByAggregateInput
  _max?: Prisma.DonorInfoMaxOrderByAggregateInput
  _min?: Prisma.DonorInfoMinOrderByAggregateInput
  _sum?: Prisma.DonorInfoSumOrderByAggregateInput
}

export type DonorInfoScalarWhereWithAggregatesInput = {
  AND?: Prisma.DonorInfoScalarWhereWithAggregatesInput | Prisma.DonorInfoScalarWhereWithAggregatesInput[]
  OR?: Prisma.DonorInfoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DonorInfoScalarWhereWithAggregatesInput | Prisma.DonorInfoScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"DonorInfo"> | number
  name?: Prisma.StringWithAggregatesFilter<"DonorInfo"> | string
  avatar?: Prisma.StringNullableWithAggregatesFilter<"DonorInfo"> | string | null
  description?: Prisma.StringNullableWithAggregatesFilter<"DonorInfo"> | string | null
  donationAmount?: Prisma.IntNullableWithAggregatesFilter<"DonorInfo"> | number | null
  donationDate?: Prisma.DateTimeWithAggregatesFilter<"DonorInfo"> | Date | string
  operatorId?: Prisma.StringWithAggregatesFilter<"DonorInfo"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"DonorInfo"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"DonorInfo"> | Date | string
}

export type DonorInfoCreateInput = {
  name: string
  avatar?: string | null
  description?: string | null
  donationAmount?: number | null
  donationDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  operator: Prisma.UserCreateNestedOneWithoutDonorInfoInput
}

export type DonorInfoUncheckedCreateInput = {
  id?: number
  name: string
  avatar?: string | null
  description?: string | null
  donationAmount?: number | null
  donationDate: Date | string
  operatorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DonorInfoUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  donationAmount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  donationDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  operator?: Prisma.UserUpdateOneRequiredWithoutDonorInfoNestedInput
}

export type DonorInfoUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  donationAmount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  donationDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  operatorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DonorInfoCreateManyInput = {
  id?: number
  name: string
  avatar?: string | null
  description?: string | null
  donationAmount?: number | null
  donationDate: Date | string
  operatorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DonorInfoUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  donationAmount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  donationDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DonorInfoUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  donationAmount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  donationDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  operatorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DonorInfoListRelationFilter = {
  every?: Prisma.DonorInfoWhereInput
  some?: Prisma.DonorInfoWhereInput
  none?: Prisma.DonorInfoWhereInput
}

export type DonorInfoOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DonorInfoCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  avatar?: Prisma.SortOrder
  description?: Prisma.SortOrder
  donationAmount?: Prisma.SortOrder
  donationDate?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DonorInfoAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  donationAmount?: Prisma.SortOrder
}

export type DonorInfoMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  avatar?: Prisma.SortOrder
  description?: Prisma.SortOrder
  donationAmount?: Prisma.SortOrder
  donationDate?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DonorInfoMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  avatar?: Prisma.SortOrder
  description?: Prisma.SortOrder
  donationAmount?: Prisma.SortOrder
  donationDate?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DonorInfoSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  donationAmount?: Prisma.SortOrder
}

export type DonorInfoCreateNestedManyWithoutOperatorInput = {
  create?: Prisma.XOR<Prisma.DonorInfoCreateWithoutOperatorInput, Prisma.DonorInfoUncheckedCreateWithoutOperatorInput> | Prisma.DonorInfoCreateWithoutOperatorInput[] | Prisma.DonorInfoUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.DonorInfoCreateOrConnectWithoutOperatorInput | Prisma.DonorInfoCreateOrConnectWithoutOperatorInput[]
  createMany?: Prisma.DonorInfoCreateManyOperatorInputEnvelope
  connect?: Prisma.DonorInfoWhereUniqueInput | Prisma.DonorInfoWhereUniqueInput[]
}

export type DonorInfoUncheckedCreateNestedManyWithoutOperatorInput = {
  create?: Prisma.XOR<Prisma.DonorInfoCreateWithoutOperatorInput, Prisma.DonorInfoUncheckedCreateWithoutOperatorInput> | Prisma.DonorInfoCreateWithoutOperatorInput[] | Prisma.DonorInfoUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.DonorInfoCreateOrConnectWithoutOperatorInput | Prisma.DonorInfoCreateOrConnectWithoutOperatorInput[]
  createMany?: Prisma.DonorInfoCreateManyOperatorInputEnvelope
  connect?: Prisma.DonorInfoWhereUniqueInput | Prisma.DonorInfoWhereUniqueInput[]
}

export type DonorInfoUpdateManyWithoutOperatorNestedInput = {
  create?: Prisma.XOR<Prisma.DonorInfoCreateWithoutOperatorInput, Prisma.DonorInfoUncheckedCreateWithoutOperatorInput> | Prisma.DonorInfoCreateWithoutOperatorInput[] | Prisma.DonorInfoUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.DonorInfoCreateOrConnectWithoutOperatorInput | Prisma.DonorInfoCreateOrConnectWithoutOperatorInput[]
  upsert?: Prisma.DonorInfoUpsertWithWhereUniqueWithoutOperatorInput | Prisma.DonorInfoUpsertWithWhereUniqueWithoutOperatorInput[]
  createMany?: Prisma.DonorInfoCreateManyOperatorInputEnvelope
  set?: Prisma.DonorInfoWhereUniqueInput | Prisma.DonorInfoWhereUniqueInput[]
  disconnect?: Prisma.DonorInfoWhereUniqueInput | Prisma.DonorInfoWhereUniqueInput[]
  delete?: Prisma.DonorInfoWhereUniqueInput | Prisma.DonorInfoWhereUniqueInput[]
  connect?: Prisma.DonorInfoWhereUniqueInput | Prisma.DonorInfoWhereUniqueInput[]
  update?: Prisma.DonorInfoUpdateWithWhereUniqueWithoutOperatorInput | Prisma.DonorInfoUpdateWithWhereUniqueWithoutOperatorInput[]
  updateMany?: Prisma.DonorInfoUpdateManyWithWhereWithoutOperatorInput | Prisma.DonorInfoUpdateManyWithWhereWithoutOperatorInput[]
  deleteMany?: Prisma.DonorInfoScalarWhereInput | Prisma.DonorInfoScalarWhereInput[]
}

export type DonorInfoUncheckedUpdateManyWithoutOperatorNestedInput = {
  create?: Prisma.XOR<Prisma.DonorInfoCreateWithoutOperatorInput, Prisma.DonorInfoUncheckedCreateWithoutOperatorInput> | Prisma.DonorInfoCreateWithoutOperatorInput[] | Prisma.DonorInfoUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.DonorInfoCreateOrConnectWithoutOperatorInput | Prisma.DonorInfoCreateOrConnectWithoutOperatorInput[]
  upsert?: Prisma.DonorInfoUpsertWithWhereUniqueWithoutOperatorInput | Prisma.DonorInfoUpsertWithWhereUniqueWithoutOperatorInput[]
  createMany?: Prisma.DonorInfoCreateManyOperatorInputEnvelope
  set?: Prisma.DonorInfoWhereUniqueInput | Prisma.DonorInfoWhereUniqueInput[]
  disconnect?: Prisma.DonorInfoWhereUniqueInput | Prisma.DonorInfoWhereUniqueInput[]
  delete?: Prisma.DonorInfoWhereUniqueInput | Prisma.DonorInfoWhereUniqueInput[]
  connect?: Prisma.DonorInfoWhereUniqueInput | Prisma.DonorInfoWhereUniqueInput[]
  update?: Prisma.DonorInfoUpdateWithWhereUniqueWithoutOperatorInput | Prisma.DonorInfoUpdateWithWhereUniqueWithoutOperatorInput[]
  updateMany?: Prisma.DonorInfoUpdateManyWithWhereWithoutOperatorInput | Prisma.DonorInfoUpdateManyWithWhereWithoutOperatorInput[]
  deleteMany?: Prisma.DonorInfoScalarWhereInput | Prisma.DonorInfoScalarWhereInput[]
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type DonorInfoCreateWithoutOperatorInput = {
  name: string
  avatar?: string | null
  description?: string | null
  donationAmount?: number | null
  donationDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DonorInfoUncheckedCreateWithoutOperatorInput = {
  id?: number
  name: string
  avatar?: string | null
  description?: string | null
  donationAmount?: number | null
  donationDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DonorInfoCreateOrConnectWithoutOperatorInput = {
  where: Prisma.DonorInfoWhereUniqueInput
  create: Prisma.XOR<Prisma.DonorInfoCreateWithoutOperatorInput, Prisma.DonorInfoUncheckedCreateWithoutOperatorInput>
}

export type DonorInfoCreateManyOperatorInputEnvelope = {
  data: Prisma.DonorInfoCreateManyOperatorInput | Prisma.DonorInfoCreateManyOperatorInput[]
}

export type DonorInfoUpsertWithWhereUniqueWithoutOperatorInput = {
  where: Prisma.DonorInfoWhereUniqueInput
  update: Prisma.XOR<Prisma.DonorInfoUpdateWithoutOperatorInput, Prisma.DonorInfoUncheckedUpdateWithoutOperatorInput>
  create: Prisma.XOR<Prisma.DonorInfoCreateWithoutOperatorInput, Prisma.DonorInfoUncheckedCreateWithoutOperatorInput>
}

export type DonorInfoUpdateWithWhereUniqueWithoutOperatorInput = {
  where: Prisma.DonorInfoWhereUniqueInput
  data: Prisma.XOR<Prisma.DonorInfoUpdateWithoutOperatorInput, Prisma.DonorInfoUncheckedUpdateWithoutOperatorInput>
}

export type DonorInfoUpdateManyWithWhereWithoutOperatorInput = {
  where: Prisma.DonorInfoScalarWhereInput
  data: Prisma.XOR<Prisma.DonorInfoUpdateManyMutationInput, Prisma.DonorInfoUncheckedUpdateManyWithoutOperatorInput>
}

export type DonorInfoScalarWhereInput = {
  AND?: Prisma.DonorInfoScalarWhereInput | Prisma.DonorInfoScalarWhereInput[]
  OR?: Prisma.DonorInfoScalarWhereInput[]
  NOT?: Prisma.DonorInfoScalarWhereInput | Prisma.DonorInfoScalarWhereInput[]
  id?: Prisma.IntFilter<"DonorInfo"> | number
  name?: Prisma.StringFilter<"DonorInfo"> | string
  avatar?: Prisma.StringNullableFilter<"DonorInfo"> | string | null
  description?: Prisma.StringNullableFilter<"DonorInfo"> | string | null
  donationAmount?: Prisma.IntNullableFilter<"DonorInfo"> | number | null
  donationDate?: Prisma.DateTimeFilter<"DonorInfo"> | Date | string
  operatorId?: Prisma.StringFilter<"DonorInfo"> | string
  createdAt?: Prisma.DateTimeFilter<"DonorInfo"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DonorInfo"> | Date | string
}

export type DonorInfoCreateManyOperatorInput = {
  id?: number
  name: string
  avatar?: string | null
  description?: string | null
  donationAmount?: number | null
  donationDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DonorInfoUpdateWithoutOperatorInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  donationAmount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  donationDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DonorInfoUncheckedUpdateWithoutOperatorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  donationAmount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  donationDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DonorInfoUncheckedUpdateManyWithoutOperatorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  donationAmount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  donationDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type DonorInfoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  avatar?: boolean
  description?: boolean
  donationAmount?: boolean
  donationDate?: boolean
  operatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["donorInfo"]>

export type DonorInfoSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  avatar?: boolean
  description?: boolean
  donationAmount?: boolean
  donationDate?: boolean
  operatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["donorInfo"]>

export type DonorInfoSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  avatar?: boolean
  description?: boolean
  donationAmount?: boolean
  donationDate?: boolean
  operatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["donorInfo"]>

export type DonorInfoSelectScalar = {
  id?: boolean
  name?: boolean
  avatar?: boolean
  description?: boolean
  donationAmount?: boolean
  donationDate?: boolean
  operatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type DonorInfoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "avatar" | "description" | "donationAmount" | "donationDate" | "operatorId" | "createdAt" | "updatedAt", ExtArgs["result"]["donorInfo"]>
export type DonorInfoInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type DonorInfoIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type DonorInfoIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $DonorInfoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DonorInfo"
  objects: {
    operator: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    avatar: string | null
    description: string | null
    donationAmount: number | null
    donationDate: Date
    operatorId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["donorInfo"]>
  composites: {}
}

export type DonorInfoGetPayload<S extends boolean | null | undefined | DonorInfoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DonorInfoPayload, S>

export type DonorInfoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DonorInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DonorInfoCountAggregateInputType | true
  }

export interface DonorInfoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DonorInfo'], meta: { name: 'DonorInfo' } }
  /**
   * Find zero or one DonorInfo that matches the filter.
   * @param {DonorInfoFindUniqueArgs} args - Arguments to find a DonorInfo
   * @example
   * // Get one DonorInfo
   * const donorInfo = await prisma.donorInfo.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DonorInfoFindUniqueArgs>(args: Prisma.SelectSubset<T, DonorInfoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DonorInfoClient<runtime.Types.Result.GetResult<Prisma.$DonorInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DonorInfo that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DonorInfoFindUniqueOrThrowArgs} args - Arguments to find a DonorInfo
   * @example
   * // Get one DonorInfo
   * const donorInfo = await prisma.donorInfo.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DonorInfoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DonorInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DonorInfoClient<runtime.Types.Result.GetResult<Prisma.$DonorInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DonorInfo that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DonorInfoFindFirstArgs} args - Arguments to find a DonorInfo
   * @example
   * // Get one DonorInfo
   * const donorInfo = await prisma.donorInfo.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DonorInfoFindFirstArgs>(args?: Prisma.SelectSubset<T, DonorInfoFindFirstArgs<ExtArgs>>): Prisma.Prisma__DonorInfoClient<runtime.Types.Result.GetResult<Prisma.$DonorInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DonorInfo that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DonorInfoFindFirstOrThrowArgs} args - Arguments to find a DonorInfo
   * @example
   * // Get one DonorInfo
   * const donorInfo = await prisma.donorInfo.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DonorInfoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DonorInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DonorInfoClient<runtime.Types.Result.GetResult<Prisma.$DonorInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DonorInfos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DonorInfoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DonorInfos
   * const donorInfos = await prisma.donorInfo.findMany()
   * 
   * // Get first 10 DonorInfos
   * const donorInfos = await prisma.donorInfo.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const donorInfoWithIdOnly = await prisma.donorInfo.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DonorInfoFindManyArgs>(args?: Prisma.SelectSubset<T, DonorInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DonorInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DonorInfo.
   * @param {DonorInfoCreateArgs} args - Arguments to create a DonorInfo.
   * @example
   * // Create one DonorInfo
   * const DonorInfo = await prisma.donorInfo.create({
   *   data: {
   *     // ... data to create a DonorInfo
   *   }
   * })
   * 
   */
  create<T extends DonorInfoCreateArgs>(args: Prisma.SelectSubset<T, DonorInfoCreateArgs<ExtArgs>>): Prisma.Prisma__DonorInfoClient<runtime.Types.Result.GetResult<Prisma.$DonorInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DonorInfos.
   * @param {DonorInfoCreateManyArgs} args - Arguments to create many DonorInfos.
   * @example
   * // Create many DonorInfos
   * const donorInfo = await prisma.donorInfo.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DonorInfoCreateManyArgs>(args?: Prisma.SelectSubset<T, DonorInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DonorInfos and returns the data saved in the database.
   * @param {DonorInfoCreateManyAndReturnArgs} args - Arguments to create many DonorInfos.
   * @example
   * // Create many DonorInfos
   * const donorInfo = await prisma.donorInfo.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DonorInfos and only return the `id`
   * const donorInfoWithIdOnly = await prisma.donorInfo.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DonorInfoCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DonorInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DonorInfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DonorInfo.
   * @param {DonorInfoDeleteArgs} args - Arguments to delete one DonorInfo.
   * @example
   * // Delete one DonorInfo
   * const DonorInfo = await prisma.donorInfo.delete({
   *   where: {
   *     // ... filter to delete one DonorInfo
   *   }
   * })
   * 
   */
  delete<T extends DonorInfoDeleteArgs>(args: Prisma.SelectSubset<T, DonorInfoDeleteArgs<ExtArgs>>): Prisma.Prisma__DonorInfoClient<runtime.Types.Result.GetResult<Prisma.$DonorInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DonorInfo.
   * @param {DonorInfoUpdateArgs} args - Arguments to update one DonorInfo.
   * @example
   * // Update one DonorInfo
   * const donorInfo = await prisma.donorInfo.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DonorInfoUpdateArgs>(args: Prisma.SelectSubset<T, DonorInfoUpdateArgs<ExtArgs>>): Prisma.Prisma__DonorInfoClient<runtime.Types.Result.GetResult<Prisma.$DonorInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DonorInfos.
   * @param {DonorInfoDeleteManyArgs} args - Arguments to filter DonorInfos to delete.
   * @example
   * // Delete a few DonorInfos
   * const { count } = await prisma.donorInfo.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DonorInfoDeleteManyArgs>(args?: Prisma.SelectSubset<T, DonorInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DonorInfos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DonorInfoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DonorInfos
   * const donorInfo = await prisma.donorInfo.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DonorInfoUpdateManyArgs>(args: Prisma.SelectSubset<T, DonorInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DonorInfos and returns the data updated in the database.
   * @param {DonorInfoUpdateManyAndReturnArgs} args - Arguments to update many DonorInfos.
   * @example
   * // Update many DonorInfos
   * const donorInfo = await prisma.donorInfo.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DonorInfos and only return the `id`
   * const donorInfoWithIdOnly = await prisma.donorInfo.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DonorInfoUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DonorInfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DonorInfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DonorInfo.
   * @param {DonorInfoUpsertArgs} args - Arguments to update or create a DonorInfo.
   * @example
   * // Update or create a DonorInfo
   * const donorInfo = await prisma.donorInfo.upsert({
   *   create: {
   *     // ... data to create a DonorInfo
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DonorInfo we want to update
   *   }
   * })
   */
  upsert<T extends DonorInfoUpsertArgs>(args: Prisma.SelectSubset<T, DonorInfoUpsertArgs<ExtArgs>>): Prisma.Prisma__DonorInfoClient<runtime.Types.Result.GetResult<Prisma.$DonorInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DonorInfos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DonorInfoCountArgs} args - Arguments to filter DonorInfos to count.
   * @example
   * // Count the number of DonorInfos
   * const count = await prisma.donorInfo.count({
   *   where: {
   *     // ... the filter for the DonorInfos we want to count
   *   }
   * })
  **/
  count<T extends DonorInfoCountArgs>(
    args?: Prisma.Subset<T, DonorInfoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DonorInfoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DonorInfo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DonorInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DonorInfoAggregateArgs>(args: Prisma.Subset<T, DonorInfoAggregateArgs>): Prisma.PrismaPromise<GetDonorInfoAggregateType<T>>

  /**
   * Group by DonorInfo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DonorInfoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DonorInfoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DonorInfoGroupByArgs['orderBy'] }
      : { orderBy?: DonorInfoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DonorInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDonorInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DonorInfo model
 */
readonly fields: DonorInfoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DonorInfo.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DonorInfoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  operator<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DonorInfo model
 */
export interface DonorInfoFieldRefs {
  readonly id: Prisma.FieldRef<"DonorInfo", 'Int'>
  readonly name: Prisma.FieldRef<"DonorInfo", 'String'>
  readonly avatar: Prisma.FieldRef<"DonorInfo", 'String'>
  readonly description: Prisma.FieldRef<"DonorInfo", 'String'>
  readonly donationAmount: Prisma.FieldRef<"DonorInfo", 'Int'>
  readonly donationDate: Prisma.FieldRef<"DonorInfo", 'DateTime'>
  readonly operatorId: Prisma.FieldRef<"DonorInfo", 'String'>
  readonly createdAt: Prisma.FieldRef<"DonorInfo", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"DonorInfo", 'DateTime'>
}
    

// Custom InputTypes
/**
 * DonorInfo findUnique
 */
export type DonorInfoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonorInfo
   */
  select?: Prisma.DonorInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DonorInfo
   */
  omit?: Prisma.DonorInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonorInfoInclude<ExtArgs> | null
  /**
   * Filter, which DonorInfo to fetch.
   */
  where: Prisma.DonorInfoWhereUniqueInput
}

/**
 * DonorInfo findUniqueOrThrow
 */
export type DonorInfoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonorInfo
   */
  select?: Prisma.DonorInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DonorInfo
   */
  omit?: Prisma.DonorInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonorInfoInclude<ExtArgs> | null
  /**
   * Filter, which DonorInfo to fetch.
   */
  where: Prisma.DonorInfoWhereUniqueInput
}

/**
 * DonorInfo findFirst
 */
export type DonorInfoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonorInfo
   */
  select?: Prisma.DonorInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DonorInfo
   */
  omit?: Prisma.DonorInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonorInfoInclude<ExtArgs> | null
  /**
   * Filter, which DonorInfo to fetch.
   */
  where?: Prisma.DonorInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DonorInfos to fetch.
   */
  orderBy?: Prisma.DonorInfoOrderByWithRelationInput | Prisma.DonorInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DonorInfos.
   */
  cursor?: Prisma.DonorInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DonorInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DonorInfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DonorInfos.
   */
  distinct?: Prisma.DonorInfoScalarFieldEnum | Prisma.DonorInfoScalarFieldEnum[]
}

/**
 * DonorInfo findFirstOrThrow
 */
export type DonorInfoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonorInfo
   */
  select?: Prisma.DonorInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DonorInfo
   */
  omit?: Prisma.DonorInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonorInfoInclude<ExtArgs> | null
  /**
   * Filter, which DonorInfo to fetch.
   */
  where?: Prisma.DonorInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DonorInfos to fetch.
   */
  orderBy?: Prisma.DonorInfoOrderByWithRelationInput | Prisma.DonorInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DonorInfos.
   */
  cursor?: Prisma.DonorInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DonorInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DonorInfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DonorInfos.
   */
  distinct?: Prisma.DonorInfoScalarFieldEnum | Prisma.DonorInfoScalarFieldEnum[]
}

/**
 * DonorInfo findMany
 */
export type DonorInfoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonorInfo
   */
  select?: Prisma.DonorInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DonorInfo
   */
  omit?: Prisma.DonorInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonorInfoInclude<ExtArgs> | null
  /**
   * Filter, which DonorInfos to fetch.
   */
  where?: Prisma.DonorInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DonorInfos to fetch.
   */
  orderBy?: Prisma.DonorInfoOrderByWithRelationInput | Prisma.DonorInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DonorInfos.
   */
  cursor?: Prisma.DonorInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DonorInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DonorInfos.
   */
  skip?: number
  distinct?: Prisma.DonorInfoScalarFieldEnum | Prisma.DonorInfoScalarFieldEnum[]
}

/**
 * DonorInfo create
 */
export type DonorInfoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonorInfo
   */
  select?: Prisma.DonorInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DonorInfo
   */
  omit?: Prisma.DonorInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonorInfoInclude<ExtArgs> | null
  /**
   * The data needed to create a DonorInfo.
   */
  data: Prisma.XOR<Prisma.DonorInfoCreateInput, Prisma.DonorInfoUncheckedCreateInput>
}

/**
 * DonorInfo createMany
 */
export type DonorInfoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DonorInfos.
   */
  data: Prisma.DonorInfoCreateManyInput | Prisma.DonorInfoCreateManyInput[]
}

/**
 * DonorInfo createManyAndReturn
 */
export type DonorInfoCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonorInfo
   */
  select?: Prisma.DonorInfoSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DonorInfo
   */
  omit?: Prisma.DonorInfoOmit<ExtArgs> | null
  /**
   * The data used to create many DonorInfos.
   */
  data: Prisma.DonorInfoCreateManyInput | Prisma.DonorInfoCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonorInfoIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * DonorInfo update
 */
export type DonorInfoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonorInfo
   */
  select?: Prisma.DonorInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DonorInfo
   */
  omit?: Prisma.DonorInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonorInfoInclude<ExtArgs> | null
  /**
   * The data needed to update a DonorInfo.
   */
  data: Prisma.XOR<Prisma.DonorInfoUpdateInput, Prisma.DonorInfoUncheckedUpdateInput>
  /**
   * Choose, which DonorInfo to update.
   */
  where: Prisma.DonorInfoWhereUniqueInput
}

/**
 * DonorInfo updateMany
 */
export type DonorInfoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DonorInfos.
   */
  data: Prisma.XOR<Prisma.DonorInfoUpdateManyMutationInput, Prisma.DonorInfoUncheckedUpdateManyInput>
  /**
   * Filter which DonorInfos to update
   */
  where?: Prisma.DonorInfoWhereInput
  /**
   * Limit how many DonorInfos to update.
   */
  limit?: number
}

/**
 * DonorInfo updateManyAndReturn
 */
export type DonorInfoUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonorInfo
   */
  select?: Prisma.DonorInfoSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DonorInfo
   */
  omit?: Prisma.DonorInfoOmit<ExtArgs> | null
  /**
   * The data used to update DonorInfos.
   */
  data: Prisma.XOR<Prisma.DonorInfoUpdateManyMutationInput, Prisma.DonorInfoUncheckedUpdateManyInput>
  /**
   * Filter which DonorInfos to update
   */
  where?: Prisma.DonorInfoWhereInput
  /**
   * Limit how many DonorInfos to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonorInfoIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * DonorInfo upsert
 */
export type DonorInfoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonorInfo
   */
  select?: Prisma.DonorInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DonorInfo
   */
  omit?: Prisma.DonorInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonorInfoInclude<ExtArgs> | null
  /**
   * The filter to search for the DonorInfo to update in case it exists.
   */
  where: Prisma.DonorInfoWhereUniqueInput
  /**
   * In case the DonorInfo found by the `where` argument doesn't exist, create a new DonorInfo with this data.
   */
  create: Prisma.XOR<Prisma.DonorInfoCreateInput, Prisma.DonorInfoUncheckedCreateInput>
  /**
   * In case the DonorInfo was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DonorInfoUpdateInput, Prisma.DonorInfoUncheckedUpdateInput>
}

/**
 * DonorInfo delete
 */
export type DonorInfoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonorInfo
   */
  select?: Prisma.DonorInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DonorInfo
   */
  omit?: Prisma.DonorInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonorInfoInclude<ExtArgs> | null
  /**
   * Filter which DonorInfo to delete.
   */
  where: Prisma.DonorInfoWhereUniqueInput
}

/**
 * DonorInfo deleteMany
 */
export type DonorInfoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DonorInfos to delete
   */
  where?: Prisma.DonorInfoWhereInput
  /**
   * Limit how many DonorInfos to delete.
   */
  limit?: number
}

/**
 * DonorInfo without action
 */
export type DonorInfoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonorInfo
   */
  select?: Prisma.DonorInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DonorInfo
   */
  omit?: Prisma.DonorInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonorInfoInclude<ExtArgs> | null
}
