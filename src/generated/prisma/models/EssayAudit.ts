
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `EssayAudit` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model EssayAudit
 * 
 */
export type EssayAuditModel = runtime.Types.Result.DefaultSelection<Prisma.$EssayAuditPayload>

export type AggregateEssayAudit = {
  _count: EssayAuditCountAggregateOutputType | null
  _avg: EssayAuditAvgAggregateOutputType | null
  _sum: EssayAuditSumAggregateOutputType | null
  _min: EssayAuditMinAggregateOutputType | null
  _max: EssayAuditMaxAggregateOutputType | null
}

export type EssayAuditAvgAggregateOutputType = {
  id: number | null
  essayId: number | null
}

export type EssayAuditSumAggregateOutputType = {
  id: number | null
  essayId: number | null
}

export type EssayAuditMinAggregateOutputType = {
  id: number | null
  essayId: number | null
  auditStatus: $Enums.AuditStatus | null
  auditMsg: string | null
  operatorId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EssayAuditMaxAggregateOutputType = {
  id: number | null
  essayId: number | null
  auditStatus: $Enums.AuditStatus | null
  auditMsg: string | null
  operatorId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EssayAuditCountAggregateOutputType = {
  id: number
  essayId: number
  auditStatus: number
  auditMsg: number
  operatorId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type EssayAuditAvgAggregateInputType = {
  id?: true
  essayId?: true
}

export type EssayAuditSumAggregateInputType = {
  id?: true
  essayId?: true
}

export type EssayAuditMinAggregateInputType = {
  id?: true
  essayId?: true
  auditStatus?: true
  auditMsg?: true
  operatorId?: true
  createdAt?: true
  updatedAt?: true
}

export type EssayAuditMaxAggregateInputType = {
  id?: true
  essayId?: true
  auditStatus?: true
  auditMsg?: true
  operatorId?: true
  createdAt?: true
  updatedAt?: true
}

export type EssayAuditCountAggregateInputType = {
  id?: true
  essayId?: true
  auditStatus?: true
  auditMsg?: true
  operatorId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type EssayAuditAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EssayAudit to aggregate.
   */
  where?: Prisma.EssayAuditWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EssayAudits to fetch.
   */
  orderBy?: Prisma.EssayAuditOrderByWithRelationInput | Prisma.EssayAuditOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EssayAuditWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EssayAudits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EssayAudits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EssayAudits
  **/
  _count?: true | EssayAuditCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: EssayAuditAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: EssayAuditSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EssayAuditMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EssayAuditMaxAggregateInputType
}

export type GetEssayAuditAggregateType<T extends EssayAuditAggregateArgs> = {
      [P in keyof T & keyof AggregateEssayAudit]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEssayAudit[P]>
    : Prisma.GetScalarType<T[P], AggregateEssayAudit[P]>
}




export type EssayAuditGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EssayAuditWhereInput
  orderBy?: Prisma.EssayAuditOrderByWithAggregationInput | Prisma.EssayAuditOrderByWithAggregationInput[]
  by: Prisma.EssayAuditScalarFieldEnum[] | Prisma.EssayAuditScalarFieldEnum
  having?: Prisma.EssayAuditScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EssayAuditCountAggregateInputType | true
  _avg?: EssayAuditAvgAggregateInputType
  _sum?: EssayAuditSumAggregateInputType
  _min?: EssayAuditMinAggregateInputType
  _max?: EssayAuditMaxAggregateInputType
}

export type EssayAuditGroupByOutputType = {
  id: number
  essayId: number
  auditStatus: $Enums.AuditStatus
  auditMsg: string | null
  operatorId: string
  createdAt: Date
  updatedAt: Date
  _count: EssayAuditCountAggregateOutputType | null
  _avg: EssayAuditAvgAggregateOutputType | null
  _sum: EssayAuditSumAggregateOutputType | null
  _min: EssayAuditMinAggregateOutputType | null
  _max: EssayAuditMaxAggregateOutputType | null
}

type GetEssayAuditGroupByPayload<T extends EssayAuditGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EssayAuditGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EssayAuditGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EssayAuditGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EssayAuditGroupByOutputType[P]>
      }
    >
  > 



export type EssayAuditWhereInput = {
  AND?: Prisma.EssayAuditWhereInput | Prisma.EssayAuditWhereInput[]
  OR?: Prisma.EssayAuditWhereInput[]
  NOT?: Prisma.EssayAuditWhereInput | Prisma.EssayAuditWhereInput[]
  id?: Prisma.IntFilter<"EssayAudit"> | number
  essayId?: Prisma.IntFilter<"EssayAudit"> | number
  auditStatus?: Prisma.EnumAuditStatusFilter<"EssayAudit"> | $Enums.AuditStatus
  auditMsg?: Prisma.StringNullableFilter<"EssayAudit"> | string | null
  operatorId?: Prisma.StringFilter<"EssayAudit"> | string
  createdAt?: Prisma.DateTimeFilter<"EssayAudit"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EssayAudit"> | Date | string
  essay?: Prisma.XOR<Prisma.EssayScalarRelationFilter, Prisma.EssayWhereInput>
  operator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type EssayAuditOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  essayId?: Prisma.SortOrder
  auditStatus?: Prisma.SortOrder
  auditMsg?: Prisma.SortOrderInput | Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  essay?: Prisma.EssayOrderByWithRelationInput
  operator?: Prisma.UserOrderByWithRelationInput
}

export type EssayAuditWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.EssayAuditWhereInput | Prisma.EssayAuditWhereInput[]
  OR?: Prisma.EssayAuditWhereInput[]
  NOT?: Prisma.EssayAuditWhereInput | Prisma.EssayAuditWhereInput[]
  essayId?: Prisma.IntFilter<"EssayAudit"> | number
  auditStatus?: Prisma.EnumAuditStatusFilter<"EssayAudit"> | $Enums.AuditStatus
  auditMsg?: Prisma.StringNullableFilter<"EssayAudit"> | string | null
  operatorId?: Prisma.StringFilter<"EssayAudit"> | string
  createdAt?: Prisma.DateTimeFilter<"EssayAudit"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EssayAudit"> | Date | string
  essay?: Prisma.XOR<Prisma.EssayScalarRelationFilter, Prisma.EssayWhereInput>
  operator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type EssayAuditOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  essayId?: Prisma.SortOrder
  auditStatus?: Prisma.SortOrder
  auditMsg?: Prisma.SortOrderInput | Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.EssayAuditCountOrderByAggregateInput
  _avg?: Prisma.EssayAuditAvgOrderByAggregateInput
  _max?: Prisma.EssayAuditMaxOrderByAggregateInput
  _min?: Prisma.EssayAuditMinOrderByAggregateInput
  _sum?: Prisma.EssayAuditSumOrderByAggregateInput
}

export type EssayAuditScalarWhereWithAggregatesInput = {
  AND?: Prisma.EssayAuditScalarWhereWithAggregatesInput | Prisma.EssayAuditScalarWhereWithAggregatesInput[]
  OR?: Prisma.EssayAuditScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EssayAuditScalarWhereWithAggregatesInput | Prisma.EssayAuditScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"EssayAudit"> | number
  essayId?: Prisma.IntWithAggregatesFilter<"EssayAudit"> | number
  auditStatus?: Prisma.EnumAuditStatusWithAggregatesFilter<"EssayAudit"> | $Enums.AuditStatus
  auditMsg?: Prisma.StringNullableWithAggregatesFilter<"EssayAudit"> | string | null
  operatorId?: Prisma.StringWithAggregatesFilter<"EssayAudit"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"EssayAudit"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"EssayAudit"> | Date | string
}

export type EssayAuditCreateInput = {
  auditStatus?: $Enums.AuditStatus
  auditMsg?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  essay: Prisma.EssayCreateNestedOneWithoutAuditInput
  operator: Prisma.UserCreateNestedOneWithoutEssayAuditInput
}

export type EssayAuditUncheckedCreateInput = {
  id?: number
  essayId: number
  auditStatus?: $Enums.AuditStatus
  auditMsg?: string | null
  operatorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EssayAuditUpdateInput = {
  auditStatus?: Prisma.EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
  auditMsg?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  essay?: Prisma.EssayUpdateOneRequiredWithoutAuditNestedInput
  operator?: Prisma.UserUpdateOneRequiredWithoutEssayAuditNestedInput
}

export type EssayAuditUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  essayId?: Prisma.IntFieldUpdateOperationsInput | number
  auditStatus?: Prisma.EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
  auditMsg?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  operatorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EssayAuditCreateManyInput = {
  id?: number
  essayId: number
  auditStatus?: $Enums.AuditStatus
  auditMsg?: string | null
  operatorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EssayAuditUpdateManyMutationInput = {
  auditStatus?: Prisma.EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
  auditMsg?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EssayAuditUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  essayId?: Prisma.IntFieldUpdateOperationsInput | number
  auditStatus?: Prisma.EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
  auditMsg?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  operatorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EssayAuditListRelationFilter = {
  every?: Prisma.EssayAuditWhereInput
  some?: Prisma.EssayAuditWhereInput
  none?: Prisma.EssayAuditWhereInput
}

export type EssayAuditOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EssayAuditCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  essayId?: Prisma.SortOrder
  auditStatus?: Prisma.SortOrder
  auditMsg?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EssayAuditAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  essayId?: Prisma.SortOrder
}

export type EssayAuditMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  essayId?: Prisma.SortOrder
  auditStatus?: Prisma.SortOrder
  auditMsg?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EssayAuditMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  essayId?: Prisma.SortOrder
  auditStatus?: Prisma.SortOrder
  auditMsg?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EssayAuditSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  essayId?: Prisma.SortOrder
}

export type EssayAuditCreateNestedManyWithoutOperatorInput = {
  create?: Prisma.XOR<Prisma.EssayAuditCreateWithoutOperatorInput, Prisma.EssayAuditUncheckedCreateWithoutOperatorInput> | Prisma.EssayAuditCreateWithoutOperatorInput[] | Prisma.EssayAuditUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.EssayAuditCreateOrConnectWithoutOperatorInput | Prisma.EssayAuditCreateOrConnectWithoutOperatorInput[]
  createMany?: Prisma.EssayAuditCreateManyOperatorInputEnvelope
  connect?: Prisma.EssayAuditWhereUniqueInput | Prisma.EssayAuditWhereUniqueInput[]
}

export type EssayAuditUncheckedCreateNestedManyWithoutOperatorInput = {
  create?: Prisma.XOR<Prisma.EssayAuditCreateWithoutOperatorInput, Prisma.EssayAuditUncheckedCreateWithoutOperatorInput> | Prisma.EssayAuditCreateWithoutOperatorInput[] | Prisma.EssayAuditUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.EssayAuditCreateOrConnectWithoutOperatorInput | Prisma.EssayAuditCreateOrConnectWithoutOperatorInput[]
  createMany?: Prisma.EssayAuditCreateManyOperatorInputEnvelope
  connect?: Prisma.EssayAuditWhereUniqueInput | Prisma.EssayAuditWhereUniqueInput[]
}

export type EssayAuditUpdateManyWithoutOperatorNestedInput = {
  create?: Prisma.XOR<Prisma.EssayAuditCreateWithoutOperatorInput, Prisma.EssayAuditUncheckedCreateWithoutOperatorInput> | Prisma.EssayAuditCreateWithoutOperatorInput[] | Prisma.EssayAuditUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.EssayAuditCreateOrConnectWithoutOperatorInput | Prisma.EssayAuditCreateOrConnectWithoutOperatorInput[]
  upsert?: Prisma.EssayAuditUpsertWithWhereUniqueWithoutOperatorInput | Prisma.EssayAuditUpsertWithWhereUniqueWithoutOperatorInput[]
  createMany?: Prisma.EssayAuditCreateManyOperatorInputEnvelope
  set?: Prisma.EssayAuditWhereUniqueInput | Prisma.EssayAuditWhereUniqueInput[]
  disconnect?: Prisma.EssayAuditWhereUniqueInput | Prisma.EssayAuditWhereUniqueInput[]
  delete?: Prisma.EssayAuditWhereUniqueInput | Prisma.EssayAuditWhereUniqueInput[]
  connect?: Prisma.EssayAuditWhereUniqueInput | Prisma.EssayAuditWhereUniqueInput[]
  update?: Prisma.EssayAuditUpdateWithWhereUniqueWithoutOperatorInput | Prisma.EssayAuditUpdateWithWhereUniqueWithoutOperatorInput[]
  updateMany?: Prisma.EssayAuditUpdateManyWithWhereWithoutOperatorInput | Prisma.EssayAuditUpdateManyWithWhereWithoutOperatorInput[]
  deleteMany?: Prisma.EssayAuditScalarWhereInput | Prisma.EssayAuditScalarWhereInput[]
}

export type EssayAuditUncheckedUpdateManyWithoutOperatorNestedInput = {
  create?: Prisma.XOR<Prisma.EssayAuditCreateWithoutOperatorInput, Prisma.EssayAuditUncheckedCreateWithoutOperatorInput> | Prisma.EssayAuditCreateWithoutOperatorInput[] | Prisma.EssayAuditUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.EssayAuditCreateOrConnectWithoutOperatorInput | Prisma.EssayAuditCreateOrConnectWithoutOperatorInput[]
  upsert?: Prisma.EssayAuditUpsertWithWhereUniqueWithoutOperatorInput | Prisma.EssayAuditUpsertWithWhereUniqueWithoutOperatorInput[]
  createMany?: Prisma.EssayAuditCreateManyOperatorInputEnvelope
  set?: Prisma.EssayAuditWhereUniqueInput | Prisma.EssayAuditWhereUniqueInput[]
  disconnect?: Prisma.EssayAuditWhereUniqueInput | Prisma.EssayAuditWhereUniqueInput[]
  delete?: Prisma.EssayAuditWhereUniqueInput | Prisma.EssayAuditWhereUniqueInput[]
  connect?: Prisma.EssayAuditWhereUniqueInput | Prisma.EssayAuditWhereUniqueInput[]
  update?: Prisma.EssayAuditUpdateWithWhereUniqueWithoutOperatorInput | Prisma.EssayAuditUpdateWithWhereUniqueWithoutOperatorInput[]
  updateMany?: Prisma.EssayAuditUpdateManyWithWhereWithoutOperatorInput | Prisma.EssayAuditUpdateManyWithWhereWithoutOperatorInput[]
  deleteMany?: Prisma.EssayAuditScalarWhereInput | Prisma.EssayAuditScalarWhereInput[]
}

export type EssayAuditCreateNestedManyWithoutEssayInput = {
  create?: Prisma.XOR<Prisma.EssayAuditCreateWithoutEssayInput, Prisma.EssayAuditUncheckedCreateWithoutEssayInput> | Prisma.EssayAuditCreateWithoutEssayInput[] | Prisma.EssayAuditUncheckedCreateWithoutEssayInput[]
  connectOrCreate?: Prisma.EssayAuditCreateOrConnectWithoutEssayInput | Prisma.EssayAuditCreateOrConnectWithoutEssayInput[]
  createMany?: Prisma.EssayAuditCreateManyEssayInputEnvelope
  connect?: Prisma.EssayAuditWhereUniqueInput | Prisma.EssayAuditWhereUniqueInput[]
}

export type EssayAuditUncheckedCreateNestedManyWithoutEssayInput = {
  create?: Prisma.XOR<Prisma.EssayAuditCreateWithoutEssayInput, Prisma.EssayAuditUncheckedCreateWithoutEssayInput> | Prisma.EssayAuditCreateWithoutEssayInput[] | Prisma.EssayAuditUncheckedCreateWithoutEssayInput[]
  connectOrCreate?: Prisma.EssayAuditCreateOrConnectWithoutEssayInput | Prisma.EssayAuditCreateOrConnectWithoutEssayInput[]
  createMany?: Prisma.EssayAuditCreateManyEssayInputEnvelope
  connect?: Prisma.EssayAuditWhereUniqueInput | Prisma.EssayAuditWhereUniqueInput[]
}

export type EssayAuditUpdateManyWithoutEssayNestedInput = {
  create?: Prisma.XOR<Prisma.EssayAuditCreateWithoutEssayInput, Prisma.EssayAuditUncheckedCreateWithoutEssayInput> | Prisma.EssayAuditCreateWithoutEssayInput[] | Prisma.EssayAuditUncheckedCreateWithoutEssayInput[]
  connectOrCreate?: Prisma.EssayAuditCreateOrConnectWithoutEssayInput | Prisma.EssayAuditCreateOrConnectWithoutEssayInput[]
  upsert?: Prisma.EssayAuditUpsertWithWhereUniqueWithoutEssayInput | Prisma.EssayAuditUpsertWithWhereUniqueWithoutEssayInput[]
  createMany?: Prisma.EssayAuditCreateManyEssayInputEnvelope
  set?: Prisma.EssayAuditWhereUniqueInput | Prisma.EssayAuditWhereUniqueInput[]
  disconnect?: Prisma.EssayAuditWhereUniqueInput | Prisma.EssayAuditWhereUniqueInput[]
  delete?: Prisma.EssayAuditWhereUniqueInput | Prisma.EssayAuditWhereUniqueInput[]
  connect?: Prisma.EssayAuditWhereUniqueInput | Prisma.EssayAuditWhereUniqueInput[]
  update?: Prisma.EssayAuditUpdateWithWhereUniqueWithoutEssayInput | Prisma.EssayAuditUpdateWithWhereUniqueWithoutEssayInput[]
  updateMany?: Prisma.EssayAuditUpdateManyWithWhereWithoutEssayInput | Prisma.EssayAuditUpdateManyWithWhereWithoutEssayInput[]
  deleteMany?: Prisma.EssayAuditScalarWhereInput | Prisma.EssayAuditScalarWhereInput[]
}

export type EssayAuditUncheckedUpdateManyWithoutEssayNestedInput = {
  create?: Prisma.XOR<Prisma.EssayAuditCreateWithoutEssayInput, Prisma.EssayAuditUncheckedCreateWithoutEssayInput> | Prisma.EssayAuditCreateWithoutEssayInput[] | Prisma.EssayAuditUncheckedCreateWithoutEssayInput[]
  connectOrCreate?: Prisma.EssayAuditCreateOrConnectWithoutEssayInput | Prisma.EssayAuditCreateOrConnectWithoutEssayInput[]
  upsert?: Prisma.EssayAuditUpsertWithWhereUniqueWithoutEssayInput | Prisma.EssayAuditUpsertWithWhereUniqueWithoutEssayInput[]
  createMany?: Prisma.EssayAuditCreateManyEssayInputEnvelope
  set?: Prisma.EssayAuditWhereUniqueInput | Prisma.EssayAuditWhereUniqueInput[]
  disconnect?: Prisma.EssayAuditWhereUniqueInput | Prisma.EssayAuditWhereUniqueInput[]
  delete?: Prisma.EssayAuditWhereUniqueInput | Prisma.EssayAuditWhereUniqueInput[]
  connect?: Prisma.EssayAuditWhereUniqueInput | Prisma.EssayAuditWhereUniqueInput[]
  update?: Prisma.EssayAuditUpdateWithWhereUniqueWithoutEssayInput | Prisma.EssayAuditUpdateWithWhereUniqueWithoutEssayInput[]
  updateMany?: Prisma.EssayAuditUpdateManyWithWhereWithoutEssayInput | Prisma.EssayAuditUpdateManyWithWhereWithoutEssayInput[]
  deleteMany?: Prisma.EssayAuditScalarWhereInput | Prisma.EssayAuditScalarWhereInput[]
}

export type EnumAuditStatusFieldUpdateOperationsInput = {
  set?: $Enums.AuditStatus
}

export type EssayAuditCreateWithoutOperatorInput = {
  auditStatus?: $Enums.AuditStatus
  auditMsg?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  essay: Prisma.EssayCreateNestedOneWithoutAuditInput
}

export type EssayAuditUncheckedCreateWithoutOperatorInput = {
  id?: number
  essayId: number
  auditStatus?: $Enums.AuditStatus
  auditMsg?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EssayAuditCreateOrConnectWithoutOperatorInput = {
  where: Prisma.EssayAuditWhereUniqueInput
  create: Prisma.XOR<Prisma.EssayAuditCreateWithoutOperatorInput, Prisma.EssayAuditUncheckedCreateWithoutOperatorInput>
}

export type EssayAuditCreateManyOperatorInputEnvelope = {
  data: Prisma.EssayAuditCreateManyOperatorInput | Prisma.EssayAuditCreateManyOperatorInput[]
}

export type EssayAuditUpsertWithWhereUniqueWithoutOperatorInput = {
  where: Prisma.EssayAuditWhereUniqueInput
  update: Prisma.XOR<Prisma.EssayAuditUpdateWithoutOperatorInput, Prisma.EssayAuditUncheckedUpdateWithoutOperatorInput>
  create: Prisma.XOR<Prisma.EssayAuditCreateWithoutOperatorInput, Prisma.EssayAuditUncheckedCreateWithoutOperatorInput>
}

export type EssayAuditUpdateWithWhereUniqueWithoutOperatorInput = {
  where: Prisma.EssayAuditWhereUniqueInput
  data: Prisma.XOR<Prisma.EssayAuditUpdateWithoutOperatorInput, Prisma.EssayAuditUncheckedUpdateWithoutOperatorInput>
}

export type EssayAuditUpdateManyWithWhereWithoutOperatorInput = {
  where: Prisma.EssayAuditScalarWhereInput
  data: Prisma.XOR<Prisma.EssayAuditUpdateManyMutationInput, Prisma.EssayAuditUncheckedUpdateManyWithoutOperatorInput>
}

export type EssayAuditScalarWhereInput = {
  AND?: Prisma.EssayAuditScalarWhereInput | Prisma.EssayAuditScalarWhereInput[]
  OR?: Prisma.EssayAuditScalarWhereInput[]
  NOT?: Prisma.EssayAuditScalarWhereInput | Prisma.EssayAuditScalarWhereInput[]
  id?: Prisma.IntFilter<"EssayAudit"> | number
  essayId?: Prisma.IntFilter<"EssayAudit"> | number
  auditStatus?: Prisma.EnumAuditStatusFilter<"EssayAudit"> | $Enums.AuditStatus
  auditMsg?: Prisma.StringNullableFilter<"EssayAudit"> | string | null
  operatorId?: Prisma.StringFilter<"EssayAudit"> | string
  createdAt?: Prisma.DateTimeFilter<"EssayAudit"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EssayAudit"> | Date | string
}

export type EssayAuditCreateWithoutEssayInput = {
  auditStatus?: $Enums.AuditStatus
  auditMsg?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  operator: Prisma.UserCreateNestedOneWithoutEssayAuditInput
}

export type EssayAuditUncheckedCreateWithoutEssayInput = {
  id?: number
  auditStatus?: $Enums.AuditStatus
  auditMsg?: string | null
  operatorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EssayAuditCreateOrConnectWithoutEssayInput = {
  where: Prisma.EssayAuditWhereUniqueInput
  create: Prisma.XOR<Prisma.EssayAuditCreateWithoutEssayInput, Prisma.EssayAuditUncheckedCreateWithoutEssayInput>
}

export type EssayAuditCreateManyEssayInputEnvelope = {
  data: Prisma.EssayAuditCreateManyEssayInput | Prisma.EssayAuditCreateManyEssayInput[]
}

export type EssayAuditUpsertWithWhereUniqueWithoutEssayInput = {
  where: Prisma.EssayAuditWhereUniqueInput
  update: Prisma.XOR<Prisma.EssayAuditUpdateWithoutEssayInput, Prisma.EssayAuditUncheckedUpdateWithoutEssayInput>
  create: Prisma.XOR<Prisma.EssayAuditCreateWithoutEssayInput, Prisma.EssayAuditUncheckedCreateWithoutEssayInput>
}

export type EssayAuditUpdateWithWhereUniqueWithoutEssayInput = {
  where: Prisma.EssayAuditWhereUniqueInput
  data: Prisma.XOR<Prisma.EssayAuditUpdateWithoutEssayInput, Prisma.EssayAuditUncheckedUpdateWithoutEssayInput>
}

export type EssayAuditUpdateManyWithWhereWithoutEssayInput = {
  where: Prisma.EssayAuditScalarWhereInput
  data: Prisma.XOR<Prisma.EssayAuditUpdateManyMutationInput, Prisma.EssayAuditUncheckedUpdateManyWithoutEssayInput>
}

export type EssayAuditCreateManyOperatorInput = {
  id?: number
  essayId: number
  auditStatus?: $Enums.AuditStatus
  auditMsg?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EssayAuditUpdateWithoutOperatorInput = {
  auditStatus?: Prisma.EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
  auditMsg?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  essay?: Prisma.EssayUpdateOneRequiredWithoutAuditNestedInput
}

export type EssayAuditUncheckedUpdateWithoutOperatorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  essayId?: Prisma.IntFieldUpdateOperationsInput | number
  auditStatus?: Prisma.EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
  auditMsg?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EssayAuditUncheckedUpdateManyWithoutOperatorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  essayId?: Prisma.IntFieldUpdateOperationsInput | number
  auditStatus?: Prisma.EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
  auditMsg?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EssayAuditCreateManyEssayInput = {
  id?: number
  auditStatus?: $Enums.AuditStatus
  auditMsg?: string | null
  operatorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EssayAuditUpdateWithoutEssayInput = {
  auditStatus?: Prisma.EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
  auditMsg?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  operator?: Prisma.UserUpdateOneRequiredWithoutEssayAuditNestedInput
}

export type EssayAuditUncheckedUpdateWithoutEssayInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  auditStatus?: Prisma.EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
  auditMsg?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  operatorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EssayAuditUncheckedUpdateManyWithoutEssayInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  auditStatus?: Prisma.EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
  auditMsg?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  operatorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type EssayAuditSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  essayId?: boolean
  auditStatus?: boolean
  auditMsg?: boolean
  operatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  essay?: boolean | Prisma.EssayDefaultArgs<ExtArgs>
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["essayAudit"]>

export type EssayAuditSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  essayId?: boolean
  auditStatus?: boolean
  auditMsg?: boolean
  operatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  essay?: boolean | Prisma.EssayDefaultArgs<ExtArgs>
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["essayAudit"]>

export type EssayAuditSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  essayId?: boolean
  auditStatus?: boolean
  auditMsg?: boolean
  operatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  essay?: boolean | Prisma.EssayDefaultArgs<ExtArgs>
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["essayAudit"]>

export type EssayAuditSelectScalar = {
  id?: boolean
  essayId?: boolean
  auditStatus?: boolean
  auditMsg?: boolean
  operatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type EssayAuditOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "essayId" | "auditStatus" | "auditMsg" | "operatorId" | "createdAt" | "updatedAt", ExtArgs["result"]["essayAudit"]>
export type EssayAuditInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  essay?: boolean | Prisma.EssayDefaultArgs<ExtArgs>
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type EssayAuditIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  essay?: boolean | Prisma.EssayDefaultArgs<ExtArgs>
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type EssayAuditIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  essay?: boolean | Prisma.EssayDefaultArgs<ExtArgs>
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $EssayAuditPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EssayAudit"
  objects: {
    essay: Prisma.$EssayPayload<ExtArgs>
    operator: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    essayId: number
    auditStatus: $Enums.AuditStatus
    auditMsg: string | null
    operatorId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["essayAudit"]>
  composites: {}
}

export type EssayAuditGetPayload<S extends boolean | null | undefined | EssayAuditDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EssayAuditPayload, S>

export type EssayAuditCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EssayAuditFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EssayAuditCountAggregateInputType | true
  }

export interface EssayAuditDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EssayAudit'], meta: { name: 'EssayAudit' } }
  /**
   * Find zero or one EssayAudit that matches the filter.
   * @param {EssayAuditFindUniqueArgs} args - Arguments to find a EssayAudit
   * @example
   * // Get one EssayAudit
   * const essayAudit = await prisma.essayAudit.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EssayAuditFindUniqueArgs>(args: Prisma.SelectSubset<T, EssayAuditFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EssayAuditClient<runtime.Types.Result.GetResult<Prisma.$EssayAuditPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EssayAudit that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EssayAuditFindUniqueOrThrowArgs} args - Arguments to find a EssayAudit
   * @example
   * // Get one EssayAudit
   * const essayAudit = await prisma.essayAudit.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EssayAuditFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EssayAuditFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EssayAuditClient<runtime.Types.Result.GetResult<Prisma.$EssayAuditPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EssayAudit that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayAuditFindFirstArgs} args - Arguments to find a EssayAudit
   * @example
   * // Get one EssayAudit
   * const essayAudit = await prisma.essayAudit.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EssayAuditFindFirstArgs>(args?: Prisma.SelectSubset<T, EssayAuditFindFirstArgs<ExtArgs>>): Prisma.Prisma__EssayAuditClient<runtime.Types.Result.GetResult<Prisma.$EssayAuditPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EssayAudit that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayAuditFindFirstOrThrowArgs} args - Arguments to find a EssayAudit
   * @example
   * // Get one EssayAudit
   * const essayAudit = await prisma.essayAudit.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EssayAuditFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EssayAuditFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EssayAuditClient<runtime.Types.Result.GetResult<Prisma.$EssayAuditPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EssayAudits that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayAuditFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EssayAudits
   * const essayAudits = await prisma.essayAudit.findMany()
   * 
   * // Get first 10 EssayAudits
   * const essayAudits = await prisma.essayAudit.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const essayAuditWithIdOnly = await prisma.essayAudit.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EssayAuditFindManyArgs>(args?: Prisma.SelectSubset<T, EssayAuditFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EssayAuditPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EssayAudit.
   * @param {EssayAuditCreateArgs} args - Arguments to create a EssayAudit.
   * @example
   * // Create one EssayAudit
   * const EssayAudit = await prisma.essayAudit.create({
   *   data: {
   *     // ... data to create a EssayAudit
   *   }
   * })
   * 
   */
  create<T extends EssayAuditCreateArgs>(args: Prisma.SelectSubset<T, EssayAuditCreateArgs<ExtArgs>>): Prisma.Prisma__EssayAuditClient<runtime.Types.Result.GetResult<Prisma.$EssayAuditPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EssayAudits.
   * @param {EssayAuditCreateManyArgs} args - Arguments to create many EssayAudits.
   * @example
   * // Create many EssayAudits
   * const essayAudit = await prisma.essayAudit.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EssayAuditCreateManyArgs>(args?: Prisma.SelectSubset<T, EssayAuditCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many EssayAudits and returns the data saved in the database.
   * @param {EssayAuditCreateManyAndReturnArgs} args - Arguments to create many EssayAudits.
   * @example
   * // Create many EssayAudits
   * const essayAudit = await prisma.essayAudit.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many EssayAudits and only return the `id`
   * const essayAuditWithIdOnly = await prisma.essayAudit.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EssayAuditCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EssayAuditCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EssayAuditPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a EssayAudit.
   * @param {EssayAuditDeleteArgs} args - Arguments to delete one EssayAudit.
   * @example
   * // Delete one EssayAudit
   * const EssayAudit = await prisma.essayAudit.delete({
   *   where: {
   *     // ... filter to delete one EssayAudit
   *   }
   * })
   * 
   */
  delete<T extends EssayAuditDeleteArgs>(args: Prisma.SelectSubset<T, EssayAuditDeleteArgs<ExtArgs>>): Prisma.Prisma__EssayAuditClient<runtime.Types.Result.GetResult<Prisma.$EssayAuditPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EssayAudit.
   * @param {EssayAuditUpdateArgs} args - Arguments to update one EssayAudit.
   * @example
   * // Update one EssayAudit
   * const essayAudit = await prisma.essayAudit.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EssayAuditUpdateArgs>(args: Prisma.SelectSubset<T, EssayAuditUpdateArgs<ExtArgs>>): Prisma.Prisma__EssayAuditClient<runtime.Types.Result.GetResult<Prisma.$EssayAuditPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EssayAudits.
   * @param {EssayAuditDeleteManyArgs} args - Arguments to filter EssayAudits to delete.
   * @example
   * // Delete a few EssayAudits
   * const { count } = await prisma.essayAudit.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EssayAuditDeleteManyArgs>(args?: Prisma.SelectSubset<T, EssayAuditDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EssayAudits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayAuditUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EssayAudits
   * const essayAudit = await prisma.essayAudit.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EssayAuditUpdateManyArgs>(args: Prisma.SelectSubset<T, EssayAuditUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EssayAudits and returns the data updated in the database.
   * @param {EssayAuditUpdateManyAndReturnArgs} args - Arguments to update many EssayAudits.
   * @example
   * // Update many EssayAudits
   * const essayAudit = await prisma.essayAudit.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more EssayAudits and only return the `id`
   * const essayAuditWithIdOnly = await prisma.essayAudit.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EssayAuditUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EssayAuditUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EssayAuditPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one EssayAudit.
   * @param {EssayAuditUpsertArgs} args - Arguments to update or create a EssayAudit.
   * @example
   * // Update or create a EssayAudit
   * const essayAudit = await prisma.essayAudit.upsert({
   *   create: {
   *     // ... data to create a EssayAudit
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EssayAudit we want to update
   *   }
   * })
   */
  upsert<T extends EssayAuditUpsertArgs>(args: Prisma.SelectSubset<T, EssayAuditUpsertArgs<ExtArgs>>): Prisma.Prisma__EssayAuditClient<runtime.Types.Result.GetResult<Prisma.$EssayAuditPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EssayAudits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayAuditCountArgs} args - Arguments to filter EssayAudits to count.
   * @example
   * // Count the number of EssayAudits
   * const count = await prisma.essayAudit.count({
   *   where: {
   *     // ... the filter for the EssayAudits we want to count
   *   }
   * })
  **/
  count<T extends EssayAuditCountArgs>(
    args?: Prisma.Subset<T, EssayAuditCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EssayAuditCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EssayAudit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayAuditAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EssayAuditAggregateArgs>(args: Prisma.Subset<T, EssayAuditAggregateArgs>): Prisma.PrismaPromise<GetEssayAuditAggregateType<T>>

  /**
   * Group by EssayAudit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayAuditGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EssayAuditGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EssayAuditGroupByArgs['orderBy'] }
      : { orderBy?: EssayAuditGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EssayAuditGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEssayAuditGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EssayAudit model
 */
readonly fields: EssayAuditFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EssayAudit.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EssayAuditClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  essay<T extends Prisma.EssayDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EssayDefaultArgs<ExtArgs>>): Prisma.Prisma__EssayClient<runtime.Types.Result.GetResult<Prisma.$EssayPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  operator<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EssayAudit model
 */
export interface EssayAuditFieldRefs {
  readonly id: Prisma.FieldRef<"EssayAudit", 'Int'>
  readonly essayId: Prisma.FieldRef<"EssayAudit", 'Int'>
  readonly auditStatus: Prisma.FieldRef<"EssayAudit", 'AuditStatus'>
  readonly auditMsg: Prisma.FieldRef<"EssayAudit", 'String'>
  readonly operatorId: Prisma.FieldRef<"EssayAudit", 'String'>
  readonly createdAt: Prisma.FieldRef<"EssayAudit", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"EssayAudit", 'DateTime'>
}
    

// Custom InputTypes
/**
 * EssayAudit findUnique
 */
export type EssayAuditFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayAudit
   */
  select?: Prisma.EssayAuditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayAudit
   */
  omit?: Prisma.EssayAuditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayAuditInclude<ExtArgs> | null
  /**
   * Filter, which EssayAudit to fetch.
   */
  where: Prisma.EssayAuditWhereUniqueInput
}

/**
 * EssayAudit findUniqueOrThrow
 */
export type EssayAuditFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayAudit
   */
  select?: Prisma.EssayAuditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayAudit
   */
  omit?: Prisma.EssayAuditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayAuditInclude<ExtArgs> | null
  /**
   * Filter, which EssayAudit to fetch.
   */
  where: Prisma.EssayAuditWhereUniqueInput
}

/**
 * EssayAudit findFirst
 */
export type EssayAuditFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayAudit
   */
  select?: Prisma.EssayAuditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayAudit
   */
  omit?: Prisma.EssayAuditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayAuditInclude<ExtArgs> | null
  /**
   * Filter, which EssayAudit to fetch.
   */
  where?: Prisma.EssayAuditWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EssayAudits to fetch.
   */
  orderBy?: Prisma.EssayAuditOrderByWithRelationInput | Prisma.EssayAuditOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EssayAudits.
   */
  cursor?: Prisma.EssayAuditWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EssayAudits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EssayAudits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EssayAudits.
   */
  distinct?: Prisma.EssayAuditScalarFieldEnum | Prisma.EssayAuditScalarFieldEnum[]
}

/**
 * EssayAudit findFirstOrThrow
 */
export type EssayAuditFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayAudit
   */
  select?: Prisma.EssayAuditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayAudit
   */
  omit?: Prisma.EssayAuditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayAuditInclude<ExtArgs> | null
  /**
   * Filter, which EssayAudit to fetch.
   */
  where?: Prisma.EssayAuditWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EssayAudits to fetch.
   */
  orderBy?: Prisma.EssayAuditOrderByWithRelationInput | Prisma.EssayAuditOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EssayAudits.
   */
  cursor?: Prisma.EssayAuditWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EssayAudits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EssayAudits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EssayAudits.
   */
  distinct?: Prisma.EssayAuditScalarFieldEnum | Prisma.EssayAuditScalarFieldEnum[]
}

/**
 * EssayAudit findMany
 */
export type EssayAuditFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayAudit
   */
  select?: Prisma.EssayAuditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayAudit
   */
  omit?: Prisma.EssayAuditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayAuditInclude<ExtArgs> | null
  /**
   * Filter, which EssayAudits to fetch.
   */
  where?: Prisma.EssayAuditWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EssayAudits to fetch.
   */
  orderBy?: Prisma.EssayAuditOrderByWithRelationInput | Prisma.EssayAuditOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EssayAudits.
   */
  cursor?: Prisma.EssayAuditWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EssayAudits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EssayAudits.
   */
  skip?: number
  distinct?: Prisma.EssayAuditScalarFieldEnum | Prisma.EssayAuditScalarFieldEnum[]
}

/**
 * EssayAudit create
 */
export type EssayAuditCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayAudit
   */
  select?: Prisma.EssayAuditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayAudit
   */
  omit?: Prisma.EssayAuditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayAuditInclude<ExtArgs> | null
  /**
   * The data needed to create a EssayAudit.
   */
  data: Prisma.XOR<Prisma.EssayAuditCreateInput, Prisma.EssayAuditUncheckedCreateInput>
}

/**
 * EssayAudit createMany
 */
export type EssayAuditCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EssayAudits.
   */
  data: Prisma.EssayAuditCreateManyInput | Prisma.EssayAuditCreateManyInput[]
}

/**
 * EssayAudit createManyAndReturn
 */
export type EssayAuditCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayAudit
   */
  select?: Prisma.EssayAuditSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EssayAudit
   */
  omit?: Prisma.EssayAuditOmit<ExtArgs> | null
  /**
   * The data used to create many EssayAudits.
   */
  data: Prisma.EssayAuditCreateManyInput | Prisma.EssayAuditCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayAuditIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * EssayAudit update
 */
export type EssayAuditUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayAudit
   */
  select?: Prisma.EssayAuditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayAudit
   */
  omit?: Prisma.EssayAuditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayAuditInclude<ExtArgs> | null
  /**
   * The data needed to update a EssayAudit.
   */
  data: Prisma.XOR<Prisma.EssayAuditUpdateInput, Prisma.EssayAuditUncheckedUpdateInput>
  /**
   * Choose, which EssayAudit to update.
   */
  where: Prisma.EssayAuditWhereUniqueInput
}

/**
 * EssayAudit updateMany
 */
export type EssayAuditUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EssayAudits.
   */
  data: Prisma.XOR<Prisma.EssayAuditUpdateManyMutationInput, Prisma.EssayAuditUncheckedUpdateManyInput>
  /**
   * Filter which EssayAudits to update
   */
  where?: Prisma.EssayAuditWhereInput
  /**
   * Limit how many EssayAudits to update.
   */
  limit?: number
}

/**
 * EssayAudit updateManyAndReturn
 */
export type EssayAuditUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayAudit
   */
  select?: Prisma.EssayAuditSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EssayAudit
   */
  omit?: Prisma.EssayAuditOmit<ExtArgs> | null
  /**
   * The data used to update EssayAudits.
   */
  data: Prisma.XOR<Prisma.EssayAuditUpdateManyMutationInput, Prisma.EssayAuditUncheckedUpdateManyInput>
  /**
   * Filter which EssayAudits to update
   */
  where?: Prisma.EssayAuditWhereInput
  /**
   * Limit how many EssayAudits to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayAuditIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * EssayAudit upsert
 */
export type EssayAuditUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayAudit
   */
  select?: Prisma.EssayAuditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayAudit
   */
  omit?: Prisma.EssayAuditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayAuditInclude<ExtArgs> | null
  /**
   * The filter to search for the EssayAudit to update in case it exists.
   */
  where: Prisma.EssayAuditWhereUniqueInput
  /**
   * In case the EssayAudit found by the `where` argument doesn't exist, create a new EssayAudit with this data.
   */
  create: Prisma.XOR<Prisma.EssayAuditCreateInput, Prisma.EssayAuditUncheckedCreateInput>
  /**
   * In case the EssayAudit was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EssayAuditUpdateInput, Prisma.EssayAuditUncheckedUpdateInput>
}

/**
 * EssayAudit delete
 */
export type EssayAuditDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayAudit
   */
  select?: Prisma.EssayAuditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayAudit
   */
  omit?: Prisma.EssayAuditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayAuditInclude<ExtArgs> | null
  /**
   * Filter which EssayAudit to delete.
   */
  where: Prisma.EssayAuditWhereUniqueInput
}

/**
 * EssayAudit deleteMany
 */
export type EssayAuditDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EssayAudits to delete
   */
  where?: Prisma.EssayAuditWhereInput
  /**
   * Limit how many EssayAudits to delete.
   */
  limit?: number
}

/**
 * EssayAudit without action
 */
export type EssayAuditDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayAudit
   */
  select?: Prisma.EssayAuditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayAudit
   */
  omit?: Prisma.EssayAuditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayAuditInclude<ExtArgs> | null
}
