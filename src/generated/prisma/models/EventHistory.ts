
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `EventHistory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model EventHistory
 * 
 */
export type EventHistoryModel = runtime.Types.Result.DefaultSelection<Prisma.$EventHistoryPayload>

export type AggregateEventHistory = {
  _count: EventHistoryCountAggregateOutputType | null
  _avg: EventHistoryAvgAggregateOutputType | null
  _sum: EventHistorySumAggregateOutputType | null
  _min: EventHistoryMinAggregateOutputType | null
  _max: EventHistoryMaxAggregateOutputType | null
}

export type EventHistoryAvgAggregateOutputType = {
  id: number | null
}

export type EventHistorySumAggregateOutputType = {
  id: number | null
}

export type EventHistoryMinAggregateOutputType = {
  id: number | null
  title: string | null
  description: string | null
  content: string | null
  banner: string | null
  operatorId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EventHistoryMaxAggregateOutputType = {
  id: number | null
  title: string | null
  description: string | null
  content: string | null
  banner: string | null
  operatorId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EventHistoryCountAggregateOutputType = {
  id: number
  title: number
  description: number
  content: number
  banner: number
  operatorId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type EventHistoryAvgAggregateInputType = {
  id?: true
}

export type EventHistorySumAggregateInputType = {
  id?: true
}

export type EventHistoryMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  content?: true
  banner?: true
  operatorId?: true
  createdAt?: true
  updatedAt?: true
}

export type EventHistoryMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  content?: true
  banner?: true
  operatorId?: true
  createdAt?: true
  updatedAt?: true
}

export type EventHistoryCountAggregateInputType = {
  id?: true
  title?: true
  description?: true
  content?: true
  banner?: true
  operatorId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type EventHistoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EventHistory to aggregate.
   */
  where?: Prisma.EventHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EventHistories to fetch.
   */
  orderBy?: Prisma.EventHistoryOrderByWithRelationInput | Prisma.EventHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EventHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EventHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EventHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EventHistories
  **/
  _count?: true | EventHistoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: EventHistoryAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: EventHistorySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EventHistoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EventHistoryMaxAggregateInputType
}

export type GetEventHistoryAggregateType<T extends EventHistoryAggregateArgs> = {
      [P in keyof T & keyof AggregateEventHistory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEventHistory[P]>
    : Prisma.GetScalarType<T[P], AggregateEventHistory[P]>
}




export type EventHistoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EventHistoryWhereInput
  orderBy?: Prisma.EventHistoryOrderByWithAggregationInput | Prisma.EventHistoryOrderByWithAggregationInput[]
  by: Prisma.EventHistoryScalarFieldEnum[] | Prisma.EventHistoryScalarFieldEnum
  having?: Prisma.EventHistoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EventHistoryCountAggregateInputType | true
  _avg?: EventHistoryAvgAggregateInputType
  _sum?: EventHistorySumAggregateInputType
  _min?: EventHistoryMinAggregateInputType
  _max?: EventHistoryMaxAggregateInputType
}

export type EventHistoryGroupByOutputType = {
  id: number
  title: string
  description: string
  content: string
  banner: string
  operatorId: string
  createdAt: Date
  updatedAt: Date
  _count: EventHistoryCountAggregateOutputType | null
  _avg: EventHistoryAvgAggregateOutputType | null
  _sum: EventHistorySumAggregateOutputType | null
  _min: EventHistoryMinAggregateOutputType | null
  _max: EventHistoryMaxAggregateOutputType | null
}

type GetEventHistoryGroupByPayload<T extends EventHistoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EventHistoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EventHistoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EventHistoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EventHistoryGroupByOutputType[P]>
      }
    >
  > 



export type EventHistoryWhereInput = {
  AND?: Prisma.EventHistoryWhereInput | Prisma.EventHistoryWhereInput[]
  OR?: Prisma.EventHistoryWhereInput[]
  NOT?: Prisma.EventHistoryWhereInput | Prisma.EventHistoryWhereInput[]
  id?: Prisma.IntFilter<"EventHistory"> | number
  title?: Prisma.StringFilter<"EventHistory"> | string
  description?: Prisma.StringFilter<"EventHistory"> | string
  content?: Prisma.StringFilter<"EventHistory"> | string
  banner?: Prisma.StringFilter<"EventHistory"> | string
  operatorId?: Prisma.StringFilter<"EventHistory"> | string
  createdAt?: Prisma.DateTimeFilter<"EventHistory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EventHistory"> | Date | string
  operator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type EventHistoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  content?: Prisma.SortOrder
  banner?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  operator?: Prisma.UserOrderByWithRelationInput
}

export type EventHistoryWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.EventHistoryWhereInput | Prisma.EventHistoryWhereInput[]
  OR?: Prisma.EventHistoryWhereInput[]
  NOT?: Prisma.EventHistoryWhereInput | Prisma.EventHistoryWhereInput[]
  title?: Prisma.StringFilter<"EventHistory"> | string
  description?: Prisma.StringFilter<"EventHistory"> | string
  content?: Prisma.StringFilter<"EventHistory"> | string
  banner?: Prisma.StringFilter<"EventHistory"> | string
  operatorId?: Prisma.StringFilter<"EventHistory"> | string
  createdAt?: Prisma.DateTimeFilter<"EventHistory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EventHistory"> | Date | string
  operator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type EventHistoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  content?: Prisma.SortOrder
  banner?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.EventHistoryCountOrderByAggregateInput
  _avg?: Prisma.EventHistoryAvgOrderByAggregateInput
  _max?: Prisma.EventHistoryMaxOrderByAggregateInput
  _min?: Prisma.EventHistoryMinOrderByAggregateInput
  _sum?: Prisma.EventHistorySumOrderByAggregateInput
}

export type EventHistoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.EventHistoryScalarWhereWithAggregatesInput | Prisma.EventHistoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.EventHistoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EventHistoryScalarWhereWithAggregatesInput | Prisma.EventHistoryScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"EventHistory"> | number
  title?: Prisma.StringWithAggregatesFilter<"EventHistory"> | string
  description?: Prisma.StringWithAggregatesFilter<"EventHistory"> | string
  content?: Prisma.StringWithAggregatesFilter<"EventHistory"> | string
  banner?: Prisma.StringWithAggregatesFilter<"EventHistory"> | string
  operatorId?: Prisma.StringWithAggregatesFilter<"EventHistory"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"EventHistory"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"EventHistory"> | Date | string
}

export type EventHistoryCreateInput = {
  title: string
  description: string
  content: string
  banner: string
  createdAt?: Date | string
  updatedAt?: Date | string
  operator: Prisma.UserCreateNestedOneWithoutEventHistoryInput
}

export type EventHistoryUncheckedCreateInput = {
  id?: number
  title: string
  description: string
  content: string
  banner: string
  operatorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EventHistoryUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  banner?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  operator?: Prisma.UserUpdateOneRequiredWithoutEventHistoryNestedInput
}

export type EventHistoryUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  banner?: Prisma.StringFieldUpdateOperationsInput | string
  operatorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventHistoryCreateManyInput = {
  id?: number
  title: string
  description: string
  content: string
  banner: string
  operatorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EventHistoryUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  banner?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventHistoryUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  banner?: Prisma.StringFieldUpdateOperationsInput | string
  operatorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventHistoryListRelationFilter = {
  every?: Prisma.EventHistoryWhereInput
  some?: Prisma.EventHistoryWhereInput
  none?: Prisma.EventHistoryWhereInput
}

export type EventHistoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EventHistoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  content?: Prisma.SortOrder
  banner?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EventHistoryAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type EventHistoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  content?: Prisma.SortOrder
  banner?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EventHistoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  content?: Prisma.SortOrder
  banner?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EventHistorySumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type EventHistoryCreateNestedManyWithoutOperatorInput = {
  create?: Prisma.XOR<Prisma.EventHistoryCreateWithoutOperatorInput, Prisma.EventHistoryUncheckedCreateWithoutOperatorInput> | Prisma.EventHistoryCreateWithoutOperatorInput[] | Prisma.EventHistoryUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.EventHistoryCreateOrConnectWithoutOperatorInput | Prisma.EventHistoryCreateOrConnectWithoutOperatorInput[]
  createMany?: Prisma.EventHistoryCreateManyOperatorInputEnvelope
  connect?: Prisma.EventHistoryWhereUniqueInput | Prisma.EventHistoryWhereUniqueInput[]
}

export type EventHistoryUncheckedCreateNestedManyWithoutOperatorInput = {
  create?: Prisma.XOR<Prisma.EventHistoryCreateWithoutOperatorInput, Prisma.EventHistoryUncheckedCreateWithoutOperatorInput> | Prisma.EventHistoryCreateWithoutOperatorInput[] | Prisma.EventHistoryUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.EventHistoryCreateOrConnectWithoutOperatorInput | Prisma.EventHistoryCreateOrConnectWithoutOperatorInput[]
  createMany?: Prisma.EventHistoryCreateManyOperatorInputEnvelope
  connect?: Prisma.EventHistoryWhereUniqueInput | Prisma.EventHistoryWhereUniqueInput[]
}

export type EventHistoryUpdateManyWithoutOperatorNestedInput = {
  create?: Prisma.XOR<Prisma.EventHistoryCreateWithoutOperatorInput, Prisma.EventHistoryUncheckedCreateWithoutOperatorInput> | Prisma.EventHistoryCreateWithoutOperatorInput[] | Prisma.EventHistoryUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.EventHistoryCreateOrConnectWithoutOperatorInput | Prisma.EventHistoryCreateOrConnectWithoutOperatorInput[]
  upsert?: Prisma.EventHistoryUpsertWithWhereUniqueWithoutOperatorInput | Prisma.EventHistoryUpsertWithWhereUniqueWithoutOperatorInput[]
  createMany?: Prisma.EventHistoryCreateManyOperatorInputEnvelope
  set?: Prisma.EventHistoryWhereUniqueInput | Prisma.EventHistoryWhereUniqueInput[]
  disconnect?: Prisma.EventHistoryWhereUniqueInput | Prisma.EventHistoryWhereUniqueInput[]
  delete?: Prisma.EventHistoryWhereUniqueInput | Prisma.EventHistoryWhereUniqueInput[]
  connect?: Prisma.EventHistoryWhereUniqueInput | Prisma.EventHistoryWhereUniqueInput[]
  update?: Prisma.EventHistoryUpdateWithWhereUniqueWithoutOperatorInput | Prisma.EventHistoryUpdateWithWhereUniqueWithoutOperatorInput[]
  updateMany?: Prisma.EventHistoryUpdateManyWithWhereWithoutOperatorInput | Prisma.EventHistoryUpdateManyWithWhereWithoutOperatorInput[]
  deleteMany?: Prisma.EventHistoryScalarWhereInput | Prisma.EventHistoryScalarWhereInput[]
}

export type EventHistoryUncheckedUpdateManyWithoutOperatorNestedInput = {
  create?: Prisma.XOR<Prisma.EventHistoryCreateWithoutOperatorInput, Prisma.EventHistoryUncheckedCreateWithoutOperatorInput> | Prisma.EventHistoryCreateWithoutOperatorInput[] | Prisma.EventHistoryUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.EventHistoryCreateOrConnectWithoutOperatorInput | Prisma.EventHistoryCreateOrConnectWithoutOperatorInput[]
  upsert?: Prisma.EventHistoryUpsertWithWhereUniqueWithoutOperatorInput | Prisma.EventHistoryUpsertWithWhereUniqueWithoutOperatorInput[]
  createMany?: Prisma.EventHistoryCreateManyOperatorInputEnvelope
  set?: Prisma.EventHistoryWhereUniqueInput | Prisma.EventHistoryWhereUniqueInput[]
  disconnect?: Prisma.EventHistoryWhereUniqueInput | Prisma.EventHistoryWhereUniqueInput[]
  delete?: Prisma.EventHistoryWhereUniqueInput | Prisma.EventHistoryWhereUniqueInput[]
  connect?: Prisma.EventHistoryWhereUniqueInput | Prisma.EventHistoryWhereUniqueInput[]
  update?: Prisma.EventHistoryUpdateWithWhereUniqueWithoutOperatorInput | Prisma.EventHistoryUpdateWithWhereUniqueWithoutOperatorInput[]
  updateMany?: Prisma.EventHistoryUpdateManyWithWhereWithoutOperatorInput | Prisma.EventHistoryUpdateManyWithWhereWithoutOperatorInput[]
  deleteMany?: Prisma.EventHistoryScalarWhereInput | Prisma.EventHistoryScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type EventHistoryCreateWithoutOperatorInput = {
  title: string
  description: string
  content: string
  banner: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EventHistoryUncheckedCreateWithoutOperatorInput = {
  id?: number
  title: string
  description: string
  content: string
  banner: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EventHistoryCreateOrConnectWithoutOperatorInput = {
  where: Prisma.EventHistoryWhereUniqueInput
  create: Prisma.XOR<Prisma.EventHistoryCreateWithoutOperatorInput, Prisma.EventHistoryUncheckedCreateWithoutOperatorInput>
}

export type EventHistoryCreateManyOperatorInputEnvelope = {
  data: Prisma.EventHistoryCreateManyOperatorInput | Prisma.EventHistoryCreateManyOperatorInput[]
}

export type EventHistoryUpsertWithWhereUniqueWithoutOperatorInput = {
  where: Prisma.EventHistoryWhereUniqueInput
  update: Prisma.XOR<Prisma.EventHistoryUpdateWithoutOperatorInput, Prisma.EventHistoryUncheckedUpdateWithoutOperatorInput>
  create: Prisma.XOR<Prisma.EventHistoryCreateWithoutOperatorInput, Prisma.EventHistoryUncheckedCreateWithoutOperatorInput>
}

export type EventHistoryUpdateWithWhereUniqueWithoutOperatorInput = {
  where: Prisma.EventHistoryWhereUniqueInput
  data: Prisma.XOR<Prisma.EventHistoryUpdateWithoutOperatorInput, Prisma.EventHistoryUncheckedUpdateWithoutOperatorInput>
}

export type EventHistoryUpdateManyWithWhereWithoutOperatorInput = {
  where: Prisma.EventHistoryScalarWhereInput
  data: Prisma.XOR<Prisma.EventHistoryUpdateManyMutationInput, Prisma.EventHistoryUncheckedUpdateManyWithoutOperatorInput>
}

export type EventHistoryScalarWhereInput = {
  AND?: Prisma.EventHistoryScalarWhereInput | Prisma.EventHistoryScalarWhereInput[]
  OR?: Prisma.EventHistoryScalarWhereInput[]
  NOT?: Prisma.EventHistoryScalarWhereInput | Prisma.EventHistoryScalarWhereInput[]
  id?: Prisma.IntFilter<"EventHistory"> | number
  title?: Prisma.StringFilter<"EventHistory"> | string
  description?: Prisma.StringFilter<"EventHistory"> | string
  content?: Prisma.StringFilter<"EventHistory"> | string
  banner?: Prisma.StringFilter<"EventHistory"> | string
  operatorId?: Prisma.StringFilter<"EventHistory"> | string
  createdAt?: Prisma.DateTimeFilter<"EventHistory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EventHistory"> | Date | string
}

export type EventHistoryCreateManyOperatorInput = {
  id?: number
  title: string
  description: string
  content: string
  banner: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EventHistoryUpdateWithoutOperatorInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  banner?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventHistoryUncheckedUpdateWithoutOperatorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  banner?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventHistoryUncheckedUpdateManyWithoutOperatorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  banner?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type EventHistorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  content?: boolean
  banner?: boolean
  operatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["eventHistory"]>

export type EventHistorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  content?: boolean
  banner?: boolean
  operatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["eventHistory"]>

export type EventHistorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  content?: boolean
  banner?: boolean
  operatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["eventHistory"]>

export type EventHistorySelectScalar = {
  id?: boolean
  title?: boolean
  description?: boolean
  content?: boolean
  banner?: boolean
  operatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type EventHistoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "description" | "content" | "banner" | "operatorId" | "createdAt" | "updatedAt", ExtArgs["result"]["eventHistory"]>
export type EventHistoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type EventHistoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type EventHistoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $EventHistoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EventHistory"
  objects: {
    operator: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    title: string
    description: string
    content: string
    banner: string
    operatorId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["eventHistory"]>
  composites: {}
}

export type EventHistoryGetPayload<S extends boolean | null | undefined | EventHistoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EventHistoryPayload, S>

export type EventHistoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EventHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EventHistoryCountAggregateInputType | true
  }

export interface EventHistoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventHistory'], meta: { name: 'EventHistory' } }
  /**
   * Find zero or one EventHistory that matches the filter.
   * @param {EventHistoryFindUniqueArgs} args - Arguments to find a EventHistory
   * @example
   * // Get one EventHistory
   * const eventHistory = await prisma.eventHistory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EventHistoryFindUniqueArgs>(args: Prisma.SelectSubset<T, EventHistoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EventHistoryClient<runtime.Types.Result.GetResult<Prisma.$EventHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EventHistory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EventHistoryFindUniqueOrThrowArgs} args - Arguments to find a EventHistory
   * @example
   * // Get one EventHistory
   * const eventHistory = await prisma.eventHistory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EventHistoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EventHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EventHistoryClient<runtime.Types.Result.GetResult<Prisma.$EventHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EventHistory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventHistoryFindFirstArgs} args - Arguments to find a EventHistory
   * @example
   * // Get one EventHistory
   * const eventHistory = await prisma.eventHistory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EventHistoryFindFirstArgs>(args?: Prisma.SelectSubset<T, EventHistoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__EventHistoryClient<runtime.Types.Result.GetResult<Prisma.$EventHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EventHistory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventHistoryFindFirstOrThrowArgs} args - Arguments to find a EventHistory
   * @example
   * // Get one EventHistory
   * const eventHistory = await prisma.eventHistory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EventHistoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EventHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EventHistoryClient<runtime.Types.Result.GetResult<Prisma.$EventHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EventHistories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EventHistories
   * const eventHistories = await prisma.eventHistory.findMany()
   * 
   * // Get first 10 EventHistories
   * const eventHistories = await prisma.eventHistory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const eventHistoryWithIdOnly = await prisma.eventHistory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EventHistoryFindManyArgs>(args?: Prisma.SelectSubset<T, EventHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EventHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EventHistory.
   * @param {EventHistoryCreateArgs} args - Arguments to create a EventHistory.
   * @example
   * // Create one EventHistory
   * const EventHistory = await prisma.eventHistory.create({
   *   data: {
   *     // ... data to create a EventHistory
   *   }
   * })
   * 
   */
  create<T extends EventHistoryCreateArgs>(args: Prisma.SelectSubset<T, EventHistoryCreateArgs<ExtArgs>>): Prisma.Prisma__EventHistoryClient<runtime.Types.Result.GetResult<Prisma.$EventHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EventHistories.
   * @param {EventHistoryCreateManyArgs} args - Arguments to create many EventHistories.
   * @example
   * // Create many EventHistories
   * const eventHistory = await prisma.eventHistory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EventHistoryCreateManyArgs>(args?: Prisma.SelectSubset<T, EventHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many EventHistories and returns the data saved in the database.
   * @param {EventHistoryCreateManyAndReturnArgs} args - Arguments to create many EventHistories.
   * @example
   * // Create many EventHistories
   * const eventHistory = await prisma.eventHistory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many EventHistories and only return the `id`
   * const eventHistoryWithIdOnly = await prisma.eventHistory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EventHistoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EventHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EventHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a EventHistory.
   * @param {EventHistoryDeleteArgs} args - Arguments to delete one EventHistory.
   * @example
   * // Delete one EventHistory
   * const EventHistory = await prisma.eventHistory.delete({
   *   where: {
   *     // ... filter to delete one EventHistory
   *   }
   * })
   * 
   */
  delete<T extends EventHistoryDeleteArgs>(args: Prisma.SelectSubset<T, EventHistoryDeleteArgs<ExtArgs>>): Prisma.Prisma__EventHistoryClient<runtime.Types.Result.GetResult<Prisma.$EventHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EventHistory.
   * @param {EventHistoryUpdateArgs} args - Arguments to update one EventHistory.
   * @example
   * // Update one EventHistory
   * const eventHistory = await prisma.eventHistory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EventHistoryUpdateArgs>(args: Prisma.SelectSubset<T, EventHistoryUpdateArgs<ExtArgs>>): Prisma.Prisma__EventHistoryClient<runtime.Types.Result.GetResult<Prisma.$EventHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EventHistories.
   * @param {EventHistoryDeleteManyArgs} args - Arguments to filter EventHistories to delete.
   * @example
   * // Delete a few EventHistories
   * const { count } = await prisma.eventHistory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EventHistoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, EventHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EventHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventHistoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EventHistories
   * const eventHistory = await prisma.eventHistory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EventHistoryUpdateManyArgs>(args: Prisma.SelectSubset<T, EventHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EventHistories and returns the data updated in the database.
   * @param {EventHistoryUpdateManyAndReturnArgs} args - Arguments to update many EventHistories.
   * @example
   * // Update many EventHistories
   * const eventHistory = await prisma.eventHistory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more EventHistories and only return the `id`
   * const eventHistoryWithIdOnly = await prisma.eventHistory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EventHistoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EventHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EventHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one EventHistory.
   * @param {EventHistoryUpsertArgs} args - Arguments to update or create a EventHistory.
   * @example
   * // Update or create a EventHistory
   * const eventHistory = await prisma.eventHistory.upsert({
   *   create: {
   *     // ... data to create a EventHistory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EventHistory we want to update
   *   }
   * })
   */
  upsert<T extends EventHistoryUpsertArgs>(args: Prisma.SelectSubset<T, EventHistoryUpsertArgs<ExtArgs>>): Prisma.Prisma__EventHistoryClient<runtime.Types.Result.GetResult<Prisma.$EventHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EventHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventHistoryCountArgs} args - Arguments to filter EventHistories to count.
   * @example
   * // Count the number of EventHistories
   * const count = await prisma.eventHistory.count({
   *   where: {
   *     // ... the filter for the EventHistories we want to count
   *   }
   * })
  **/
  count<T extends EventHistoryCountArgs>(
    args?: Prisma.Subset<T, EventHistoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EventHistoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EventHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EventHistoryAggregateArgs>(args: Prisma.Subset<T, EventHistoryAggregateArgs>): Prisma.PrismaPromise<GetEventHistoryAggregateType<T>>

  /**
   * Group by EventHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventHistoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EventHistoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EventHistoryGroupByArgs['orderBy'] }
      : { orderBy?: EventHistoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EventHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EventHistory model
 */
readonly fields: EventHistoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EventHistory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EventHistoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  operator<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EventHistory model
 */
export interface EventHistoryFieldRefs {
  readonly id: Prisma.FieldRef<"EventHistory", 'Int'>
  readonly title: Prisma.FieldRef<"EventHistory", 'String'>
  readonly description: Prisma.FieldRef<"EventHistory", 'String'>
  readonly content: Prisma.FieldRef<"EventHistory", 'String'>
  readonly banner: Prisma.FieldRef<"EventHistory", 'String'>
  readonly operatorId: Prisma.FieldRef<"EventHistory", 'String'>
  readonly createdAt: Prisma.FieldRef<"EventHistory", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"EventHistory", 'DateTime'>
}
    

// Custom InputTypes
/**
 * EventHistory findUnique
 */
export type EventHistoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventHistory
   */
  select?: Prisma.EventHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventHistory
   */
  omit?: Prisma.EventHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventHistoryInclude<ExtArgs> | null
  /**
   * Filter, which EventHistory to fetch.
   */
  where: Prisma.EventHistoryWhereUniqueInput
}

/**
 * EventHistory findUniqueOrThrow
 */
export type EventHistoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventHistory
   */
  select?: Prisma.EventHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventHistory
   */
  omit?: Prisma.EventHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventHistoryInclude<ExtArgs> | null
  /**
   * Filter, which EventHistory to fetch.
   */
  where: Prisma.EventHistoryWhereUniqueInput
}

/**
 * EventHistory findFirst
 */
export type EventHistoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventHistory
   */
  select?: Prisma.EventHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventHistory
   */
  omit?: Prisma.EventHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventHistoryInclude<ExtArgs> | null
  /**
   * Filter, which EventHistory to fetch.
   */
  where?: Prisma.EventHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EventHistories to fetch.
   */
  orderBy?: Prisma.EventHistoryOrderByWithRelationInput | Prisma.EventHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EventHistories.
   */
  cursor?: Prisma.EventHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EventHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EventHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EventHistories.
   */
  distinct?: Prisma.EventHistoryScalarFieldEnum | Prisma.EventHistoryScalarFieldEnum[]
}

/**
 * EventHistory findFirstOrThrow
 */
export type EventHistoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventHistory
   */
  select?: Prisma.EventHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventHistory
   */
  omit?: Prisma.EventHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventHistoryInclude<ExtArgs> | null
  /**
   * Filter, which EventHistory to fetch.
   */
  where?: Prisma.EventHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EventHistories to fetch.
   */
  orderBy?: Prisma.EventHistoryOrderByWithRelationInput | Prisma.EventHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EventHistories.
   */
  cursor?: Prisma.EventHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EventHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EventHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EventHistories.
   */
  distinct?: Prisma.EventHistoryScalarFieldEnum | Prisma.EventHistoryScalarFieldEnum[]
}

/**
 * EventHistory findMany
 */
export type EventHistoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventHistory
   */
  select?: Prisma.EventHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventHistory
   */
  omit?: Prisma.EventHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventHistoryInclude<ExtArgs> | null
  /**
   * Filter, which EventHistories to fetch.
   */
  where?: Prisma.EventHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EventHistories to fetch.
   */
  orderBy?: Prisma.EventHistoryOrderByWithRelationInput | Prisma.EventHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EventHistories.
   */
  cursor?: Prisma.EventHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EventHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EventHistories.
   */
  skip?: number
  distinct?: Prisma.EventHistoryScalarFieldEnum | Prisma.EventHistoryScalarFieldEnum[]
}

/**
 * EventHistory create
 */
export type EventHistoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventHistory
   */
  select?: Prisma.EventHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventHistory
   */
  omit?: Prisma.EventHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventHistoryInclude<ExtArgs> | null
  /**
   * The data needed to create a EventHistory.
   */
  data: Prisma.XOR<Prisma.EventHistoryCreateInput, Prisma.EventHistoryUncheckedCreateInput>
}

/**
 * EventHistory createMany
 */
export type EventHistoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EventHistories.
   */
  data: Prisma.EventHistoryCreateManyInput | Prisma.EventHistoryCreateManyInput[]
}

/**
 * EventHistory createManyAndReturn
 */
export type EventHistoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventHistory
   */
  select?: Prisma.EventHistorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EventHistory
   */
  omit?: Prisma.EventHistoryOmit<ExtArgs> | null
  /**
   * The data used to create many EventHistories.
   */
  data: Prisma.EventHistoryCreateManyInput | Prisma.EventHistoryCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventHistoryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * EventHistory update
 */
export type EventHistoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventHistory
   */
  select?: Prisma.EventHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventHistory
   */
  omit?: Prisma.EventHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventHistoryInclude<ExtArgs> | null
  /**
   * The data needed to update a EventHistory.
   */
  data: Prisma.XOR<Prisma.EventHistoryUpdateInput, Prisma.EventHistoryUncheckedUpdateInput>
  /**
   * Choose, which EventHistory to update.
   */
  where: Prisma.EventHistoryWhereUniqueInput
}

/**
 * EventHistory updateMany
 */
export type EventHistoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EventHistories.
   */
  data: Prisma.XOR<Prisma.EventHistoryUpdateManyMutationInput, Prisma.EventHistoryUncheckedUpdateManyInput>
  /**
   * Filter which EventHistories to update
   */
  where?: Prisma.EventHistoryWhereInput
  /**
   * Limit how many EventHistories to update.
   */
  limit?: number
}

/**
 * EventHistory updateManyAndReturn
 */
export type EventHistoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventHistory
   */
  select?: Prisma.EventHistorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EventHistory
   */
  omit?: Prisma.EventHistoryOmit<ExtArgs> | null
  /**
   * The data used to update EventHistories.
   */
  data: Prisma.XOR<Prisma.EventHistoryUpdateManyMutationInput, Prisma.EventHistoryUncheckedUpdateManyInput>
  /**
   * Filter which EventHistories to update
   */
  where?: Prisma.EventHistoryWhereInput
  /**
   * Limit how many EventHistories to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * EventHistory upsert
 */
export type EventHistoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventHistory
   */
  select?: Prisma.EventHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventHistory
   */
  omit?: Prisma.EventHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventHistoryInclude<ExtArgs> | null
  /**
   * The filter to search for the EventHistory to update in case it exists.
   */
  where: Prisma.EventHistoryWhereUniqueInput
  /**
   * In case the EventHistory found by the `where` argument doesn't exist, create a new EventHistory with this data.
   */
  create: Prisma.XOR<Prisma.EventHistoryCreateInput, Prisma.EventHistoryUncheckedCreateInput>
  /**
   * In case the EventHistory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EventHistoryUpdateInput, Prisma.EventHistoryUncheckedUpdateInput>
}

/**
 * EventHistory delete
 */
export type EventHistoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventHistory
   */
  select?: Prisma.EventHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventHistory
   */
  omit?: Prisma.EventHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventHistoryInclude<ExtArgs> | null
  /**
   * Filter which EventHistory to delete.
   */
  where: Prisma.EventHistoryWhereUniqueInput
}

/**
 * EventHistory deleteMany
 */
export type EventHistoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EventHistories to delete
   */
  where?: Prisma.EventHistoryWhereInput
  /**
   * Limit how many EventHistories to delete.
   */
  limit?: number
}

/**
 * EventHistory without action
 */
export type EventHistoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventHistory
   */
  select?: Prisma.EventHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventHistory
   */
  omit?: Prisma.EventHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventHistoryInclude<ExtArgs> | null
}
