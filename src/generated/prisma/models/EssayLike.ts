
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `EssayLike` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model EssayLike
 * 
 */
export type EssayLikeModel = runtime.Types.Result.DefaultSelection<Prisma.$EssayLikePayload>

export type AggregateEssayLike = {
  _count: EssayLikeCountAggregateOutputType | null
  _avg: EssayLikeAvgAggregateOutputType | null
  _sum: EssayLikeSumAggregateOutputType | null
  _min: EssayLikeMinAggregateOutputType | null
  _max: EssayLikeMaxAggregateOutputType | null
}

export type EssayLikeAvgAggregateOutputType = {
  id: number | null
  essayId: number | null
}

export type EssayLikeSumAggregateOutputType = {
  id: number | null
  essayId: number | null
}

export type EssayLikeMinAggregateOutputType = {
  id: number | null
  essayId: number | null
  operatorId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EssayLikeMaxAggregateOutputType = {
  id: number | null
  essayId: number | null
  operatorId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EssayLikeCountAggregateOutputType = {
  id: number
  essayId: number
  operatorId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type EssayLikeAvgAggregateInputType = {
  id?: true
  essayId?: true
}

export type EssayLikeSumAggregateInputType = {
  id?: true
  essayId?: true
}

export type EssayLikeMinAggregateInputType = {
  id?: true
  essayId?: true
  operatorId?: true
  createdAt?: true
  updatedAt?: true
}

export type EssayLikeMaxAggregateInputType = {
  id?: true
  essayId?: true
  operatorId?: true
  createdAt?: true
  updatedAt?: true
}

export type EssayLikeCountAggregateInputType = {
  id?: true
  essayId?: true
  operatorId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type EssayLikeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EssayLike to aggregate.
   */
  where?: Prisma.EssayLikeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EssayLikes to fetch.
   */
  orderBy?: Prisma.EssayLikeOrderByWithRelationInput | Prisma.EssayLikeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EssayLikeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EssayLikes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EssayLikes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EssayLikes
  **/
  _count?: true | EssayLikeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: EssayLikeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: EssayLikeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EssayLikeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EssayLikeMaxAggregateInputType
}

export type GetEssayLikeAggregateType<T extends EssayLikeAggregateArgs> = {
      [P in keyof T & keyof AggregateEssayLike]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEssayLike[P]>
    : Prisma.GetScalarType<T[P], AggregateEssayLike[P]>
}




export type EssayLikeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EssayLikeWhereInput
  orderBy?: Prisma.EssayLikeOrderByWithAggregationInput | Prisma.EssayLikeOrderByWithAggregationInput[]
  by: Prisma.EssayLikeScalarFieldEnum[] | Prisma.EssayLikeScalarFieldEnum
  having?: Prisma.EssayLikeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EssayLikeCountAggregateInputType | true
  _avg?: EssayLikeAvgAggregateInputType
  _sum?: EssayLikeSumAggregateInputType
  _min?: EssayLikeMinAggregateInputType
  _max?: EssayLikeMaxAggregateInputType
}

export type EssayLikeGroupByOutputType = {
  id: number
  essayId: number
  operatorId: string
  createdAt: Date
  updatedAt: Date
  _count: EssayLikeCountAggregateOutputType | null
  _avg: EssayLikeAvgAggregateOutputType | null
  _sum: EssayLikeSumAggregateOutputType | null
  _min: EssayLikeMinAggregateOutputType | null
  _max: EssayLikeMaxAggregateOutputType | null
}

type GetEssayLikeGroupByPayload<T extends EssayLikeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EssayLikeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EssayLikeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EssayLikeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EssayLikeGroupByOutputType[P]>
      }
    >
  > 



export type EssayLikeWhereInput = {
  AND?: Prisma.EssayLikeWhereInput | Prisma.EssayLikeWhereInput[]
  OR?: Prisma.EssayLikeWhereInput[]
  NOT?: Prisma.EssayLikeWhereInput | Prisma.EssayLikeWhereInput[]
  id?: Prisma.IntFilter<"EssayLike"> | number
  essayId?: Prisma.IntFilter<"EssayLike"> | number
  operatorId?: Prisma.StringFilter<"EssayLike"> | string
  createdAt?: Prisma.DateTimeFilter<"EssayLike"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EssayLike"> | Date | string
  essay?: Prisma.XOR<Prisma.EssayScalarRelationFilter, Prisma.EssayWhereInput>
  operator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type EssayLikeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  essayId?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  essay?: Prisma.EssayOrderByWithRelationInput
  operator?: Prisma.UserOrderByWithRelationInput
}

export type EssayLikeWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.EssayLikeWhereInput | Prisma.EssayLikeWhereInput[]
  OR?: Prisma.EssayLikeWhereInput[]
  NOT?: Prisma.EssayLikeWhereInput | Prisma.EssayLikeWhereInput[]
  essayId?: Prisma.IntFilter<"EssayLike"> | number
  operatorId?: Prisma.StringFilter<"EssayLike"> | string
  createdAt?: Prisma.DateTimeFilter<"EssayLike"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EssayLike"> | Date | string
  essay?: Prisma.XOR<Prisma.EssayScalarRelationFilter, Prisma.EssayWhereInput>
  operator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type EssayLikeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  essayId?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.EssayLikeCountOrderByAggregateInput
  _avg?: Prisma.EssayLikeAvgOrderByAggregateInput
  _max?: Prisma.EssayLikeMaxOrderByAggregateInput
  _min?: Prisma.EssayLikeMinOrderByAggregateInput
  _sum?: Prisma.EssayLikeSumOrderByAggregateInput
}

export type EssayLikeScalarWhereWithAggregatesInput = {
  AND?: Prisma.EssayLikeScalarWhereWithAggregatesInput | Prisma.EssayLikeScalarWhereWithAggregatesInput[]
  OR?: Prisma.EssayLikeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EssayLikeScalarWhereWithAggregatesInput | Prisma.EssayLikeScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"EssayLike"> | number
  essayId?: Prisma.IntWithAggregatesFilter<"EssayLike"> | number
  operatorId?: Prisma.StringWithAggregatesFilter<"EssayLike"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"EssayLike"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"EssayLike"> | Date | string
}

export type EssayLikeCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  essay: Prisma.EssayCreateNestedOneWithoutEssayLikeInput
  operator: Prisma.UserCreateNestedOneWithoutEssayLikeInput
}

export type EssayLikeUncheckedCreateInput = {
  id?: number
  essayId: number
  operatorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EssayLikeUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  essay?: Prisma.EssayUpdateOneRequiredWithoutEssayLikeNestedInput
  operator?: Prisma.UserUpdateOneRequiredWithoutEssayLikeNestedInput
}

export type EssayLikeUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  essayId?: Prisma.IntFieldUpdateOperationsInput | number
  operatorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EssayLikeCreateManyInput = {
  id?: number
  essayId: number
  operatorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EssayLikeUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EssayLikeUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  essayId?: Prisma.IntFieldUpdateOperationsInput | number
  operatorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EssayLikeListRelationFilter = {
  every?: Prisma.EssayLikeWhereInput
  some?: Prisma.EssayLikeWhereInput
  none?: Prisma.EssayLikeWhereInput
}

export type EssayLikeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EssayLikeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  essayId?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EssayLikeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  essayId?: Prisma.SortOrder
}

export type EssayLikeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  essayId?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EssayLikeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  essayId?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EssayLikeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  essayId?: Prisma.SortOrder
}

export type EssayLikeCreateNestedManyWithoutOperatorInput = {
  create?: Prisma.XOR<Prisma.EssayLikeCreateWithoutOperatorInput, Prisma.EssayLikeUncheckedCreateWithoutOperatorInput> | Prisma.EssayLikeCreateWithoutOperatorInput[] | Prisma.EssayLikeUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.EssayLikeCreateOrConnectWithoutOperatorInput | Prisma.EssayLikeCreateOrConnectWithoutOperatorInput[]
  createMany?: Prisma.EssayLikeCreateManyOperatorInputEnvelope
  connect?: Prisma.EssayLikeWhereUniqueInput | Prisma.EssayLikeWhereUniqueInput[]
}

export type EssayLikeUncheckedCreateNestedManyWithoutOperatorInput = {
  create?: Prisma.XOR<Prisma.EssayLikeCreateWithoutOperatorInput, Prisma.EssayLikeUncheckedCreateWithoutOperatorInput> | Prisma.EssayLikeCreateWithoutOperatorInput[] | Prisma.EssayLikeUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.EssayLikeCreateOrConnectWithoutOperatorInput | Prisma.EssayLikeCreateOrConnectWithoutOperatorInput[]
  createMany?: Prisma.EssayLikeCreateManyOperatorInputEnvelope
  connect?: Prisma.EssayLikeWhereUniqueInput | Prisma.EssayLikeWhereUniqueInput[]
}

export type EssayLikeUpdateManyWithoutOperatorNestedInput = {
  create?: Prisma.XOR<Prisma.EssayLikeCreateWithoutOperatorInput, Prisma.EssayLikeUncheckedCreateWithoutOperatorInput> | Prisma.EssayLikeCreateWithoutOperatorInput[] | Prisma.EssayLikeUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.EssayLikeCreateOrConnectWithoutOperatorInput | Prisma.EssayLikeCreateOrConnectWithoutOperatorInput[]
  upsert?: Prisma.EssayLikeUpsertWithWhereUniqueWithoutOperatorInput | Prisma.EssayLikeUpsertWithWhereUniqueWithoutOperatorInput[]
  createMany?: Prisma.EssayLikeCreateManyOperatorInputEnvelope
  set?: Prisma.EssayLikeWhereUniqueInput | Prisma.EssayLikeWhereUniqueInput[]
  disconnect?: Prisma.EssayLikeWhereUniqueInput | Prisma.EssayLikeWhereUniqueInput[]
  delete?: Prisma.EssayLikeWhereUniqueInput | Prisma.EssayLikeWhereUniqueInput[]
  connect?: Prisma.EssayLikeWhereUniqueInput | Prisma.EssayLikeWhereUniqueInput[]
  update?: Prisma.EssayLikeUpdateWithWhereUniqueWithoutOperatorInput | Prisma.EssayLikeUpdateWithWhereUniqueWithoutOperatorInput[]
  updateMany?: Prisma.EssayLikeUpdateManyWithWhereWithoutOperatorInput | Prisma.EssayLikeUpdateManyWithWhereWithoutOperatorInput[]
  deleteMany?: Prisma.EssayLikeScalarWhereInput | Prisma.EssayLikeScalarWhereInput[]
}

export type EssayLikeUncheckedUpdateManyWithoutOperatorNestedInput = {
  create?: Prisma.XOR<Prisma.EssayLikeCreateWithoutOperatorInput, Prisma.EssayLikeUncheckedCreateWithoutOperatorInput> | Prisma.EssayLikeCreateWithoutOperatorInput[] | Prisma.EssayLikeUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.EssayLikeCreateOrConnectWithoutOperatorInput | Prisma.EssayLikeCreateOrConnectWithoutOperatorInput[]
  upsert?: Prisma.EssayLikeUpsertWithWhereUniqueWithoutOperatorInput | Prisma.EssayLikeUpsertWithWhereUniqueWithoutOperatorInput[]
  createMany?: Prisma.EssayLikeCreateManyOperatorInputEnvelope
  set?: Prisma.EssayLikeWhereUniqueInput | Prisma.EssayLikeWhereUniqueInput[]
  disconnect?: Prisma.EssayLikeWhereUniqueInput | Prisma.EssayLikeWhereUniqueInput[]
  delete?: Prisma.EssayLikeWhereUniqueInput | Prisma.EssayLikeWhereUniqueInput[]
  connect?: Prisma.EssayLikeWhereUniqueInput | Prisma.EssayLikeWhereUniqueInput[]
  update?: Prisma.EssayLikeUpdateWithWhereUniqueWithoutOperatorInput | Prisma.EssayLikeUpdateWithWhereUniqueWithoutOperatorInput[]
  updateMany?: Prisma.EssayLikeUpdateManyWithWhereWithoutOperatorInput | Prisma.EssayLikeUpdateManyWithWhereWithoutOperatorInput[]
  deleteMany?: Prisma.EssayLikeScalarWhereInput | Prisma.EssayLikeScalarWhereInput[]
}

export type EssayLikeCreateNestedManyWithoutEssayInput = {
  create?: Prisma.XOR<Prisma.EssayLikeCreateWithoutEssayInput, Prisma.EssayLikeUncheckedCreateWithoutEssayInput> | Prisma.EssayLikeCreateWithoutEssayInput[] | Prisma.EssayLikeUncheckedCreateWithoutEssayInput[]
  connectOrCreate?: Prisma.EssayLikeCreateOrConnectWithoutEssayInput | Prisma.EssayLikeCreateOrConnectWithoutEssayInput[]
  createMany?: Prisma.EssayLikeCreateManyEssayInputEnvelope
  connect?: Prisma.EssayLikeWhereUniqueInput | Prisma.EssayLikeWhereUniqueInput[]
}

export type EssayLikeUncheckedCreateNestedManyWithoutEssayInput = {
  create?: Prisma.XOR<Prisma.EssayLikeCreateWithoutEssayInput, Prisma.EssayLikeUncheckedCreateWithoutEssayInput> | Prisma.EssayLikeCreateWithoutEssayInput[] | Prisma.EssayLikeUncheckedCreateWithoutEssayInput[]
  connectOrCreate?: Prisma.EssayLikeCreateOrConnectWithoutEssayInput | Prisma.EssayLikeCreateOrConnectWithoutEssayInput[]
  createMany?: Prisma.EssayLikeCreateManyEssayInputEnvelope
  connect?: Prisma.EssayLikeWhereUniqueInput | Prisma.EssayLikeWhereUniqueInput[]
}

export type EssayLikeUpdateManyWithoutEssayNestedInput = {
  create?: Prisma.XOR<Prisma.EssayLikeCreateWithoutEssayInput, Prisma.EssayLikeUncheckedCreateWithoutEssayInput> | Prisma.EssayLikeCreateWithoutEssayInput[] | Prisma.EssayLikeUncheckedCreateWithoutEssayInput[]
  connectOrCreate?: Prisma.EssayLikeCreateOrConnectWithoutEssayInput | Prisma.EssayLikeCreateOrConnectWithoutEssayInput[]
  upsert?: Prisma.EssayLikeUpsertWithWhereUniqueWithoutEssayInput | Prisma.EssayLikeUpsertWithWhereUniqueWithoutEssayInput[]
  createMany?: Prisma.EssayLikeCreateManyEssayInputEnvelope
  set?: Prisma.EssayLikeWhereUniqueInput | Prisma.EssayLikeWhereUniqueInput[]
  disconnect?: Prisma.EssayLikeWhereUniqueInput | Prisma.EssayLikeWhereUniqueInput[]
  delete?: Prisma.EssayLikeWhereUniqueInput | Prisma.EssayLikeWhereUniqueInput[]
  connect?: Prisma.EssayLikeWhereUniqueInput | Prisma.EssayLikeWhereUniqueInput[]
  update?: Prisma.EssayLikeUpdateWithWhereUniqueWithoutEssayInput | Prisma.EssayLikeUpdateWithWhereUniqueWithoutEssayInput[]
  updateMany?: Prisma.EssayLikeUpdateManyWithWhereWithoutEssayInput | Prisma.EssayLikeUpdateManyWithWhereWithoutEssayInput[]
  deleteMany?: Prisma.EssayLikeScalarWhereInput | Prisma.EssayLikeScalarWhereInput[]
}

export type EssayLikeUncheckedUpdateManyWithoutEssayNestedInput = {
  create?: Prisma.XOR<Prisma.EssayLikeCreateWithoutEssayInput, Prisma.EssayLikeUncheckedCreateWithoutEssayInput> | Prisma.EssayLikeCreateWithoutEssayInput[] | Prisma.EssayLikeUncheckedCreateWithoutEssayInput[]
  connectOrCreate?: Prisma.EssayLikeCreateOrConnectWithoutEssayInput | Prisma.EssayLikeCreateOrConnectWithoutEssayInput[]
  upsert?: Prisma.EssayLikeUpsertWithWhereUniqueWithoutEssayInput | Prisma.EssayLikeUpsertWithWhereUniqueWithoutEssayInput[]
  createMany?: Prisma.EssayLikeCreateManyEssayInputEnvelope
  set?: Prisma.EssayLikeWhereUniqueInput | Prisma.EssayLikeWhereUniqueInput[]
  disconnect?: Prisma.EssayLikeWhereUniqueInput | Prisma.EssayLikeWhereUniqueInput[]
  delete?: Prisma.EssayLikeWhereUniqueInput | Prisma.EssayLikeWhereUniqueInput[]
  connect?: Prisma.EssayLikeWhereUniqueInput | Prisma.EssayLikeWhereUniqueInput[]
  update?: Prisma.EssayLikeUpdateWithWhereUniqueWithoutEssayInput | Prisma.EssayLikeUpdateWithWhereUniqueWithoutEssayInput[]
  updateMany?: Prisma.EssayLikeUpdateManyWithWhereWithoutEssayInput | Prisma.EssayLikeUpdateManyWithWhereWithoutEssayInput[]
  deleteMany?: Prisma.EssayLikeScalarWhereInput | Prisma.EssayLikeScalarWhereInput[]
}

export type EssayLikeCreateWithoutOperatorInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  essay: Prisma.EssayCreateNestedOneWithoutEssayLikeInput
}

export type EssayLikeUncheckedCreateWithoutOperatorInput = {
  id?: number
  essayId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EssayLikeCreateOrConnectWithoutOperatorInput = {
  where: Prisma.EssayLikeWhereUniqueInput
  create: Prisma.XOR<Prisma.EssayLikeCreateWithoutOperatorInput, Prisma.EssayLikeUncheckedCreateWithoutOperatorInput>
}

export type EssayLikeCreateManyOperatorInputEnvelope = {
  data: Prisma.EssayLikeCreateManyOperatorInput | Prisma.EssayLikeCreateManyOperatorInput[]
}

export type EssayLikeUpsertWithWhereUniqueWithoutOperatorInput = {
  where: Prisma.EssayLikeWhereUniqueInput
  update: Prisma.XOR<Prisma.EssayLikeUpdateWithoutOperatorInput, Prisma.EssayLikeUncheckedUpdateWithoutOperatorInput>
  create: Prisma.XOR<Prisma.EssayLikeCreateWithoutOperatorInput, Prisma.EssayLikeUncheckedCreateWithoutOperatorInput>
}

export type EssayLikeUpdateWithWhereUniqueWithoutOperatorInput = {
  where: Prisma.EssayLikeWhereUniqueInput
  data: Prisma.XOR<Prisma.EssayLikeUpdateWithoutOperatorInput, Prisma.EssayLikeUncheckedUpdateWithoutOperatorInput>
}

export type EssayLikeUpdateManyWithWhereWithoutOperatorInput = {
  where: Prisma.EssayLikeScalarWhereInput
  data: Prisma.XOR<Prisma.EssayLikeUpdateManyMutationInput, Prisma.EssayLikeUncheckedUpdateManyWithoutOperatorInput>
}

export type EssayLikeScalarWhereInput = {
  AND?: Prisma.EssayLikeScalarWhereInput | Prisma.EssayLikeScalarWhereInput[]
  OR?: Prisma.EssayLikeScalarWhereInput[]
  NOT?: Prisma.EssayLikeScalarWhereInput | Prisma.EssayLikeScalarWhereInput[]
  id?: Prisma.IntFilter<"EssayLike"> | number
  essayId?: Prisma.IntFilter<"EssayLike"> | number
  operatorId?: Prisma.StringFilter<"EssayLike"> | string
  createdAt?: Prisma.DateTimeFilter<"EssayLike"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EssayLike"> | Date | string
}

export type EssayLikeCreateWithoutEssayInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  operator: Prisma.UserCreateNestedOneWithoutEssayLikeInput
}

export type EssayLikeUncheckedCreateWithoutEssayInput = {
  id?: number
  operatorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EssayLikeCreateOrConnectWithoutEssayInput = {
  where: Prisma.EssayLikeWhereUniqueInput
  create: Prisma.XOR<Prisma.EssayLikeCreateWithoutEssayInput, Prisma.EssayLikeUncheckedCreateWithoutEssayInput>
}

export type EssayLikeCreateManyEssayInputEnvelope = {
  data: Prisma.EssayLikeCreateManyEssayInput | Prisma.EssayLikeCreateManyEssayInput[]
}

export type EssayLikeUpsertWithWhereUniqueWithoutEssayInput = {
  where: Prisma.EssayLikeWhereUniqueInput
  update: Prisma.XOR<Prisma.EssayLikeUpdateWithoutEssayInput, Prisma.EssayLikeUncheckedUpdateWithoutEssayInput>
  create: Prisma.XOR<Prisma.EssayLikeCreateWithoutEssayInput, Prisma.EssayLikeUncheckedCreateWithoutEssayInput>
}

export type EssayLikeUpdateWithWhereUniqueWithoutEssayInput = {
  where: Prisma.EssayLikeWhereUniqueInput
  data: Prisma.XOR<Prisma.EssayLikeUpdateWithoutEssayInput, Prisma.EssayLikeUncheckedUpdateWithoutEssayInput>
}

export type EssayLikeUpdateManyWithWhereWithoutEssayInput = {
  where: Prisma.EssayLikeScalarWhereInput
  data: Prisma.XOR<Prisma.EssayLikeUpdateManyMutationInput, Prisma.EssayLikeUncheckedUpdateManyWithoutEssayInput>
}

export type EssayLikeCreateManyOperatorInput = {
  id?: number
  essayId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EssayLikeUpdateWithoutOperatorInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  essay?: Prisma.EssayUpdateOneRequiredWithoutEssayLikeNestedInput
}

export type EssayLikeUncheckedUpdateWithoutOperatorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  essayId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EssayLikeUncheckedUpdateManyWithoutOperatorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  essayId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EssayLikeCreateManyEssayInput = {
  id?: number
  operatorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EssayLikeUpdateWithoutEssayInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  operator?: Prisma.UserUpdateOneRequiredWithoutEssayLikeNestedInput
}

export type EssayLikeUncheckedUpdateWithoutEssayInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  operatorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EssayLikeUncheckedUpdateManyWithoutEssayInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  operatorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type EssayLikeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  essayId?: boolean
  operatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  essay?: boolean | Prisma.EssayDefaultArgs<ExtArgs>
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["essayLike"]>

export type EssayLikeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  essayId?: boolean
  operatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  essay?: boolean | Prisma.EssayDefaultArgs<ExtArgs>
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["essayLike"]>

export type EssayLikeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  essayId?: boolean
  operatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  essay?: boolean | Prisma.EssayDefaultArgs<ExtArgs>
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["essayLike"]>

export type EssayLikeSelectScalar = {
  id?: boolean
  essayId?: boolean
  operatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type EssayLikeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "essayId" | "operatorId" | "createdAt" | "updatedAt", ExtArgs["result"]["essayLike"]>
export type EssayLikeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  essay?: boolean | Prisma.EssayDefaultArgs<ExtArgs>
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type EssayLikeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  essay?: boolean | Prisma.EssayDefaultArgs<ExtArgs>
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type EssayLikeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  essay?: boolean | Prisma.EssayDefaultArgs<ExtArgs>
  operator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $EssayLikePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EssayLike"
  objects: {
    essay: Prisma.$EssayPayload<ExtArgs>
    operator: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    essayId: number
    operatorId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["essayLike"]>
  composites: {}
}

export type EssayLikeGetPayload<S extends boolean | null | undefined | EssayLikeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EssayLikePayload, S>

export type EssayLikeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EssayLikeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EssayLikeCountAggregateInputType | true
  }

export interface EssayLikeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EssayLike'], meta: { name: 'EssayLike' } }
  /**
   * Find zero or one EssayLike that matches the filter.
   * @param {EssayLikeFindUniqueArgs} args - Arguments to find a EssayLike
   * @example
   * // Get one EssayLike
   * const essayLike = await prisma.essayLike.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EssayLikeFindUniqueArgs>(args: Prisma.SelectSubset<T, EssayLikeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EssayLikeClient<runtime.Types.Result.GetResult<Prisma.$EssayLikePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EssayLike that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EssayLikeFindUniqueOrThrowArgs} args - Arguments to find a EssayLike
   * @example
   * // Get one EssayLike
   * const essayLike = await prisma.essayLike.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EssayLikeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EssayLikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EssayLikeClient<runtime.Types.Result.GetResult<Prisma.$EssayLikePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EssayLike that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayLikeFindFirstArgs} args - Arguments to find a EssayLike
   * @example
   * // Get one EssayLike
   * const essayLike = await prisma.essayLike.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EssayLikeFindFirstArgs>(args?: Prisma.SelectSubset<T, EssayLikeFindFirstArgs<ExtArgs>>): Prisma.Prisma__EssayLikeClient<runtime.Types.Result.GetResult<Prisma.$EssayLikePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EssayLike that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayLikeFindFirstOrThrowArgs} args - Arguments to find a EssayLike
   * @example
   * // Get one EssayLike
   * const essayLike = await prisma.essayLike.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EssayLikeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EssayLikeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EssayLikeClient<runtime.Types.Result.GetResult<Prisma.$EssayLikePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EssayLikes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayLikeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EssayLikes
   * const essayLikes = await prisma.essayLike.findMany()
   * 
   * // Get first 10 EssayLikes
   * const essayLikes = await prisma.essayLike.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const essayLikeWithIdOnly = await prisma.essayLike.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EssayLikeFindManyArgs>(args?: Prisma.SelectSubset<T, EssayLikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EssayLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EssayLike.
   * @param {EssayLikeCreateArgs} args - Arguments to create a EssayLike.
   * @example
   * // Create one EssayLike
   * const EssayLike = await prisma.essayLike.create({
   *   data: {
   *     // ... data to create a EssayLike
   *   }
   * })
   * 
   */
  create<T extends EssayLikeCreateArgs>(args: Prisma.SelectSubset<T, EssayLikeCreateArgs<ExtArgs>>): Prisma.Prisma__EssayLikeClient<runtime.Types.Result.GetResult<Prisma.$EssayLikePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EssayLikes.
   * @param {EssayLikeCreateManyArgs} args - Arguments to create many EssayLikes.
   * @example
   * // Create many EssayLikes
   * const essayLike = await prisma.essayLike.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EssayLikeCreateManyArgs>(args?: Prisma.SelectSubset<T, EssayLikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many EssayLikes and returns the data saved in the database.
   * @param {EssayLikeCreateManyAndReturnArgs} args - Arguments to create many EssayLikes.
   * @example
   * // Create many EssayLikes
   * const essayLike = await prisma.essayLike.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many EssayLikes and only return the `id`
   * const essayLikeWithIdOnly = await prisma.essayLike.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EssayLikeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EssayLikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EssayLikePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a EssayLike.
   * @param {EssayLikeDeleteArgs} args - Arguments to delete one EssayLike.
   * @example
   * // Delete one EssayLike
   * const EssayLike = await prisma.essayLike.delete({
   *   where: {
   *     // ... filter to delete one EssayLike
   *   }
   * })
   * 
   */
  delete<T extends EssayLikeDeleteArgs>(args: Prisma.SelectSubset<T, EssayLikeDeleteArgs<ExtArgs>>): Prisma.Prisma__EssayLikeClient<runtime.Types.Result.GetResult<Prisma.$EssayLikePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EssayLike.
   * @param {EssayLikeUpdateArgs} args - Arguments to update one EssayLike.
   * @example
   * // Update one EssayLike
   * const essayLike = await prisma.essayLike.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EssayLikeUpdateArgs>(args: Prisma.SelectSubset<T, EssayLikeUpdateArgs<ExtArgs>>): Prisma.Prisma__EssayLikeClient<runtime.Types.Result.GetResult<Prisma.$EssayLikePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EssayLikes.
   * @param {EssayLikeDeleteManyArgs} args - Arguments to filter EssayLikes to delete.
   * @example
   * // Delete a few EssayLikes
   * const { count } = await prisma.essayLike.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EssayLikeDeleteManyArgs>(args?: Prisma.SelectSubset<T, EssayLikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EssayLikes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayLikeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EssayLikes
   * const essayLike = await prisma.essayLike.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EssayLikeUpdateManyArgs>(args: Prisma.SelectSubset<T, EssayLikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EssayLikes and returns the data updated in the database.
   * @param {EssayLikeUpdateManyAndReturnArgs} args - Arguments to update many EssayLikes.
   * @example
   * // Update many EssayLikes
   * const essayLike = await prisma.essayLike.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more EssayLikes and only return the `id`
   * const essayLikeWithIdOnly = await prisma.essayLike.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EssayLikeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EssayLikeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EssayLikePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one EssayLike.
   * @param {EssayLikeUpsertArgs} args - Arguments to update or create a EssayLike.
   * @example
   * // Update or create a EssayLike
   * const essayLike = await prisma.essayLike.upsert({
   *   create: {
   *     // ... data to create a EssayLike
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EssayLike we want to update
   *   }
   * })
   */
  upsert<T extends EssayLikeUpsertArgs>(args: Prisma.SelectSubset<T, EssayLikeUpsertArgs<ExtArgs>>): Prisma.Prisma__EssayLikeClient<runtime.Types.Result.GetResult<Prisma.$EssayLikePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EssayLikes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayLikeCountArgs} args - Arguments to filter EssayLikes to count.
   * @example
   * // Count the number of EssayLikes
   * const count = await prisma.essayLike.count({
   *   where: {
   *     // ... the filter for the EssayLikes we want to count
   *   }
   * })
  **/
  count<T extends EssayLikeCountArgs>(
    args?: Prisma.Subset<T, EssayLikeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EssayLikeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EssayLike.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EssayLikeAggregateArgs>(args: Prisma.Subset<T, EssayLikeAggregateArgs>): Prisma.PrismaPromise<GetEssayLikeAggregateType<T>>

  /**
   * Group by EssayLike.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EssayLikeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EssayLikeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EssayLikeGroupByArgs['orderBy'] }
      : { orderBy?: EssayLikeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EssayLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEssayLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EssayLike model
 */
readonly fields: EssayLikeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EssayLike.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EssayLikeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  essay<T extends Prisma.EssayDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EssayDefaultArgs<ExtArgs>>): Prisma.Prisma__EssayClient<runtime.Types.Result.GetResult<Prisma.$EssayPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  operator<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EssayLike model
 */
export interface EssayLikeFieldRefs {
  readonly id: Prisma.FieldRef<"EssayLike", 'Int'>
  readonly essayId: Prisma.FieldRef<"EssayLike", 'Int'>
  readonly operatorId: Prisma.FieldRef<"EssayLike", 'String'>
  readonly createdAt: Prisma.FieldRef<"EssayLike", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"EssayLike", 'DateTime'>
}
    

// Custom InputTypes
/**
 * EssayLike findUnique
 */
export type EssayLikeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayLike
   */
  select?: Prisma.EssayLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayLike
   */
  omit?: Prisma.EssayLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayLikeInclude<ExtArgs> | null
  /**
   * Filter, which EssayLike to fetch.
   */
  where: Prisma.EssayLikeWhereUniqueInput
}

/**
 * EssayLike findUniqueOrThrow
 */
export type EssayLikeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayLike
   */
  select?: Prisma.EssayLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayLike
   */
  omit?: Prisma.EssayLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayLikeInclude<ExtArgs> | null
  /**
   * Filter, which EssayLike to fetch.
   */
  where: Prisma.EssayLikeWhereUniqueInput
}

/**
 * EssayLike findFirst
 */
export type EssayLikeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayLike
   */
  select?: Prisma.EssayLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayLike
   */
  omit?: Prisma.EssayLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayLikeInclude<ExtArgs> | null
  /**
   * Filter, which EssayLike to fetch.
   */
  where?: Prisma.EssayLikeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EssayLikes to fetch.
   */
  orderBy?: Prisma.EssayLikeOrderByWithRelationInput | Prisma.EssayLikeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EssayLikes.
   */
  cursor?: Prisma.EssayLikeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EssayLikes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EssayLikes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EssayLikes.
   */
  distinct?: Prisma.EssayLikeScalarFieldEnum | Prisma.EssayLikeScalarFieldEnum[]
}

/**
 * EssayLike findFirstOrThrow
 */
export type EssayLikeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayLike
   */
  select?: Prisma.EssayLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayLike
   */
  omit?: Prisma.EssayLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayLikeInclude<ExtArgs> | null
  /**
   * Filter, which EssayLike to fetch.
   */
  where?: Prisma.EssayLikeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EssayLikes to fetch.
   */
  orderBy?: Prisma.EssayLikeOrderByWithRelationInput | Prisma.EssayLikeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EssayLikes.
   */
  cursor?: Prisma.EssayLikeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EssayLikes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EssayLikes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EssayLikes.
   */
  distinct?: Prisma.EssayLikeScalarFieldEnum | Prisma.EssayLikeScalarFieldEnum[]
}

/**
 * EssayLike findMany
 */
export type EssayLikeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayLike
   */
  select?: Prisma.EssayLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayLike
   */
  omit?: Prisma.EssayLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayLikeInclude<ExtArgs> | null
  /**
   * Filter, which EssayLikes to fetch.
   */
  where?: Prisma.EssayLikeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EssayLikes to fetch.
   */
  orderBy?: Prisma.EssayLikeOrderByWithRelationInput | Prisma.EssayLikeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EssayLikes.
   */
  cursor?: Prisma.EssayLikeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EssayLikes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EssayLikes.
   */
  skip?: number
  distinct?: Prisma.EssayLikeScalarFieldEnum | Prisma.EssayLikeScalarFieldEnum[]
}

/**
 * EssayLike create
 */
export type EssayLikeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayLike
   */
  select?: Prisma.EssayLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayLike
   */
  omit?: Prisma.EssayLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayLikeInclude<ExtArgs> | null
  /**
   * The data needed to create a EssayLike.
   */
  data: Prisma.XOR<Prisma.EssayLikeCreateInput, Prisma.EssayLikeUncheckedCreateInput>
}

/**
 * EssayLike createMany
 */
export type EssayLikeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EssayLikes.
   */
  data: Prisma.EssayLikeCreateManyInput | Prisma.EssayLikeCreateManyInput[]
}

/**
 * EssayLike createManyAndReturn
 */
export type EssayLikeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayLike
   */
  select?: Prisma.EssayLikeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EssayLike
   */
  omit?: Prisma.EssayLikeOmit<ExtArgs> | null
  /**
   * The data used to create many EssayLikes.
   */
  data: Prisma.EssayLikeCreateManyInput | Prisma.EssayLikeCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayLikeIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * EssayLike update
 */
export type EssayLikeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayLike
   */
  select?: Prisma.EssayLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayLike
   */
  omit?: Prisma.EssayLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayLikeInclude<ExtArgs> | null
  /**
   * The data needed to update a EssayLike.
   */
  data: Prisma.XOR<Prisma.EssayLikeUpdateInput, Prisma.EssayLikeUncheckedUpdateInput>
  /**
   * Choose, which EssayLike to update.
   */
  where: Prisma.EssayLikeWhereUniqueInput
}

/**
 * EssayLike updateMany
 */
export type EssayLikeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EssayLikes.
   */
  data: Prisma.XOR<Prisma.EssayLikeUpdateManyMutationInput, Prisma.EssayLikeUncheckedUpdateManyInput>
  /**
   * Filter which EssayLikes to update
   */
  where?: Prisma.EssayLikeWhereInput
  /**
   * Limit how many EssayLikes to update.
   */
  limit?: number
}

/**
 * EssayLike updateManyAndReturn
 */
export type EssayLikeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayLike
   */
  select?: Prisma.EssayLikeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EssayLike
   */
  omit?: Prisma.EssayLikeOmit<ExtArgs> | null
  /**
   * The data used to update EssayLikes.
   */
  data: Prisma.XOR<Prisma.EssayLikeUpdateManyMutationInput, Prisma.EssayLikeUncheckedUpdateManyInput>
  /**
   * Filter which EssayLikes to update
   */
  where?: Prisma.EssayLikeWhereInput
  /**
   * Limit how many EssayLikes to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayLikeIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * EssayLike upsert
 */
export type EssayLikeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayLike
   */
  select?: Prisma.EssayLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayLike
   */
  omit?: Prisma.EssayLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayLikeInclude<ExtArgs> | null
  /**
   * The filter to search for the EssayLike to update in case it exists.
   */
  where: Prisma.EssayLikeWhereUniqueInput
  /**
   * In case the EssayLike found by the `where` argument doesn't exist, create a new EssayLike with this data.
   */
  create: Prisma.XOR<Prisma.EssayLikeCreateInput, Prisma.EssayLikeUncheckedCreateInput>
  /**
   * In case the EssayLike was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EssayLikeUpdateInput, Prisma.EssayLikeUncheckedUpdateInput>
}

/**
 * EssayLike delete
 */
export type EssayLikeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayLike
   */
  select?: Prisma.EssayLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayLike
   */
  omit?: Prisma.EssayLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayLikeInclude<ExtArgs> | null
  /**
   * Filter which EssayLike to delete.
   */
  where: Prisma.EssayLikeWhereUniqueInput
}

/**
 * EssayLike deleteMany
 */
export type EssayLikeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EssayLikes to delete
   */
  where?: Prisma.EssayLikeWhereInput
  /**
   * Limit how many EssayLikes to delete.
   */
  limit?: number
}

/**
 * EssayLike without action
 */
export type EssayLikeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EssayLike
   */
  select?: Prisma.EssayLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EssayLike
   */
  omit?: Prisma.EssayLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EssayLikeInclude<ExtArgs> | null
}
